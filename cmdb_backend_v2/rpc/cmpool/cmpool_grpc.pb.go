// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/cmpool.proto

package cmpool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmpoolClient is the client API for Cmpool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmpoolClient interface {
	// 从CMDB抽取主机数据
	// 根据传递的ip列表，从 cmdb 中抽取数据库资源池中数据库服务器的数据并持久化
	CmdbExtractByHosts(ctx context.Context, in *ExtractByHostsReq, opts ...grpc.CallOption) (*ExtractByHostsResp, error)
	// <必要数据搜集>，全量抽取CMDB中数据库服务器的数据并刷新到数据库资源池
	CmdbExtractAll(ctx context.Context, in *ExtractAllReq, opts ...grpc.CallOption) (*ExtractAllResp, error)
	// 数据搜集，按照cmdb中的ownerGroup抽取所有属于具体组的服务器并写入hosts_pool
	CmdbExtractHostsByOwner(ctx context.Context, in *ExtractByOwnerReq, opts ...grpc.CallOption) (*ExtractByOwnerResp, error)
	// 向CMDB回写数据
	// 向 cmdb 中注入维护后的数据库资源池中对象的数据
	CmdbInjectAll(ctx context.Context, in *InjectAllReq, opts ...grpc.CallOption) (*InjectAllResp, error)
	// 向 cmdb 中注入维护后的数据库资源池中对象的数据
	CmdbInjectByHosts(ctx context.Context, in *InjectHostsReq, opts ...grpc.CallOption) (*InjectHostsResp, error)
	// 数据库主机池数据维护
	// <必要数据搜集>，同步(MySQL、TiDB、GoldenDB)数据库主机到主机资源池表
	CmdbSyncHosts(ctx context.Context, in *SyncHostsReq, opts ...grpc.CallOption) (*SyncHostsResp, error)
	// 手动修改资源池主机信息，如果主机信息最终 isStatic 不为 True，那么这里的修改会被后续的任务以真实数据刷掉
	CmdbModifyHosts(ctx context.Context, in *ModifyHostsReq, opts ...grpc.CallOption) (*ModifyHostsResp, error)
	// 软删除资源池主机
	CmdbSoftDelHosts(ctx context.Context, in *SoftDelHostsReq, opts ...grpc.CallOption) (*SoftDelHostsResp, error)
	// 硬删除资源池主机
	CmdbHardDelHosts(ctx context.Context, in *HardDelHostsReq, opts ...grpc.CallOption) (*HardDelHostsResp, error)
	// 获取资源池主机信息，包括cmdb信息，应用部署信息等所有相关数据（这里是根据hosts_pool实时检索，数据并不来自于hosts_application表）
	CmdbGetHostsDetail(ctx context.Context, in *GetHostsDetailReq, opts ...grpc.CallOption) (*GetHostsDetailResp, error)
	// 内部数据加工和检索
	// <必要数据搜集>，搜集主机的应用信息并记录，所有应用服务部署时，都应当将应用信息写入到该表，目前为手动/自动触发接口搜集
	CollectApplications(ctx context.Context, in *CollAppsReq, opts ...grpc.CallOption) (*CollAppsResp, error)
	// 查询主机信息，主页面数据展示，返回的数据实际上和detail接口一致，这里没有做区别实现，如果有需要可以添加
	GetHostsPool(ctx context.Context, in *GetHostsPoolReq, opts ...grpc.CallOption) (*GetHostsDetailResp, error)
	// 查询主机硬件信息详情，主机子页面显示
	//rpc get_hosts_hardware(GetHostHardwareReq) returns (GetHostHardwareResp);
	// 查询主机应用信息详情，主机子页面显示
	//rpc get_hosts_applications(GetHostsAppReq) returns (GetHostsAppResp);
	// 查询主机资源池详情，包括主机的硬件信息、软件信息，接口涉及数据量较大，一般不用于页面显示，用于向外部提供全量数据或数据导出需求
	GetHostsPoolDetail(ctx context.Context, in *GetHostsPoolDetailReq, opts ...grpc.CallOption) (*GetHostsPoolDetailResp, error)
	// 手动添加资源池主机应用信息
	AddHostsApplication(ctx context.Context, in *AddHostsAppReq, opts ...grpc.CallOption) (*AddHostsAppResp, error)
	// 手动修改资源池主机应用信息
	ModifyHostsApplication(ctx context.Context, in *MdfHostsAppReq, opts ...grpc.CallOption) (*MdfHostsAppResp, error)
	// 删除资源池主机应用信息
	DeleteHostsApplication(ctx context.Context, in *DelHostsAppReq, opts ...grpc.CallOption) (*DelHostsAppResp, error)
	// 查询所有集群组及对应业务线
	GetClusterGroups(ctx context.Context, in *ClusterGroupsReq, opts ...grpc.CallOption) (*ClusterGroupsResp, error)
	// 查询主机资源使用率数据
	GetServerResource(ctx context.Context, in *ServerResourceReq, opts ...grpc.CallOption) (*ServerResourceResp, error)
	// 查询主机资源最大利用率数据
	GetServerResourceMax(ctx context.Context, in *ServerResourceMaxReq, opts ...grpc.CallOption) (*ServerResourceMaxResp, error)
	// 查询主机资源最大利用率数据（支持集群数组）
	// 获取集群资源详细信息
	GetClusterResources(ctx context.Context, in *ClusterResourceReq, opts ...grpc.CallOption) (*ClusterResourceResp, error)
	// 获取集群资源最大利用率信息
	GetClusterResourcesMax(ctx context.Context, in *ClusterResourceReq, opts ...grpc.CallOption) (*ClusterResourceMaxResp, error)
	// 获取磁盘预测数据
	GetDiskPrediction(ctx context.Context, in *DiskPredictionReq, opts ...grpc.CallOption) (*DiskPredictionResp, error)
	// 获取备份恢复检查信息
	GetBackupRestoreCheckInfo(ctx context.Context, in *BackupRestoreCheckInfoReq, opts ...grpc.CallOption) (*BackupRestoreCheckInfoResp, error)
	// 获取集群确认摘要
	GetClusterConfirmSummary(ctx context.Context, in *ClusterConfirmSummaryReq, opts ...grpc.CallOption) (*ClusterConfirmSummaryResp, error)
	// 同步集群组数据
	SyncClusterGroups(ctx context.Context, in *SyncClusterGroupsReq, opts ...grpc.CallOption) (*SyncClusterGroupsResp, error)
	// 从集群实例表同步主机到hosts_pool和hosts_applications表
	SyncHostsFromClusters(ctx context.Context, in *SyncClusterGroupsReq, opts ...grpc.CallOption) (*SyncClusterGroupsResp, error)
	LoadServerMetricsFromCsv(ctx context.Context, in *LoadServerMetricsCSVReq, opts ...grpc.CallOption) (Cmpool_LoadServerMetricsFromCsvClient, error)
	// 监控数据核对
	VerifyMonitoringData(ctx context.Context, in *VerifyMonitoringDataReq, opts ...grpc.CallOption) (*VerifyMonitoringDataResp, error)
	// 硬件资源验证
	HardwareResourceVerification(ctx context.Context, in *HardwareResourceVerificationReq, opts ...grpc.CallOption) (*HardwareResourceVerificationResp, error)
	// 获取硬件资源验证状态
	GetHardwareResourceVerificationStatus(ctx context.Context, in *GetHardwareResourceVerificationStatusReq, opts ...grpc.CallOption) (*GetHardwareResourceVerificationStatusResp, error)
	// 获取硬件资源验证历史记录
	GetHardwareResourceVerificationHistory(ctx context.Context, in *GetHardwareResourceVerificationHistoryReq, opts ...grpc.CallOption) (*GetHardwareResourceVerificationHistoryResp, error)
	// 定时任务相关方法
	// 创建定时任务
	CreateScheduledTask(ctx context.Context, in *CreateScheduledTaskReq, opts ...grpc.CallOption) (*CreateScheduledTaskResp, error)
	// 更新定时任务
	UpdateScheduledTask(ctx context.Context, in *UpdateScheduledTaskReq, opts ...grpc.CallOption) (*UpdateScheduledTaskResp, error)
	// 删除定时任务
	DeleteScheduledTask(ctx context.Context, in *DeleteScheduledTaskReq, opts ...grpc.CallOption) (*DeleteScheduledTaskResp, error)
	// 获取定时任务列表
	GetScheduledTasks(ctx context.Context, in *GetScheduledTasksReq, opts ...grpc.CallOption) (*GetScheduledTasksResp, error)
	// 获取定时任务详情
	GetScheduledTaskDetail(ctx context.Context, in *GetScheduledTaskDetailReq, opts ...grpc.CallOption) (*GetScheduledTaskDetailResp, error)
	// 启用/禁用定时任务
	EnableScheduledTask(ctx context.Context, in *EnableScheduledTaskReq, opts ...grpc.CallOption) (*EnableScheduledTaskResp, error)
	// 获取定时任务执行历史
	GetScheduledTaskExecutionHistory(ctx context.Context, in *GetScheduledTaskExecutionHistoryReq, opts ...grpc.CallOption) (*GetScheduledTaskExecutionHistoryResp, error)
	// 获取定时任务执行详情
	GetScheduledTaskExecutionDetails(ctx context.Context, in *GetScheduledTaskExecutionDetailsReq, opts ...grpc.CallOption) (*GetScheduledTaskExecutionDetailsResp, error)
	// 用户认证相关方法
	// 用户登录
	UserLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 验证Token
	ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error)
	// 用户登出
	UserLogout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	// 创建用户（CAS用户自动创建）
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
	// 从外部CMDB获取主机硬件信息并更新hosts_pool表
	FetchHostsHardwareInfo(ctx context.Context, in *FetchHostsHardwareInfoReq, opts ...grpc.CallOption) (*FetchHostsHardwareInfoResp, error)
	// 从外部CMDB同步完整主机信息到hosts_pool表
	SyncExternalCmdb(ctx context.Context, in *SyncExternalCmdbReq, opts ...grpc.CallOption) (*SyncExternalCmdbResp, error)
	// 手动添加主机到hosts_pool表并同步相关信息
	ManualAddHost(ctx context.Context, in *ManualAddHostReq, opts ...grpc.CallOption) (*ManualAddHostResp, error)
	// 自动获取主机信息用于填充表单
	AutoFetchHostInfo(ctx context.Context, in *AutoFetchHostInfoReq, opts ...grpc.CallOption) (*AutoFetchHostInfoResp, error)
	// IDC机房配置管理相关方法
	// 获取IDC机房配置列表
	GetIdcConfList(ctx context.Context, in *GetIdcConfListReq, opts ...grpc.CallOption) (*GetIdcConfListResp, error)
	// 创建IDC机房配置
	CreateIdcConf(ctx context.Context, in *CreateIdcConfReq, opts ...grpc.CallOption) (*CreateIdcConfResp, error)
	// 更新IDC机房配置
	UpdateIdcConf(ctx context.Context, in *UpdateIdcConfReq, opts ...grpc.CallOption) (*UpdateIdcConfResp, error)
	// 删除IDC机房配置
	DeleteIdcConf(ctx context.Context, in *DeleteIdcConfReq, opts ...grpc.CallOption) (*DeleteIdcConfResp, error)
	// 根据IP匹配IDC机房
	MatchIdcByIp(ctx context.Context, in *MatchIdcByIpReq, opts ...grpc.CallOption) (*MatchIdcByIpResp, error)
	// 批量更新主机IDC信息
	UpdateHostsIdc(ctx context.Context, in *UpdateHostsIdcReq, opts ...grpc.CallOption) (*UpdateHostsIdcResp, error)
	// ========== 统一的外部资源同步接口（推荐使用） ==========
	// 1. 任务配置管理接口
	// 创建外部同步任务配置（支持ES和CMSys）
	CreateExternalSyncTask(ctx context.Context, in *CreateExternalSyncTaskReq, opts ...grpc.CallOption) (*CreateExternalSyncTaskResp, error)
	// 更新外部同步任务配置
	UpdateExternalSyncTask(ctx context.Context, in *UpdateExternalSyncTaskReq, opts ...grpc.CallOption) (*UpdateExternalSyncTaskResp, error)
	// 删除外部同步任务配置
	DeleteExternalSyncTask(ctx context.Context, in *DeleteExternalSyncTaskReq, opts ...grpc.CallOption) (*DeleteExternalSyncTaskResp, error)
	// 获取外部同步任务配置列表
	GetExternalSyncTasks(ctx context.Context, in *GetExternalSyncTasksReq, opts ...grpc.CallOption) (*GetExternalSyncTasksResp, error)
	// 获取外部同步任务配置详情
	GetExternalSyncTaskDetail(ctx context.Context, in *GetExternalSyncTaskDetailReq, opts ...grpc.CallOption) (*GetExternalSyncTaskDetailResp, error)
	// 启用/禁用外部同步任务
	EnableExternalSyncTask(ctx context.Context, in *EnableExternalSyncTaskReq, opts ...grpc.CallOption) (*EnableExternalSyncTaskResp, error)
	// 2. 同步执行接口
	// 根据主机列表立即执行外部同步（支持ES和CMSys）
	ExecuteExternalSyncByHostList(ctx context.Context, in *ExecuteExternalSyncByHostListReq, opts ...grpc.CallOption) (*ExecuteExternalSyncResp, error)
	// 根据文件立即执行外部同步
	ExecuteExternalSyncByFile(ctx context.Context, in *ExecuteExternalSyncByFileReq, opts ...grpc.CallOption) (*ExecuteExternalSyncResp, error)
	// 外部同步全量同步
	ExecuteExternalSyncFullSync(ctx context.Context, in *ExecuteExternalSyncFullSyncReq, opts ...grpc.CallOption) (*ExecuteExternalSyncResp, error)
	// 3. 执行记录查询接口（已统一，无需修改）
	// 获取外部数据同步执行记录列表
	GetExternalSyncExecutionLogs(ctx context.Context, in *GetExternalSyncExecutionLogsReq, opts ...grpc.CallOption) (*GetExternalSyncExecutionLogsResp, error)
	// 获取外部数据同步执行详情
	GetExternalSyncExecutionDetail(ctx context.Context, in *GetExternalSyncExecutionDetailReq, opts ...grpc.CallOption) (*GetExternalSyncExecutionDetailResp, error)
	// ========== 已废弃的ES专用接口（请使用统一接口 create_external_sync_task 等） ==========
	// ES数据同步任务配置管理相关方法
	// [DEPRECATED] 创建ES数据同步任务配置 - 请使用 create_external_sync_task
	CreateEsSyncTask(ctx context.Context, in *CreateESSyncTaskReq, opts ...grpc.CallOption) (*CreateESSyncTaskResp, error)
	// [DEPRECATED] 更新ES数据同步任务配置 - 请使用 update_external_sync_task
	UpdateEsSyncTask(ctx context.Context, in *UpdateESSyncTaskReq, opts ...grpc.CallOption) (*UpdateESSyncTaskResp, error)
	// [DEPRECATED] 删除ES数据同步任务配置 - 请使用 delete_external_sync_task
	DeleteEsSyncTask(ctx context.Context, in *DeleteESSyncTaskReq, opts ...grpc.CallOption) (*DeleteESSyncTaskResp, error)
	// [DEPRECATED] 获取ES数据同步任务配置列表 - 请使用 get_external_sync_tasks
	GetEsSyncTasks(ctx context.Context, in *GetESSyncTasksReq, opts ...grpc.CallOption) (*GetESSyncTasksResp, error)
	// [DEPRECATED] 获取ES数据同步任务配置详情 - 请使用 get_external_sync_task_detail
	GetEsSyncTaskDetail(ctx context.Context, in *GetESSyncTaskDetailReq, opts ...grpc.CallOption) (*GetESSyncTaskDetailResp, error)
	// [DEPRECATED] 启用/禁用ES数据同步任务 - 请使用 enable_external_sync_task
	EnableEsSyncTask(ctx context.Context, in *EnableESSyncTaskReq, opts ...grpc.CallOption) (*EnableESSyncTaskResp, error)
	// ES数据同步执行相关方法
	// [DEPRECATED] 根据主机列表立即执行ES数据同步 - 请使用 execute_external_sync_by_host_list
	ExecuteEsSyncByHostList(ctx context.Context, in *ExecuteESSyncByHostListReq, opts ...grpc.CallOption) (*ExecuteESSyncResp, error)
	// [DEPRECATED] 根据文件立即执行ES数据同步 - 请使用 execute_external_sync_by_file
	ExecuteEsSyncByFile(ctx context.Context, in *ExecuteESSyncByFileReq, opts ...grpc.CallOption) (*ExecuteESSyncResp, error)
	// [DEPRECATED] ES全量同步 - 请使用 execute_external_sync_full_sync
	ExecuteEsSyncFullSync(ctx context.Context, in *ExecuteESSyncFullSyncReq, opts ...grpc.CallOption) (*ExecuteESSyncFullSyncResp, error)
	// ========== 已废弃的CMSys专用接口（请使用统一接口） ==========
	// CMSys数据同步执行相关方法
	// [DEPRECATED] 从CMSys HTTP接口同步主机数据 - 请使用 execute_external_sync_by_host_list
	ExecuteCmsysSync(ctx context.Context, in *ExecuteCMSysSyncReq, opts ...grpc.CallOption) (*ExecuteCMSysSyncResp, error)
	// [DEPRECATED] CMSys按文件执行同步 - 请使用 execute_external_sync_by_file
	ExecuteCmsysSyncByFile(ctx context.Context, in *ExecuteCMSysSyncByFileReq, opts ...grpc.CallOption) (*ExecuteCMSysSyncResp, error)
	// [DEPRECATED] CMSys全量同步 - 请使用 execute_external_sync_full_sync
	ExecuteCmsysSyncFullSync(ctx context.Context, in *ExecuteCMSysSyncFullSyncReq, opts ...grpc.CallOption) (*ExecuteCMSysSyncResp, error)
}

type cmpoolClient struct {
	cc grpc.ClientConnInterface
}

func NewCmpoolClient(cc grpc.ClientConnInterface) CmpoolClient {
	return &cmpoolClient{cc}
}

func (c *cmpoolClient) CmdbExtractByHosts(ctx context.Context, in *ExtractByHostsReq, opts ...grpc.CallOption) (*ExtractByHostsResp, error) {
	out := new(ExtractByHostsResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/cmdb_extract_by_hosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CmdbExtractAll(ctx context.Context, in *ExtractAllReq, opts ...grpc.CallOption) (*ExtractAllResp, error) {
	out := new(ExtractAllResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/cmdb_extract_all", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CmdbExtractHostsByOwner(ctx context.Context, in *ExtractByOwnerReq, opts ...grpc.CallOption) (*ExtractByOwnerResp, error) {
	out := new(ExtractByOwnerResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/cmdb_extract_hosts_by_owner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CmdbInjectAll(ctx context.Context, in *InjectAllReq, opts ...grpc.CallOption) (*InjectAllResp, error) {
	out := new(InjectAllResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/cmdb_inject_all", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CmdbInjectByHosts(ctx context.Context, in *InjectHostsReq, opts ...grpc.CallOption) (*InjectHostsResp, error) {
	out := new(InjectHostsResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/cmdb_inject_by_hosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CmdbSyncHosts(ctx context.Context, in *SyncHostsReq, opts ...grpc.CallOption) (*SyncHostsResp, error) {
	out := new(SyncHostsResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/cmdb_sync_hosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CmdbModifyHosts(ctx context.Context, in *ModifyHostsReq, opts ...grpc.CallOption) (*ModifyHostsResp, error) {
	out := new(ModifyHostsResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/cmdb_modify_hosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CmdbSoftDelHosts(ctx context.Context, in *SoftDelHostsReq, opts ...grpc.CallOption) (*SoftDelHostsResp, error) {
	out := new(SoftDelHostsResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/cmdb_soft_del_hosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CmdbHardDelHosts(ctx context.Context, in *HardDelHostsReq, opts ...grpc.CallOption) (*HardDelHostsResp, error) {
	out := new(HardDelHostsResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/cmdb_hard_del_hosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CmdbGetHostsDetail(ctx context.Context, in *GetHostsDetailReq, opts ...grpc.CallOption) (*GetHostsDetailResp, error) {
	out := new(GetHostsDetailResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/cmdb_get_hosts_detail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CollectApplications(ctx context.Context, in *CollAppsReq, opts ...grpc.CallOption) (*CollAppsResp, error) {
	out := new(CollAppsResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/collect_applications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetHostsPool(ctx context.Context, in *GetHostsPoolReq, opts ...grpc.CallOption) (*GetHostsDetailResp, error) {
	out := new(GetHostsDetailResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_hosts_pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetHostsPoolDetail(ctx context.Context, in *GetHostsPoolDetailReq, opts ...grpc.CallOption) (*GetHostsPoolDetailResp, error) {
	out := new(GetHostsPoolDetailResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_hosts_pool_detail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) AddHostsApplication(ctx context.Context, in *AddHostsAppReq, opts ...grpc.CallOption) (*AddHostsAppResp, error) {
	out := new(AddHostsAppResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/add_hosts_application", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) ModifyHostsApplication(ctx context.Context, in *MdfHostsAppReq, opts ...grpc.CallOption) (*MdfHostsAppResp, error) {
	out := new(MdfHostsAppResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/modify_hosts_application", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) DeleteHostsApplication(ctx context.Context, in *DelHostsAppReq, opts ...grpc.CallOption) (*DelHostsAppResp, error) {
	out := new(DelHostsAppResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/delete_hosts_application", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetClusterGroups(ctx context.Context, in *ClusterGroupsReq, opts ...grpc.CallOption) (*ClusterGroupsResp, error) {
	out := new(ClusterGroupsResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_cluster_groups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetServerResource(ctx context.Context, in *ServerResourceReq, opts ...grpc.CallOption) (*ServerResourceResp, error) {
	out := new(ServerResourceResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_server_resource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetServerResourceMax(ctx context.Context, in *ServerResourceMaxReq, opts ...grpc.CallOption) (*ServerResourceMaxResp, error) {
	out := new(ServerResourceMaxResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_server_resource_max", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetClusterResources(ctx context.Context, in *ClusterResourceReq, opts ...grpc.CallOption) (*ClusterResourceResp, error) {
	out := new(ClusterResourceResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_cluster_resources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetClusterResourcesMax(ctx context.Context, in *ClusterResourceReq, opts ...grpc.CallOption) (*ClusterResourceMaxResp, error) {
	out := new(ClusterResourceMaxResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_cluster_resources_max", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetDiskPrediction(ctx context.Context, in *DiskPredictionReq, opts ...grpc.CallOption) (*DiskPredictionResp, error) {
	out := new(DiskPredictionResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_disk_prediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetBackupRestoreCheckInfo(ctx context.Context, in *BackupRestoreCheckInfoReq, opts ...grpc.CallOption) (*BackupRestoreCheckInfoResp, error) {
	out := new(BackupRestoreCheckInfoResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_backup_restore_check_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetClusterConfirmSummary(ctx context.Context, in *ClusterConfirmSummaryReq, opts ...grpc.CallOption) (*ClusterConfirmSummaryResp, error) {
	out := new(ClusterConfirmSummaryResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_cluster_confirm_summary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) SyncClusterGroups(ctx context.Context, in *SyncClusterGroupsReq, opts ...grpc.CallOption) (*SyncClusterGroupsResp, error) {
	out := new(SyncClusterGroupsResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/sync_cluster_groups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) SyncHostsFromClusters(ctx context.Context, in *SyncClusterGroupsReq, opts ...grpc.CallOption) (*SyncClusterGroupsResp, error) {
	out := new(SyncClusterGroupsResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/sync_hosts_from_clusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) LoadServerMetricsFromCsv(ctx context.Context, in *LoadServerMetricsCSVReq, opts ...grpc.CallOption) (Cmpool_LoadServerMetricsFromCsvClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cmpool_ServiceDesc.Streams[0], "/cmpool.cmpool/load_server_metrics_from_csv", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmpoolLoadServerMetricsFromCsvClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cmpool_LoadServerMetricsFromCsvClient interface {
	Recv() (*LoadServerMetricsCSVProgressResp, error)
	grpc.ClientStream
}

type cmpoolLoadServerMetricsFromCsvClient struct {
	grpc.ClientStream
}

func (x *cmpoolLoadServerMetricsFromCsvClient) Recv() (*LoadServerMetricsCSVProgressResp, error) {
	m := new(LoadServerMetricsCSVProgressResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmpoolClient) VerifyMonitoringData(ctx context.Context, in *VerifyMonitoringDataReq, opts ...grpc.CallOption) (*VerifyMonitoringDataResp, error) {
	out := new(VerifyMonitoringDataResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/verify_monitoring_data", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) HardwareResourceVerification(ctx context.Context, in *HardwareResourceVerificationReq, opts ...grpc.CallOption) (*HardwareResourceVerificationResp, error) {
	out := new(HardwareResourceVerificationResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/hardware_resource_verification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetHardwareResourceVerificationStatus(ctx context.Context, in *GetHardwareResourceVerificationStatusReq, opts ...grpc.CallOption) (*GetHardwareResourceVerificationStatusResp, error) {
	out := new(GetHardwareResourceVerificationStatusResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_hardware_resource_verification_status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetHardwareResourceVerificationHistory(ctx context.Context, in *GetHardwareResourceVerificationHistoryReq, opts ...grpc.CallOption) (*GetHardwareResourceVerificationHistoryResp, error) {
	out := new(GetHardwareResourceVerificationHistoryResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_hardware_resource_verification_history", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CreateScheduledTask(ctx context.Context, in *CreateScheduledTaskReq, opts ...grpc.CallOption) (*CreateScheduledTaskResp, error) {
	out := new(CreateScheduledTaskResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/create_scheduled_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) UpdateScheduledTask(ctx context.Context, in *UpdateScheduledTaskReq, opts ...grpc.CallOption) (*UpdateScheduledTaskResp, error) {
	out := new(UpdateScheduledTaskResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/update_scheduled_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) DeleteScheduledTask(ctx context.Context, in *DeleteScheduledTaskReq, opts ...grpc.CallOption) (*DeleteScheduledTaskResp, error) {
	out := new(DeleteScheduledTaskResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/delete_scheduled_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetScheduledTasks(ctx context.Context, in *GetScheduledTasksReq, opts ...grpc.CallOption) (*GetScheduledTasksResp, error) {
	out := new(GetScheduledTasksResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_scheduled_tasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetScheduledTaskDetail(ctx context.Context, in *GetScheduledTaskDetailReq, opts ...grpc.CallOption) (*GetScheduledTaskDetailResp, error) {
	out := new(GetScheduledTaskDetailResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_scheduled_task_detail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) EnableScheduledTask(ctx context.Context, in *EnableScheduledTaskReq, opts ...grpc.CallOption) (*EnableScheduledTaskResp, error) {
	out := new(EnableScheduledTaskResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/enable_scheduled_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetScheduledTaskExecutionHistory(ctx context.Context, in *GetScheduledTaskExecutionHistoryReq, opts ...grpc.CallOption) (*GetScheduledTaskExecutionHistoryResp, error) {
	out := new(GetScheduledTaskExecutionHistoryResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_scheduled_task_execution_history", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetScheduledTaskExecutionDetails(ctx context.Context, in *GetScheduledTaskExecutionDetailsReq, opts ...grpc.CallOption) (*GetScheduledTaskExecutionDetailsResp, error) {
	out := new(GetScheduledTaskExecutionDetailsResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_scheduled_task_execution_details", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) UserLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/user_login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error) {
	out := new(ValidateTokenResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/validate_token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) UserLogout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/user_logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	out := new(CreateUserResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/create_user", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) FetchHostsHardwareInfo(ctx context.Context, in *FetchHostsHardwareInfoReq, opts ...grpc.CallOption) (*FetchHostsHardwareInfoResp, error) {
	out := new(FetchHostsHardwareInfoResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/fetch_hosts_hardware_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) SyncExternalCmdb(ctx context.Context, in *SyncExternalCmdbReq, opts ...grpc.CallOption) (*SyncExternalCmdbResp, error) {
	out := new(SyncExternalCmdbResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/sync_external_cmdb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) ManualAddHost(ctx context.Context, in *ManualAddHostReq, opts ...grpc.CallOption) (*ManualAddHostResp, error) {
	out := new(ManualAddHostResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/manual_add_host", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) AutoFetchHostInfo(ctx context.Context, in *AutoFetchHostInfoReq, opts ...grpc.CallOption) (*AutoFetchHostInfoResp, error) {
	out := new(AutoFetchHostInfoResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/auto_fetch_host_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetIdcConfList(ctx context.Context, in *GetIdcConfListReq, opts ...grpc.CallOption) (*GetIdcConfListResp, error) {
	out := new(GetIdcConfListResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_idc_conf_list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CreateIdcConf(ctx context.Context, in *CreateIdcConfReq, opts ...grpc.CallOption) (*CreateIdcConfResp, error) {
	out := new(CreateIdcConfResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/create_idc_conf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) UpdateIdcConf(ctx context.Context, in *UpdateIdcConfReq, opts ...grpc.CallOption) (*UpdateIdcConfResp, error) {
	out := new(UpdateIdcConfResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/update_idc_conf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) DeleteIdcConf(ctx context.Context, in *DeleteIdcConfReq, opts ...grpc.CallOption) (*DeleteIdcConfResp, error) {
	out := new(DeleteIdcConfResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/delete_idc_conf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) MatchIdcByIp(ctx context.Context, in *MatchIdcByIpReq, opts ...grpc.CallOption) (*MatchIdcByIpResp, error) {
	out := new(MatchIdcByIpResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/match_idc_by_ip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) UpdateHostsIdc(ctx context.Context, in *UpdateHostsIdcReq, opts ...grpc.CallOption) (*UpdateHostsIdcResp, error) {
	out := new(UpdateHostsIdcResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/update_hosts_idc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CreateExternalSyncTask(ctx context.Context, in *CreateExternalSyncTaskReq, opts ...grpc.CallOption) (*CreateExternalSyncTaskResp, error) {
	out := new(CreateExternalSyncTaskResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/create_external_sync_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) UpdateExternalSyncTask(ctx context.Context, in *UpdateExternalSyncTaskReq, opts ...grpc.CallOption) (*UpdateExternalSyncTaskResp, error) {
	out := new(UpdateExternalSyncTaskResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/update_external_sync_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) DeleteExternalSyncTask(ctx context.Context, in *DeleteExternalSyncTaskReq, opts ...grpc.CallOption) (*DeleteExternalSyncTaskResp, error) {
	out := new(DeleteExternalSyncTaskResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/delete_external_sync_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetExternalSyncTasks(ctx context.Context, in *GetExternalSyncTasksReq, opts ...grpc.CallOption) (*GetExternalSyncTasksResp, error) {
	out := new(GetExternalSyncTasksResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_external_sync_tasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetExternalSyncTaskDetail(ctx context.Context, in *GetExternalSyncTaskDetailReq, opts ...grpc.CallOption) (*GetExternalSyncTaskDetailResp, error) {
	out := new(GetExternalSyncTaskDetailResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_external_sync_task_detail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) EnableExternalSyncTask(ctx context.Context, in *EnableExternalSyncTaskReq, opts ...grpc.CallOption) (*EnableExternalSyncTaskResp, error) {
	out := new(EnableExternalSyncTaskResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/enable_external_sync_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) ExecuteExternalSyncByHostList(ctx context.Context, in *ExecuteExternalSyncByHostListReq, opts ...grpc.CallOption) (*ExecuteExternalSyncResp, error) {
	out := new(ExecuteExternalSyncResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/execute_external_sync_by_host_list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) ExecuteExternalSyncByFile(ctx context.Context, in *ExecuteExternalSyncByFileReq, opts ...grpc.CallOption) (*ExecuteExternalSyncResp, error) {
	out := new(ExecuteExternalSyncResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/execute_external_sync_by_file", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) ExecuteExternalSyncFullSync(ctx context.Context, in *ExecuteExternalSyncFullSyncReq, opts ...grpc.CallOption) (*ExecuteExternalSyncResp, error) {
	out := new(ExecuteExternalSyncResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/execute_external_sync_full_sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetExternalSyncExecutionLogs(ctx context.Context, in *GetExternalSyncExecutionLogsReq, opts ...grpc.CallOption) (*GetExternalSyncExecutionLogsResp, error) {
	out := new(GetExternalSyncExecutionLogsResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_external_sync_execution_logs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetExternalSyncExecutionDetail(ctx context.Context, in *GetExternalSyncExecutionDetailReq, opts ...grpc.CallOption) (*GetExternalSyncExecutionDetailResp, error) {
	out := new(GetExternalSyncExecutionDetailResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_external_sync_execution_detail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) CreateEsSyncTask(ctx context.Context, in *CreateESSyncTaskReq, opts ...grpc.CallOption) (*CreateESSyncTaskResp, error) {
	out := new(CreateESSyncTaskResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/create_es_sync_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) UpdateEsSyncTask(ctx context.Context, in *UpdateESSyncTaskReq, opts ...grpc.CallOption) (*UpdateESSyncTaskResp, error) {
	out := new(UpdateESSyncTaskResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/update_es_sync_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) DeleteEsSyncTask(ctx context.Context, in *DeleteESSyncTaskReq, opts ...grpc.CallOption) (*DeleteESSyncTaskResp, error) {
	out := new(DeleteESSyncTaskResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/delete_es_sync_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetEsSyncTasks(ctx context.Context, in *GetESSyncTasksReq, opts ...grpc.CallOption) (*GetESSyncTasksResp, error) {
	out := new(GetESSyncTasksResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_es_sync_tasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) GetEsSyncTaskDetail(ctx context.Context, in *GetESSyncTaskDetailReq, opts ...grpc.CallOption) (*GetESSyncTaskDetailResp, error) {
	out := new(GetESSyncTaskDetailResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/get_es_sync_task_detail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) EnableEsSyncTask(ctx context.Context, in *EnableESSyncTaskReq, opts ...grpc.CallOption) (*EnableESSyncTaskResp, error) {
	out := new(EnableESSyncTaskResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/enable_es_sync_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) ExecuteEsSyncByHostList(ctx context.Context, in *ExecuteESSyncByHostListReq, opts ...grpc.CallOption) (*ExecuteESSyncResp, error) {
	out := new(ExecuteESSyncResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/execute_es_sync_by_host_list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) ExecuteEsSyncByFile(ctx context.Context, in *ExecuteESSyncByFileReq, opts ...grpc.CallOption) (*ExecuteESSyncResp, error) {
	out := new(ExecuteESSyncResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/execute_es_sync_by_file", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) ExecuteEsSyncFullSync(ctx context.Context, in *ExecuteESSyncFullSyncReq, opts ...grpc.CallOption) (*ExecuteESSyncFullSyncResp, error) {
	out := new(ExecuteESSyncFullSyncResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/execute_es_sync_full_sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) ExecuteCmsysSync(ctx context.Context, in *ExecuteCMSysSyncReq, opts ...grpc.CallOption) (*ExecuteCMSysSyncResp, error) {
	out := new(ExecuteCMSysSyncResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/execute_cmsys_sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) ExecuteCmsysSyncByFile(ctx context.Context, in *ExecuteCMSysSyncByFileReq, opts ...grpc.CallOption) (*ExecuteCMSysSyncResp, error) {
	out := new(ExecuteCMSysSyncResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/execute_cmsys_sync_by_file", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpoolClient) ExecuteCmsysSyncFullSync(ctx context.Context, in *ExecuteCMSysSyncFullSyncReq, opts ...grpc.CallOption) (*ExecuteCMSysSyncResp, error) {
	out := new(ExecuteCMSysSyncResp)
	err := c.cc.Invoke(ctx, "/cmpool.cmpool/execute_cmsys_sync_full_sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmpoolServer is the server API for Cmpool service.
// All implementations must embed UnimplementedCmpoolServer
// for forward compatibility
type CmpoolServer interface {
	// 从CMDB抽取主机数据
	// 根据传递的ip列表，从 cmdb 中抽取数据库资源池中数据库服务器的数据并持久化
	CmdbExtractByHosts(context.Context, *ExtractByHostsReq) (*ExtractByHostsResp, error)
	// <必要数据搜集>，全量抽取CMDB中数据库服务器的数据并刷新到数据库资源池
	CmdbExtractAll(context.Context, *ExtractAllReq) (*ExtractAllResp, error)
	// 数据搜集，按照cmdb中的ownerGroup抽取所有属于具体组的服务器并写入hosts_pool
	CmdbExtractHostsByOwner(context.Context, *ExtractByOwnerReq) (*ExtractByOwnerResp, error)
	// 向CMDB回写数据
	// 向 cmdb 中注入维护后的数据库资源池中对象的数据
	CmdbInjectAll(context.Context, *InjectAllReq) (*InjectAllResp, error)
	// 向 cmdb 中注入维护后的数据库资源池中对象的数据
	CmdbInjectByHosts(context.Context, *InjectHostsReq) (*InjectHostsResp, error)
	// 数据库主机池数据维护
	// <必要数据搜集>，同步(MySQL、TiDB、GoldenDB)数据库主机到主机资源池表
	CmdbSyncHosts(context.Context, *SyncHostsReq) (*SyncHostsResp, error)
	// 手动修改资源池主机信息，如果主机信息最终 isStatic 不为 True，那么这里的修改会被后续的任务以真实数据刷掉
	CmdbModifyHosts(context.Context, *ModifyHostsReq) (*ModifyHostsResp, error)
	// 软删除资源池主机
	CmdbSoftDelHosts(context.Context, *SoftDelHostsReq) (*SoftDelHostsResp, error)
	// 硬删除资源池主机
	CmdbHardDelHosts(context.Context, *HardDelHostsReq) (*HardDelHostsResp, error)
	// 获取资源池主机信息，包括cmdb信息，应用部署信息等所有相关数据（这里是根据hosts_pool实时检索，数据并不来自于hosts_application表）
	CmdbGetHostsDetail(context.Context, *GetHostsDetailReq) (*GetHostsDetailResp, error)
	// 内部数据加工和检索
	// <必要数据搜集>，搜集主机的应用信息并记录，所有应用服务部署时，都应当将应用信息写入到该表，目前为手动/自动触发接口搜集
	CollectApplications(context.Context, *CollAppsReq) (*CollAppsResp, error)
	// 查询主机信息，主页面数据展示，返回的数据实际上和detail接口一致，这里没有做区别实现，如果有需要可以添加
	GetHostsPool(context.Context, *GetHostsPoolReq) (*GetHostsDetailResp, error)
	// 查询主机硬件信息详情，主机子页面显示
	//rpc get_hosts_hardware(GetHostHardwareReq) returns (GetHostHardwareResp);
	// 查询主机应用信息详情，主机子页面显示
	//rpc get_hosts_applications(GetHostsAppReq) returns (GetHostsAppResp);
	// 查询主机资源池详情，包括主机的硬件信息、软件信息，接口涉及数据量较大，一般不用于页面显示，用于向外部提供全量数据或数据导出需求
	GetHostsPoolDetail(context.Context, *GetHostsPoolDetailReq) (*GetHostsPoolDetailResp, error)
	// 手动添加资源池主机应用信息
	AddHostsApplication(context.Context, *AddHostsAppReq) (*AddHostsAppResp, error)
	// 手动修改资源池主机应用信息
	ModifyHostsApplication(context.Context, *MdfHostsAppReq) (*MdfHostsAppResp, error)
	// 删除资源池主机应用信息
	DeleteHostsApplication(context.Context, *DelHostsAppReq) (*DelHostsAppResp, error)
	// 查询所有集群组及对应业务线
	GetClusterGroups(context.Context, *ClusterGroupsReq) (*ClusterGroupsResp, error)
	// 查询主机资源使用率数据
	GetServerResource(context.Context, *ServerResourceReq) (*ServerResourceResp, error)
	// 查询主机资源最大利用率数据
	GetServerResourceMax(context.Context, *ServerResourceMaxReq) (*ServerResourceMaxResp, error)
	// 查询主机资源最大利用率数据（支持集群数组）
	// 获取集群资源详细信息
	GetClusterResources(context.Context, *ClusterResourceReq) (*ClusterResourceResp, error)
	// 获取集群资源最大利用率信息
	GetClusterResourcesMax(context.Context, *ClusterResourceReq) (*ClusterResourceMaxResp, error)
	// 获取磁盘预测数据
	GetDiskPrediction(context.Context, *DiskPredictionReq) (*DiskPredictionResp, error)
	// 获取备份恢复检查信息
	GetBackupRestoreCheckInfo(context.Context, *BackupRestoreCheckInfoReq) (*BackupRestoreCheckInfoResp, error)
	// 获取集群确认摘要
	GetClusterConfirmSummary(context.Context, *ClusterConfirmSummaryReq) (*ClusterConfirmSummaryResp, error)
	// 同步集群组数据
	SyncClusterGroups(context.Context, *SyncClusterGroupsReq) (*SyncClusterGroupsResp, error)
	// 从集群实例表同步主机到hosts_pool和hosts_applications表
	SyncHostsFromClusters(context.Context, *SyncClusterGroupsReq) (*SyncClusterGroupsResp, error)
	LoadServerMetricsFromCsv(*LoadServerMetricsCSVReq, Cmpool_LoadServerMetricsFromCsvServer) error
	// 监控数据核对
	VerifyMonitoringData(context.Context, *VerifyMonitoringDataReq) (*VerifyMonitoringDataResp, error)
	// 硬件资源验证
	HardwareResourceVerification(context.Context, *HardwareResourceVerificationReq) (*HardwareResourceVerificationResp, error)
	// 获取硬件资源验证状态
	GetHardwareResourceVerificationStatus(context.Context, *GetHardwareResourceVerificationStatusReq) (*GetHardwareResourceVerificationStatusResp, error)
	// 获取硬件资源验证历史记录
	GetHardwareResourceVerificationHistory(context.Context, *GetHardwareResourceVerificationHistoryReq) (*GetHardwareResourceVerificationHistoryResp, error)
	// 定时任务相关方法
	// 创建定时任务
	CreateScheduledTask(context.Context, *CreateScheduledTaskReq) (*CreateScheduledTaskResp, error)
	// 更新定时任务
	UpdateScheduledTask(context.Context, *UpdateScheduledTaskReq) (*UpdateScheduledTaskResp, error)
	// 删除定时任务
	DeleteScheduledTask(context.Context, *DeleteScheduledTaskReq) (*DeleteScheduledTaskResp, error)
	// 获取定时任务列表
	GetScheduledTasks(context.Context, *GetScheduledTasksReq) (*GetScheduledTasksResp, error)
	// 获取定时任务详情
	GetScheduledTaskDetail(context.Context, *GetScheduledTaskDetailReq) (*GetScheduledTaskDetailResp, error)
	// 启用/禁用定时任务
	EnableScheduledTask(context.Context, *EnableScheduledTaskReq) (*EnableScheduledTaskResp, error)
	// 获取定时任务执行历史
	GetScheduledTaskExecutionHistory(context.Context, *GetScheduledTaskExecutionHistoryReq) (*GetScheduledTaskExecutionHistoryResp, error)
	// 获取定时任务执行详情
	GetScheduledTaskExecutionDetails(context.Context, *GetScheduledTaskExecutionDetailsReq) (*GetScheduledTaskExecutionDetailsResp, error)
	// 用户认证相关方法
	// 用户登录
	UserLogin(context.Context, *LoginReq) (*LoginResp, error)
	// 验证Token
	ValidateToken(context.Context, *ValidateTokenReq) (*ValidateTokenResp, error)
	// 用户登出
	UserLogout(context.Context, *LogoutReq) (*LogoutResp, error)
	// 创建用户（CAS用户自动创建）
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error)
	// 从外部CMDB获取主机硬件信息并更新hosts_pool表
	FetchHostsHardwareInfo(context.Context, *FetchHostsHardwareInfoReq) (*FetchHostsHardwareInfoResp, error)
	// 从外部CMDB同步完整主机信息到hosts_pool表
	SyncExternalCmdb(context.Context, *SyncExternalCmdbReq) (*SyncExternalCmdbResp, error)
	// 手动添加主机到hosts_pool表并同步相关信息
	ManualAddHost(context.Context, *ManualAddHostReq) (*ManualAddHostResp, error)
	// 自动获取主机信息用于填充表单
	AutoFetchHostInfo(context.Context, *AutoFetchHostInfoReq) (*AutoFetchHostInfoResp, error)
	// IDC机房配置管理相关方法
	// 获取IDC机房配置列表
	GetIdcConfList(context.Context, *GetIdcConfListReq) (*GetIdcConfListResp, error)
	// 创建IDC机房配置
	CreateIdcConf(context.Context, *CreateIdcConfReq) (*CreateIdcConfResp, error)
	// 更新IDC机房配置
	UpdateIdcConf(context.Context, *UpdateIdcConfReq) (*UpdateIdcConfResp, error)
	// 删除IDC机房配置
	DeleteIdcConf(context.Context, *DeleteIdcConfReq) (*DeleteIdcConfResp, error)
	// 根据IP匹配IDC机房
	MatchIdcByIp(context.Context, *MatchIdcByIpReq) (*MatchIdcByIpResp, error)
	// 批量更新主机IDC信息
	UpdateHostsIdc(context.Context, *UpdateHostsIdcReq) (*UpdateHostsIdcResp, error)
	// ========== 统一的外部资源同步接口（推荐使用） ==========
	// 1. 任务配置管理接口
	// 创建外部同步任务配置（支持ES和CMSys）
	CreateExternalSyncTask(context.Context, *CreateExternalSyncTaskReq) (*CreateExternalSyncTaskResp, error)
	// 更新外部同步任务配置
	UpdateExternalSyncTask(context.Context, *UpdateExternalSyncTaskReq) (*UpdateExternalSyncTaskResp, error)
	// 删除外部同步任务配置
	DeleteExternalSyncTask(context.Context, *DeleteExternalSyncTaskReq) (*DeleteExternalSyncTaskResp, error)
	// 获取外部同步任务配置列表
	GetExternalSyncTasks(context.Context, *GetExternalSyncTasksReq) (*GetExternalSyncTasksResp, error)
	// 获取外部同步任务配置详情
	GetExternalSyncTaskDetail(context.Context, *GetExternalSyncTaskDetailReq) (*GetExternalSyncTaskDetailResp, error)
	// 启用/禁用外部同步任务
	EnableExternalSyncTask(context.Context, *EnableExternalSyncTaskReq) (*EnableExternalSyncTaskResp, error)
	// 2. 同步执行接口
	// 根据主机列表立即执行外部同步（支持ES和CMSys）
	ExecuteExternalSyncByHostList(context.Context, *ExecuteExternalSyncByHostListReq) (*ExecuteExternalSyncResp, error)
	// 根据文件立即执行外部同步
	ExecuteExternalSyncByFile(context.Context, *ExecuteExternalSyncByFileReq) (*ExecuteExternalSyncResp, error)
	// 外部同步全量同步
	ExecuteExternalSyncFullSync(context.Context, *ExecuteExternalSyncFullSyncReq) (*ExecuteExternalSyncResp, error)
	// 3. 执行记录查询接口（已统一，无需修改）
	// 获取外部数据同步执行记录列表
	GetExternalSyncExecutionLogs(context.Context, *GetExternalSyncExecutionLogsReq) (*GetExternalSyncExecutionLogsResp, error)
	// 获取外部数据同步执行详情
	GetExternalSyncExecutionDetail(context.Context, *GetExternalSyncExecutionDetailReq) (*GetExternalSyncExecutionDetailResp, error)
	// ========== 已废弃的ES专用接口（请使用统一接口 create_external_sync_task 等） ==========
	// ES数据同步任务配置管理相关方法
	// [DEPRECATED] 创建ES数据同步任务配置 - 请使用 create_external_sync_task
	CreateEsSyncTask(context.Context, *CreateESSyncTaskReq) (*CreateESSyncTaskResp, error)
	// [DEPRECATED] 更新ES数据同步任务配置 - 请使用 update_external_sync_task
	UpdateEsSyncTask(context.Context, *UpdateESSyncTaskReq) (*UpdateESSyncTaskResp, error)
	// [DEPRECATED] 删除ES数据同步任务配置 - 请使用 delete_external_sync_task
	DeleteEsSyncTask(context.Context, *DeleteESSyncTaskReq) (*DeleteESSyncTaskResp, error)
	// [DEPRECATED] 获取ES数据同步任务配置列表 - 请使用 get_external_sync_tasks
	GetEsSyncTasks(context.Context, *GetESSyncTasksReq) (*GetESSyncTasksResp, error)
	// [DEPRECATED] 获取ES数据同步任务配置详情 - 请使用 get_external_sync_task_detail
	GetEsSyncTaskDetail(context.Context, *GetESSyncTaskDetailReq) (*GetESSyncTaskDetailResp, error)
	// [DEPRECATED] 启用/禁用ES数据同步任务 - 请使用 enable_external_sync_task
	EnableEsSyncTask(context.Context, *EnableESSyncTaskReq) (*EnableESSyncTaskResp, error)
	// ES数据同步执行相关方法
	// [DEPRECATED] 根据主机列表立即执行ES数据同步 - 请使用 execute_external_sync_by_host_list
	ExecuteEsSyncByHostList(context.Context, *ExecuteESSyncByHostListReq) (*ExecuteESSyncResp, error)
	// [DEPRECATED] 根据文件立即执行ES数据同步 - 请使用 execute_external_sync_by_file
	ExecuteEsSyncByFile(context.Context, *ExecuteESSyncByFileReq) (*ExecuteESSyncResp, error)
	// [DEPRECATED] ES全量同步 - 请使用 execute_external_sync_full_sync
	ExecuteEsSyncFullSync(context.Context, *ExecuteESSyncFullSyncReq) (*ExecuteESSyncFullSyncResp, error)
	// ========== 已废弃的CMSys专用接口（请使用统一接口） ==========
	// CMSys数据同步执行相关方法
	// [DEPRECATED] 从CMSys HTTP接口同步主机数据 - 请使用 execute_external_sync_by_host_list
	ExecuteCmsysSync(context.Context, *ExecuteCMSysSyncReq) (*ExecuteCMSysSyncResp, error)
	// [DEPRECATED] CMSys按文件执行同步 - 请使用 execute_external_sync_by_file
	ExecuteCmsysSyncByFile(context.Context, *ExecuteCMSysSyncByFileReq) (*ExecuteCMSysSyncResp, error)
	// [DEPRECATED] CMSys全量同步 - 请使用 execute_external_sync_full_sync
	ExecuteCmsysSyncFullSync(context.Context, *ExecuteCMSysSyncFullSyncReq) (*ExecuteCMSysSyncResp, error)
	mustEmbedUnimplementedCmpoolServer()
}

// UnimplementedCmpoolServer must be embedded to have forward compatible implementations.
type UnimplementedCmpoolServer struct {
}

func (UnimplementedCmpoolServer) CmdbExtractByHosts(context.Context, *ExtractByHostsReq) (*ExtractByHostsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdbExtractByHosts not implemented")
}
func (UnimplementedCmpoolServer) CmdbExtractAll(context.Context, *ExtractAllReq) (*ExtractAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdbExtractAll not implemented")
}
func (UnimplementedCmpoolServer) CmdbExtractHostsByOwner(context.Context, *ExtractByOwnerReq) (*ExtractByOwnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdbExtractHostsByOwner not implemented")
}
func (UnimplementedCmpoolServer) CmdbInjectAll(context.Context, *InjectAllReq) (*InjectAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdbInjectAll not implemented")
}
func (UnimplementedCmpoolServer) CmdbInjectByHosts(context.Context, *InjectHostsReq) (*InjectHostsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdbInjectByHosts not implemented")
}
func (UnimplementedCmpoolServer) CmdbSyncHosts(context.Context, *SyncHostsReq) (*SyncHostsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdbSyncHosts not implemented")
}
func (UnimplementedCmpoolServer) CmdbModifyHosts(context.Context, *ModifyHostsReq) (*ModifyHostsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdbModifyHosts not implemented")
}
func (UnimplementedCmpoolServer) CmdbSoftDelHosts(context.Context, *SoftDelHostsReq) (*SoftDelHostsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdbSoftDelHosts not implemented")
}
func (UnimplementedCmpoolServer) CmdbHardDelHosts(context.Context, *HardDelHostsReq) (*HardDelHostsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdbHardDelHosts not implemented")
}
func (UnimplementedCmpoolServer) CmdbGetHostsDetail(context.Context, *GetHostsDetailReq) (*GetHostsDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdbGetHostsDetail not implemented")
}
func (UnimplementedCmpoolServer) CollectApplications(context.Context, *CollAppsReq) (*CollAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectApplications not implemented")
}
func (UnimplementedCmpoolServer) GetHostsPool(context.Context, *GetHostsPoolReq) (*GetHostsDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostsPool not implemented")
}
func (UnimplementedCmpoolServer) GetHostsPoolDetail(context.Context, *GetHostsPoolDetailReq) (*GetHostsPoolDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostsPoolDetail not implemented")
}
func (UnimplementedCmpoolServer) AddHostsApplication(context.Context, *AddHostsAppReq) (*AddHostsAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHostsApplication not implemented")
}
func (UnimplementedCmpoolServer) ModifyHostsApplication(context.Context, *MdfHostsAppReq) (*MdfHostsAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyHostsApplication not implemented")
}
func (UnimplementedCmpoolServer) DeleteHostsApplication(context.Context, *DelHostsAppReq) (*DelHostsAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostsApplication not implemented")
}
func (UnimplementedCmpoolServer) GetClusterGroups(context.Context, *ClusterGroupsReq) (*ClusterGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterGroups not implemented")
}
func (UnimplementedCmpoolServer) GetServerResource(context.Context, *ServerResourceReq) (*ServerResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerResource not implemented")
}
func (UnimplementedCmpoolServer) GetServerResourceMax(context.Context, *ServerResourceMaxReq) (*ServerResourceMaxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerResourceMax not implemented")
}
func (UnimplementedCmpoolServer) GetClusterResources(context.Context, *ClusterResourceReq) (*ClusterResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterResources not implemented")
}
func (UnimplementedCmpoolServer) GetClusterResourcesMax(context.Context, *ClusterResourceReq) (*ClusterResourceMaxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterResourcesMax not implemented")
}
func (UnimplementedCmpoolServer) GetDiskPrediction(context.Context, *DiskPredictionReq) (*DiskPredictionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskPrediction not implemented")
}
func (UnimplementedCmpoolServer) GetBackupRestoreCheckInfo(context.Context, *BackupRestoreCheckInfoReq) (*BackupRestoreCheckInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackupRestoreCheckInfo not implemented")
}
func (UnimplementedCmpoolServer) GetClusterConfirmSummary(context.Context, *ClusterConfirmSummaryReq) (*ClusterConfirmSummaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterConfirmSummary not implemented")
}
func (UnimplementedCmpoolServer) SyncClusterGroups(context.Context, *SyncClusterGroupsReq) (*SyncClusterGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncClusterGroups not implemented")
}
func (UnimplementedCmpoolServer) SyncHostsFromClusters(context.Context, *SyncClusterGroupsReq) (*SyncClusterGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncHostsFromClusters not implemented")
}
func (UnimplementedCmpoolServer) LoadServerMetricsFromCsv(*LoadServerMetricsCSVReq, Cmpool_LoadServerMetricsFromCsvServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadServerMetricsFromCsv not implemented")
}
func (UnimplementedCmpoolServer) VerifyMonitoringData(context.Context, *VerifyMonitoringDataReq) (*VerifyMonitoringDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMonitoringData not implemented")
}
func (UnimplementedCmpoolServer) HardwareResourceVerification(context.Context, *HardwareResourceVerificationReq) (*HardwareResourceVerificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HardwareResourceVerification not implemented")
}
func (UnimplementedCmpoolServer) GetHardwareResourceVerificationStatus(context.Context, *GetHardwareResourceVerificationStatusReq) (*GetHardwareResourceVerificationStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHardwareResourceVerificationStatus not implemented")
}
func (UnimplementedCmpoolServer) GetHardwareResourceVerificationHistory(context.Context, *GetHardwareResourceVerificationHistoryReq) (*GetHardwareResourceVerificationHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHardwareResourceVerificationHistory not implemented")
}
func (UnimplementedCmpoolServer) CreateScheduledTask(context.Context, *CreateScheduledTaskReq) (*CreateScheduledTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduledTask not implemented")
}
func (UnimplementedCmpoolServer) UpdateScheduledTask(context.Context, *UpdateScheduledTaskReq) (*UpdateScheduledTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduledTask not implemented")
}
func (UnimplementedCmpoolServer) DeleteScheduledTask(context.Context, *DeleteScheduledTaskReq) (*DeleteScheduledTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScheduledTask not implemented")
}
func (UnimplementedCmpoolServer) GetScheduledTasks(context.Context, *GetScheduledTasksReq) (*GetScheduledTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledTasks not implemented")
}
func (UnimplementedCmpoolServer) GetScheduledTaskDetail(context.Context, *GetScheduledTaskDetailReq) (*GetScheduledTaskDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledTaskDetail not implemented")
}
func (UnimplementedCmpoolServer) EnableScheduledTask(context.Context, *EnableScheduledTaskReq) (*EnableScheduledTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableScheduledTask not implemented")
}
func (UnimplementedCmpoolServer) GetScheduledTaskExecutionHistory(context.Context, *GetScheduledTaskExecutionHistoryReq) (*GetScheduledTaskExecutionHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledTaskExecutionHistory not implemented")
}
func (UnimplementedCmpoolServer) GetScheduledTaskExecutionDetails(context.Context, *GetScheduledTaskExecutionDetailsReq) (*GetScheduledTaskExecutionDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledTaskExecutionDetails not implemented")
}
func (UnimplementedCmpoolServer) UserLogin(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedCmpoolServer) ValidateToken(context.Context, *ValidateTokenReq) (*ValidateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedCmpoolServer) UserLogout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogout not implemented")
}
func (UnimplementedCmpoolServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCmpoolServer) FetchHostsHardwareInfo(context.Context, *FetchHostsHardwareInfoReq) (*FetchHostsHardwareInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchHostsHardwareInfo not implemented")
}
func (UnimplementedCmpoolServer) SyncExternalCmdb(context.Context, *SyncExternalCmdbReq) (*SyncExternalCmdbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncExternalCmdb not implemented")
}
func (UnimplementedCmpoolServer) ManualAddHost(context.Context, *ManualAddHostReq) (*ManualAddHostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualAddHost not implemented")
}
func (UnimplementedCmpoolServer) AutoFetchHostInfo(context.Context, *AutoFetchHostInfoReq) (*AutoFetchHostInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoFetchHostInfo not implemented")
}
func (UnimplementedCmpoolServer) GetIdcConfList(context.Context, *GetIdcConfListReq) (*GetIdcConfListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdcConfList not implemented")
}
func (UnimplementedCmpoolServer) CreateIdcConf(context.Context, *CreateIdcConfReq) (*CreateIdcConfResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdcConf not implemented")
}
func (UnimplementedCmpoolServer) UpdateIdcConf(context.Context, *UpdateIdcConfReq) (*UpdateIdcConfResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdcConf not implemented")
}
func (UnimplementedCmpoolServer) DeleteIdcConf(context.Context, *DeleteIdcConfReq) (*DeleteIdcConfResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdcConf not implemented")
}
func (UnimplementedCmpoolServer) MatchIdcByIp(context.Context, *MatchIdcByIpReq) (*MatchIdcByIpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchIdcByIp not implemented")
}
func (UnimplementedCmpoolServer) UpdateHostsIdc(context.Context, *UpdateHostsIdcReq) (*UpdateHostsIdcResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostsIdc not implemented")
}
func (UnimplementedCmpoolServer) CreateExternalSyncTask(context.Context, *CreateExternalSyncTaskReq) (*CreateExternalSyncTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExternalSyncTask not implemented")
}
func (UnimplementedCmpoolServer) UpdateExternalSyncTask(context.Context, *UpdateExternalSyncTaskReq) (*UpdateExternalSyncTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExternalSyncTask not implemented")
}
func (UnimplementedCmpoolServer) DeleteExternalSyncTask(context.Context, *DeleteExternalSyncTaskReq) (*DeleteExternalSyncTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExternalSyncTask not implemented")
}
func (UnimplementedCmpoolServer) GetExternalSyncTasks(context.Context, *GetExternalSyncTasksReq) (*GetExternalSyncTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalSyncTasks not implemented")
}
func (UnimplementedCmpoolServer) GetExternalSyncTaskDetail(context.Context, *GetExternalSyncTaskDetailReq) (*GetExternalSyncTaskDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalSyncTaskDetail not implemented")
}
func (UnimplementedCmpoolServer) EnableExternalSyncTask(context.Context, *EnableExternalSyncTaskReq) (*EnableExternalSyncTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableExternalSyncTask not implemented")
}
func (UnimplementedCmpoolServer) ExecuteExternalSyncByHostList(context.Context, *ExecuteExternalSyncByHostListReq) (*ExecuteExternalSyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteExternalSyncByHostList not implemented")
}
func (UnimplementedCmpoolServer) ExecuteExternalSyncByFile(context.Context, *ExecuteExternalSyncByFileReq) (*ExecuteExternalSyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteExternalSyncByFile not implemented")
}
func (UnimplementedCmpoolServer) ExecuteExternalSyncFullSync(context.Context, *ExecuteExternalSyncFullSyncReq) (*ExecuteExternalSyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteExternalSyncFullSync not implemented")
}
func (UnimplementedCmpoolServer) GetExternalSyncExecutionLogs(context.Context, *GetExternalSyncExecutionLogsReq) (*GetExternalSyncExecutionLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalSyncExecutionLogs not implemented")
}
func (UnimplementedCmpoolServer) GetExternalSyncExecutionDetail(context.Context, *GetExternalSyncExecutionDetailReq) (*GetExternalSyncExecutionDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalSyncExecutionDetail not implemented")
}
func (UnimplementedCmpoolServer) CreateEsSyncTask(context.Context, *CreateESSyncTaskReq) (*CreateESSyncTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEsSyncTask not implemented")
}
func (UnimplementedCmpoolServer) UpdateEsSyncTask(context.Context, *UpdateESSyncTaskReq) (*UpdateESSyncTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEsSyncTask not implemented")
}
func (UnimplementedCmpoolServer) DeleteEsSyncTask(context.Context, *DeleteESSyncTaskReq) (*DeleteESSyncTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEsSyncTask not implemented")
}
func (UnimplementedCmpoolServer) GetEsSyncTasks(context.Context, *GetESSyncTasksReq) (*GetESSyncTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEsSyncTasks not implemented")
}
func (UnimplementedCmpoolServer) GetEsSyncTaskDetail(context.Context, *GetESSyncTaskDetailReq) (*GetESSyncTaskDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEsSyncTaskDetail not implemented")
}
func (UnimplementedCmpoolServer) EnableEsSyncTask(context.Context, *EnableESSyncTaskReq) (*EnableESSyncTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableEsSyncTask not implemented")
}
func (UnimplementedCmpoolServer) ExecuteEsSyncByHostList(context.Context, *ExecuteESSyncByHostListReq) (*ExecuteESSyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteEsSyncByHostList not implemented")
}
func (UnimplementedCmpoolServer) ExecuteEsSyncByFile(context.Context, *ExecuteESSyncByFileReq) (*ExecuteESSyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteEsSyncByFile not implemented")
}
func (UnimplementedCmpoolServer) ExecuteEsSyncFullSync(context.Context, *ExecuteESSyncFullSyncReq) (*ExecuteESSyncFullSyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteEsSyncFullSync not implemented")
}
func (UnimplementedCmpoolServer) ExecuteCmsysSync(context.Context, *ExecuteCMSysSyncReq) (*ExecuteCMSysSyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCmsysSync not implemented")
}
func (UnimplementedCmpoolServer) ExecuteCmsysSyncByFile(context.Context, *ExecuteCMSysSyncByFileReq) (*ExecuteCMSysSyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCmsysSyncByFile not implemented")
}
func (UnimplementedCmpoolServer) ExecuteCmsysSyncFullSync(context.Context, *ExecuteCMSysSyncFullSyncReq) (*ExecuteCMSysSyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCmsysSyncFullSync not implemented")
}
func (UnimplementedCmpoolServer) mustEmbedUnimplementedCmpoolServer() {}

// UnsafeCmpoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmpoolServer will
// result in compilation errors.
type UnsafeCmpoolServer interface {
	mustEmbedUnimplementedCmpoolServer()
}

func RegisterCmpoolServer(s grpc.ServiceRegistrar, srv CmpoolServer) {
	s.RegisterService(&Cmpool_ServiceDesc, srv)
}

func _Cmpool_CmdbExtractByHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractByHostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CmdbExtractByHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/cmdb_extract_by_hosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CmdbExtractByHosts(ctx, req.(*ExtractByHostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CmdbExtractAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CmdbExtractAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/cmdb_extract_all",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CmdbExtractAll(ctx, req.(*ExtractAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CmdbExtractHostsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractByOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CmdbExtractHostsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/cmdb_extract_hosts_by_owner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CmdbExtractHostsByOwner(ctx, req.(*ExtractByOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CmdbInjectAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CmdbInjectAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/cmdb_inject_all",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CmdbInjectAll(ctx, req.(*InjectAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CmdbInjectByHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectHostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CmdbInjectByHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/cmdb_inject_by_hosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CmdbInjectByHosts(ctx, req.(*InjectHostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CmdbSyncHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncHostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CmdbSyncHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/cmdb_sync_hosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CmdbSyncHosts(ctx, req.(*SyncHostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CmdbModifyHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyHostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CmdbModifyHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/cmdb_modify_hosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CmdbModifyHosts(ctx, req.(*ModifyHostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CmdbSoftDelHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoftDelHostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CmdbSoftDelHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/cmdb_soft_del_hosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CmdbSoftDelHosts(ctx, req.(*SoftDelHostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CmdbHardDelHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardDelHostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CmdbHardDelHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/cmdb_hard_del_hosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CmdbHardDelHosts(ctx, req.(*HardDelHostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CmdbGetHostsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CmdbGetHostsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/cmdb_get_hosts_detail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CmdbGetHostsDetail(ctx, req.(*GetHostsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CollectApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CollectApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/collect_applications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CollectApplications(ctx, req.(*CollAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetHostsPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostsPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetHostsPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_hosts_pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetHostsPool(ctx, req.(*GetHostsPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetHostsPoolDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostsPoolDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetHostsPoolDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_hosts_pool_detail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetHostsPoolDetail(ctx, req.(*GetHostsPoolDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_AddHostsApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHostsAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).AddHostsApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/add_hosts_application",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).AddHostsApplication(ctx, req.(*AddHostsAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_ModifyHostsApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MdfHostsAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).ModifyHostsApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/modify_hosts_application",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).ModifyHostsApplication(ctx, req.(*MdfHostsAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_DeleteHostsApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelHostsAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).DeleteHostsApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/delete_hosts_application",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).DeleteHostsApplication(ctx, req.(*DelHostsAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetClusterGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetClusterGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_cluster_groups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetClusterGroups(ctx, req.(*ClusterGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetServerResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetServerResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_server_resource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetServerResource(ctx, req.(*ServerResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetServerResourceMax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerResourceMaxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetServerResourceMax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_server_resource_max",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetServerResourceMax(ctx, req.(*ServerResourceMaxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetClusterResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetClusterResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_cluster_resources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetClusterResources(ctx, req.(*ClusterResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetClusterResourcesMax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetClusterResourcesMax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_cluster_resources_max",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetClusterResourcesMax(ctx, req.(*ClusterResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetDiskPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskPredictionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetDiskPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_disk_prediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetDiskPrediction(ctx, req.(*DiskPredictionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetBackupRestoreCheckInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRestoreCheckInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetBackupRestoreCheckInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_backup_restore_check_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetBackupRestoreCheckInfo(ctx, req.(*BackupRestoreCheckInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetClusterConfirmSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterConfirmSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetClusterConfirmSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_cluster_confirm_summary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetClusterConfirmSummary(ctx, req.(*ClusterConfirmSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_SyncClusterGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncClusterGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).SyncClusterGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/sync_cluster_groups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).SyncClusterGroups(ctx, req.(*SyncClusterGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_SyncHostsFromClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncClusterGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).SyncHostsFromClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/sync_hosts_from_clusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).SyncHostsFromClusters(ctx, req.(*SyncClusterGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_LoadServerMetricsFromCsv_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoadServerMetricsCSVReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmpoolServer).LoadServerMetricsFromCsv(m, &cmpoolLoadServerMetricsFromCsvServer{stream})
}

type Cmpool_LoadServerMetricsFromCsvServer interface {
	Send(*LoadServerMetricsCSVProgressResp) error
	grpc.ServerStream
}

type cmpoolLoadServerMetricsFromCsvServer struct {
	grpc.ServerStream
}

func (x *cmpoolLoadServerMetricsFromCsvServer) Send(m *LoadServerMetricsCSVProgressResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Cmpool_VerifyMonitoringData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMonitoringDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).VerifyMonitoringData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/verify_monitoring_data",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).VerifyMonitoringData(ctx, req.(*VerifyMonitoringDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_HardwareResourceVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareResourceVerificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).HardwareResourceVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/hardware_resource_verification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).HardwareResourceVerification(ctx, req.(*HardwareResourceVerificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetHardwareResourceVerificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHardwareResourceVerificationStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetHardwareResourceVerificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_hardware_resource_verification_status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetHardwareResourceVerificationStatus(ctx, req.(*GetHardwareResourceVerificationStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetHardwareResourceVerificationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHardwareResourceVerificationHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetHardwareResourceVerificationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_hardware_resource_verification_history",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetHardwareResourceVerificationHistory(ctx, req.(*GetHardwareResourceVerificationHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CreateScheduledTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduledTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CreateScheduledTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/create_scheduled_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CreateScheduledTask(ctx, req.(*CreateScheduledTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_UpdateScheduledTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduledTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).UpdateScheduledTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/update_scheduled_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).UpdateScheduledTask(ctx, req.(*UpdateScheduledTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_DeleteScheduledTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScheduledTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).DeleteScheduledTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/delete_scheduled_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).DeleteScheduledTask(ctx, req.(*DeleteScheduledTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetScheduledTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetScheduledTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_scheduled_tasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetScheduledTasks(ctx, req.(*GetScheduledTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetScheduledTaskDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledTaskDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetScheduledTaskDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_scheduled_task_detail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetScheduledTaskDetail(ctx, req.(*GetScheduledTaskDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_EnableScheduledTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableScheduledTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).EnableScheduledTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/enable_scheduled_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).EnableScheduledTask(ctx, req.(*EnableScheduledTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetScheduledTaskExecutionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledTaskExecutionHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetScheduledTaskExecutionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_scheduled_task_execution_history",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetScheduledTaskExecutionHistory(ctx, req.(*GetScheduledTaskExecutionHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetScheduledTaskExecutionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledTaskExecutionDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetScheduledTaskExecutionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_scheduled_task_execution_details",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetScheduledTaskExecutionDetails(ctx, req.(*GetScheduledTaskExecutionDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/user_login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).UserLogin(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/validate_token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).ValidateToken(ctx, req.(*ValidateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_UserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).UserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/user_logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).UserLogout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/create_user",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_FetchHostsHardwareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchHostsHardwareInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).FetchHostsHardwareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/fetch_hosts_hardware_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).FetchHostsHardwareInfo(ctx, req.(*FetchHostsHardwareInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_SyncExternalCmdb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncExternalCmdbReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).SyncExternalCmdb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/sync_external_cmdb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).SyncExternalCmdb(ctx, req.(*SyncExternalCmdbReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_ManualAddHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualAddHostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).ManualAddHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/manual_add_host",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).ManualAddHost(ctx, req.(*ManualAddHostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_AutoFetchHostInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoFetchHostInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).AutoFetchHostInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/auto_fetch_host_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).AutoFetchHostInfo(ctx, req.(*AutoFetchHostInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetIdcConfList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdcConfListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetIdcConfList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_idc_conf_list",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetIdcConfList(ctx, req.(*GetIdcConfListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CreateIdcConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdcConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CreateIdcConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/create_idc_conf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CreateIdcConf(ctx, req.(*CreateIdcConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_UpdateIdcConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdcConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).UpdateIdcConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/update_idc_conf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).UpdateIdcConf(ctx, req.(*UpdateIdcConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_DeleteIdcConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdcConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).DeleteIdcConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/delete_idc_conf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).DeleteIdcConf(ctx, req.(*DeleteIdcConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_MatchIdcByIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchIdcByIpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).MatchIdcByIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/match_idc_by_ip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).MatchIdcByIp(ctx, req.(*MatchIdcByIpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_UpdateHostsIdc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostsIdcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).UpdateHostsIdc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/update_hosts_idc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).UpdateHostsIdc(ctx, req.(*UpdateHostsIdcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CreateExternalSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExternalSyncTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CreateExternalSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/create_external_sync_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CreateExternalSyncTask(ctx, req.(*CreateExternalSyncTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_UpdateExternalSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExternalSyncTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).UpdateExternalSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/update_external_sync_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).UpdateExternalSyncTask(ctx, req.(*UpdateExternalSyncTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_DeleteExternalSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExternalSyncTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).DeleteExternalSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/delete_external_sync_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).DeleteExternalSyncTask(ctx, req.(*DeleteExternalSyncTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetExternalSyncTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalSyncTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetExternalSyncTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_external_sync_tasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetExternalSyncTasks(ctx, req.(*GetExternalSyncTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetExternalSyncTaskDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalSyncTaskDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetExternalSyncTaskDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_external_sync_task_detail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetExternalSyncTaskDetail(ctx, req.(*GetExternalSyncTaskDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_EnableExternalSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableExternalSyncTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).EnableExternalSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/enable_external_sync_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).EnableExternalSyncTask(ctx, req.(*EnableExternalSyncTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_ExecuteExternalSyncByHostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteExternalSyncByHostListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).ExecuteExternalSyncByHostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/execute_external_sync_by_host_list",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).ExecuteExternalSyncByHostList(ctx, req.(*ExecuteExternalSyncByHostListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_ExecuteExternalSyncByFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteExternalSyncByFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).ExecuteExternalSyncByFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/execute_external_sync_by_file",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).ExecuteExternalSyncByFile(ctx, req.(*ExecuteExternalSyncByFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_ExecuteExternalSyncFullSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteExternalSyncFullSyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).ExecuteExternalSyncFullSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/execute_external_sync_full_sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).ExecuteExternalSyncFullSync(ctx, req.(*ExecuteExternalSyncFullSyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetExternalSyncExecutionLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalSyncExecutionLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetExternalSyncExecutionLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_external_sync_execution_logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetExternalSyncExecutionLogs(ctx, req.(*GetExternalSyncExecutionLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetExternalSyncExecutionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalSyncExecutionDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetExternalSyncExecutionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_external_sync_execution_detail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetExternalSyncExecutionDetail(ctx, req.(*GetExternalSyncExecutionDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_CreateEsSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateESSyncTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).CreateEsSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/create_es_sync_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).CreateEsSyncTask(ctx, req.(*CreateESSyncTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_UpdateEsSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateESSyncTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).UpdateEsSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/update_es_sync_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).UpdateEsSyncTask(ctx, req.(*UpdateESSyncTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_DeleteEsSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteESSyncTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).DeleteEsSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/delete_es_sync_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).DeleteEsSyncTask(ctx, req.(*DeleteESSyncTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetEsSyncTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetESSyncTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetEsSyncTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_es_sync_tasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetEsSyncTasks(ctx, req.(*GetESSyncTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_GetEsSyncTaskDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetESSyncTaskDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).GetEsSyncTaskDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/get_es_sync_task_detail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).GetEsSyncTaskDetail(ctx, req.(*GetESSyncTaskDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_EnableEsSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableESSyncTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).EnableEsSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/enable_es_sync_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).EnableEsSyncTask(ctx, req.(*EnableESSyncTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_ExecuteEsSyncByHostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteESSyncByHostListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).ExecuteEsSyncByHostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/execute_es_sync_by_host_list",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).ExecuteEsSyncByHostList(ctx, req.(*ExecuteESSyncByHostListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_ExecuteEsSyncByFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteESSyncByFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).ExecuteEsSyncByFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/execute_es_sync_by_file",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).ExecuteEsSyncByFile(ctx, req.(*ExecuteESSyncByFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_ExecuteEsSyncFullSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteESSyncFullSyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).ExecuteEsSyncFullSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/execute_es_sync_full_sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).ExecuteEsSyncFullSync(ctx, req.(*ExecuteESSyncFullSyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_ExecuteCmsysSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteCMSysSyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).ExecuteCmsysSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/execute_cmsys_sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).ExecuteCmsysSync(ctx, req.(*ExecuteCMSysSyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_ExecuteCmsysSyncByFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteCMSysSyncByFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).ExecuteCmsysSyncByFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/execute_cmsys_sync_by_file",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).ExecuteCmsysSyncByFile(ctx, req.(*ExecuteCMSysSyncByFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmpool_ExecuteCmsysSyncFullSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteCMSysSyncFullSyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmpoolServer).ExecuteCmsysSyncFullSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmpool.cmpool/execute_cmsys_sync_full_sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmpoolServer).ExecuteCmsysSyncFullSync(ctx, req.(*ExecuteCMSysSyncFullSyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Cmpool_ServiceDesc is the grpc.ServiceDesc for Cmpool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cmpool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmpool.cmpool",
	HandlerType: (*CmpoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "cmdb_extract_by_hosts",
			Handler:    _Cmpool_CmdbExtractByHosts_Handler,
		},
		{
			MethodName: "cmdb_extract_all",
			Handler:    _Cmpool_CmdbExtractAll_Handler,
		},
		{
			MethodName: "cmdb_extract_hosts_by_owner",
			Handler:    _Cmpool_CmdbExtractHostsByOwner_Handler,
		},
		{
			MethodName: "cmdb_inject_all",
			Handler:    _Cmpool_CmdbInjectAll_Handler,
		},
		{
			MethodName: "cmdb_inject_by_hosts",
			Handler:    _Cmpool_CmdbInjectByHosts_Handler,
		},
		{
			MethodName: "cmdb_sync_hosts",
			Handler:    _Cmpool_CmdbSyncHosts_Handler,
		},
		{
			MethodName: "cmdb_modify_hosts",
			Handler:    _Cmpool_CmdbModifyHosts_Handler,
		},
		{
			MethodName: "cmdb_soft_del_hosts",
			Handler:    _Cmpool_CmdbSoftDelHosts_Handler,
		},
		{
			MethodName: "cmdb_hard_del_hosts",
			Handler:    _Cmpool_CmdbHardDelHosts_Handler,
		},
		{
			MethodName: "cmdb_get_hosts_detail",
			Handler:    _Cmpool_CmdbGetHostsDetail_Handler,
		},
		{
			MethodName: "collect_applications",
			Handler:    _Cmpool_CollectApplications_Handler,
		},
		{
			MethodName: "get_hosts_pool",
			Handler:    _Cmpool_GetHostsPool_Handler,
		},
		{
			MethodName: "get_hosts_pool_detail",
			Handler:    _Cmpool_GetHostsPoolDetail_Handler,
		},
		{
			MethodName: "add_hosts_application",
			Handler:    _Cmpool_AddHostsApplication_Handler,
		},
		{
			MethodName: "modify_hosts_application",
			Handler:    _Cmpool_ModifyHostsApplication_Handler,
		},
		{
			MethodName: "delete_hosts_application",
			Handler:    _Cmpool_DeleteHostsApplication_Handler,
		},
		{
			MethodName: "get_cluster_groups",
			Handler:    _Cmpool_GetClusterGroups_Handler,
		},
		{
			MethodName: "get_server_resource",
			Handler:    _Cmpool_GetServerResource_Handler,
		},
		{
			MethodName: "get_server_resource_max",
			Handler:    _Cmpool_GetServerResourceMax_Handler,
		},
		{
			MethodName: "get_cluster_resources",
			Handler:    _Cmpool_GetClusterResources_Handler,
		},
		{
			MethodName: "get_cluster_resources_max",
			Handler:    _Cmpool_GetClusterResourcesMax_Handler,
		},
		{
			MethodName: "get_disk_prediction",
			Handler:    _Cmpool_GetDiskPrediction_Handler,
		},
		{
			MethodName: "get_backup_restore_check_info",
			Handler:    _Cmpool_GetBackupRestoreCheckInfo_Handler,
		},
		{
			MethodName: "get_cluster_confirm_summary",
			Handler:    _Cmpool_GetClusterConfirmSummary_Handler,
		},
		{
			MethodName: "sync_cluster_groups",
			Handler:    _Cmpool_SyncClusterGroups_Handler,
		},
		{
			MethodName: "sync_hosts_from_clusters",
			Handler:    _Cmpool_SyncHostsFromClusters_Handler,
		},
		{
			MethodName: "verify_monitoring_data",
			Handler:    _Cmpool_VerifyMonitoringData_Handler,
		},
		{
			MethodName: "hardware_resource_verification",
			Handler:    _Cmpool_HardwareResourceVerification_Handler,
		},
		{
			MethodName: "get_hardware_resource_verification_status",
			Handler:    _Cmpool_GetHardwareResourceVerificationStatus_Handler,
		},
		{
			MethodName: "get_hardware_resource_verification_history",
			Handler:    _Cmpool_GetHardwareResourceVerificationHistory_Handler,
		},
		{
			MethodName: "create_scheduled_task",
			Handler:    _Cmpool_CreateScheduledTask_Handler,
		},
		{
			MethodName: "update_scheduled_task",
			Handler:    _Cmpool_UpdateScheduledTask_Handler,
		},
		{
			MethodName: "delete_scheduled_task",
			Handler:    _Cmpool_DeleteScheduledTask_Handler,
		},
		{
			MethodName: "get_scheduled_tasks",
			Handler:    _Cmpool_GetScheduledTasks_Handler,
		},
		{
			MethodName: "get_scheduled_task_detail",
			Handler:    _Cmpool_GetScheduledTaskDetail_Handler,
		},
		{
			MethodName: "enable_scheduled_task",
			Handler:    _Cmpool_EnableScheduledTask_Handler,
		},
		{
			MethodName: "get_scheduled_task_execution_history",
			Handler:    _Cmpool_GetScheduledTaskExecutionHistory_Handler,
		},
		{
			MethodName: "get_scheduled_task_execution_details",
			Handler:    _Cmpool_GetScheduledTaskExecutionDetails_Handler,
		},
		{
			MethodName: "user_login",
			Handler:    _Cmpool_UserLogin_Handler,
		},
		{
			MethodName: "validate_token",
			Handler:    _Cmpool_ValidateToken_Handler,
		},
		{
			MethodName: "user_logout",
			Handler:    _Cmpool_UserLogout_Handler,
		},
		{
			MethodName: "create_user",
			Handler:    _Cmpool_CreateUser_Handler,
		},
		{
			MethodName: "fetch_hosts_hardware_info",
			Handler:    _Cmpool_FetchHostsHardwareInfo_Handler,
		},
		{
			MethodName: "sync_external_cmdb",
			Handler:    _Cmpool_SyncExternalCmdb_Handler,
		},
		{
			MethodName: "manual_add_host",
			Handler:    _Cmpool_ManualAddHost_Handler,
		},
		{
			MethodName: "auto_fetch_host_info",
			Handler:    _Cmpool_AutoFetchHostInfo_Handler,
		},
		{
			MethodName: "get_idc_conf_list",
			Handler:    _Cmpool_GetIdcConfList_Handler,
		},
		{
			MethodName: "create_idc_conf",
			Handler:    _Cmpool_CreateIdcConf_Handler,
		},
		{
			MethodName: "update_idc_conf",
			Handler:    _Cmpool_UpdateIdcConf_Handler,
		},
		{
			MethodName: "delete_idc_conf",
			Handler:    _Cmpool_DeleteIdcConf_Handler,
		},
		{
			MethodName: "match_idc_by_ip",
			Handler:    _Cmpool_MatchIdcByIp_Handler,
		},
		{
			MethodName: "update_hosts_idc",
			Handler:    _Cmpool_UpdateHostsIdc_Handler,
		},
		{
			MethodName: "create_external_sync_task",
			Handler:    _Cmpool_CreateExternalSyncTask_Handler,
		},
		{
			MethodName: "update_external_sync_task",
			Handler:    _Cmpool_UpdateExternalSyncTask_Handler,
		},
		{
			MethodName: "delete_external_sync_task",
			Handler:    _Cmpool_DeleteExternalSyncTask_Handler,
		},
		{
			MethodName: "get_external_sync_tasks",
			Handler:    _Cmpool_GetExternalSyncTasks_Handler,
		},
		{
			MethodName: "get_external_sync_task_detail",
			Handler:    _Cmpool_GetExternalSyncTaskDetail_Handler,
		},
		{
			MethodName: "enable_external_sync_task",
			Handler:    _Cmpool_EnableExternalSyncTask_Handler,
		},
		{
			MethodName: "execute_external_sync_by_host_list",
			Handler:    _Cmpool_ExecuteExternalSyncByHostList_Handler,
		},
		{
			MethodName: "execute_external_sync_by_file",
			Handler:    _Cmpool_ExecuteExternalSyncByFile_Handler,
		},
		{
			MethodName: "execute_external_sync_full_sync",
			Handler:    _Cmpool_ExecuteExternalSyncFullSync_Handler,
		},
		{
			MethodName: "get_external_sync_execution_logs",
			Handler:    _Cmpool_GetExternalSyncExecutionLogs_Handler,
		},
		{
			MethodName: "get_external_sync_execution_detail",
			Handler:    _Cmpool_GetExternalSyncExecutionDetail_Handler,
		},
		{
			MethodName: "create_es_sync_task",
			Handler:    _Cmpool_CreateEsSyncTask_Handler,
		},
		{
			MethodName: "update_es_sync_task",
			Handler:    _Cmpool_UpdateEsSyncTask_Handler,
		},
		{
			MethodName: "delete_es_sync_task",
			Handler:    _Cmpool_DeleteEsSyncTask_Handler,
		},
		{
			MethodName: "get_es_sync_tasks",
			Handler:    _Cmpool_GetEsSyncTasks_Handler,
		},
		{
			MethodName: "get_es_sync_task_detail",
			Handler:    _Cmpool_GetEsSyncTaskDetail_Handler,
		},
		{
			MethodName: "enable_es_sync_task",
			Handler:    _Cmpool_EnableEsSyncTask_Handler,
		},
		{
			MethodName: "execute_es_sync_by_host_list",
			Handler:    _Cmpool_ExecuteEsSyncByHostList_Handler,
		},
		{
			MethodName: "execute_es_sync_by_file",
			Handler:    _Cmpool_ExecuteEsSyncByFile_Handler,
		},
		{
			MethodName: "execute_es_sync_full_sync",
			Handler:    _Cmpool_ExecuteEsSyncFullSync_Handler,
		},
		{
			MethodName: "execute_cmsys_sync",
			Handler:    _Cmpool_ExecuteCmsysSync_Handler,
		},
		{
			MethodName: "execute_cmsys_sync_by_file",
			Handler:    _Cmpool_ExecuteCmsysSyncByFile_Handler,
		},
		{
			MethodName: "execute_cmsys_sync_full_sync",
			Handler:    _Cmpool_ExecuteCmsysSyncFullSync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "load_server_metrics_from_csv",
			Handler:       _Cmpool_LoadServerMetricsFromCsv_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/cmpool.proto",
}
