// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.3
// source: proto/cmpool.proto

package cmpool

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExtractByHostsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hosts []string `protobuf:"bytes,1,rep,name=Hosts,proto3" json:"Hosts,omitempty"`
}

func (x *ExtractByHostsReq) Reset() {
	*x = ExtractByHostsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractByHostsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractByHostsReq) ProtoMessage() {}

func (x *ExtractByHostsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractByHostsReq.ProtoReflect.Descriptor instead.
func (*ExtractByHostsReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{0}
}

func (x *ExtractByHostsReq) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type ExtractAllReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchSize int32 `protobuf:"varint,1,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
}

func (x *ExtractAllReq) Reset() {
	*x = ExtractAllReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractAllReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractAllReq) ProtoMessage() {}

func (x *ExtractAllReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractAllReq.ProtoReflect.Descriptor instead.
func (*ExtractAllReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{1}
}

func (x *ExtractAllReq) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type InjectAllReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchSize int32 `protobuf:"varint,1,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
}

func (x *InjectAllReq) Reset() {
	*x = InjectAllReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InjectAllReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InjectAllReq) ProtoMessage() {}

func (x *InjectAllReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InjectAllReq.ProtoReflect.Descriptor instead.
func (*InjectAllReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{2}
}

func (x *InjectAllReq) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type InjectAllResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *InjectAllResp) Reset() {
	*x = InjectAllResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InjectAllResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InjectAllResp) ProtoMessage() {}

func (x *InjectAllResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InjectAllResp.ProtoReflect.Descriptor instead.
func (*InjectAllResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{3}
}

func (x *InjectAllResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InjectAllResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ExtractByHostsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	//repeated HostResult result = 2;
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ExtractByHostsResp) Reset() {
	*x = ExtractByHostsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractByHostsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractByHostsResp) ProtoMessage() {}

func (x *ExtractByHostsResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractByHostsResp.ProtoReflect.Descriptor instead.
func (*ExtractByHostsResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{4}
}

func (x *ExtractByHostsResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExtractByHostsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ExtractByHostsSteamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	//repeated HostResult result = 2;
	Message  string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Progress int32  `protobuf:"varint,3,opt,name=Progress,proto3" json:"Progress,omitempty"`
}

func (x *ExtractByHostsSteamResp) Reset() {
	*x = ExtractByHostsSteamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractByHostsSteamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractByHostsSteamResp) ProtoMessage() {}

func (x *ExtractByHostsSteamResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractByHostsSteamResp.ProtoReflect.Descriptor instead.
func (*ExtractByHostsSteamResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{5}
}

func (x *ExtractByHostsSteamResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExtractByHostsSteamResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExtractByHostsSteamResp) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type ExtractAllResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ExtractAllResp) Reset() {
	*x = ExtractAllResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractAllResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractAllResp) ProtoMessage() {}

func (x *ExtractAllResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractAllResp.ProtoReflect.Descriptor instead.
func (*ExtractAllResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{6}
}

func (x *ExtractAllResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExtractAllResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HostResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainNum         string       `protobuf:"bytes,1,opt,name=DomainNum,proto3" json:"DomainNum,omitempty"`
	HostName          string       `protobuf:"bytes,2,opt,name=HostName,proto3" json:"HostName,omitempty"`
	HostIp            string       `protobuf:"bytes,3,opt,name=HostIp,proto3" json:"HostIp,omitempty"`
	HostType          string       `protobuf:"bytes,4,opt,name=HostType,proto3" json:"HostType,omitempty"`
	HostOwner         string       `protobuf:"bytes,5,opt,name=HostOwner,proto3" json:"HostOwner,omitempty"`
	H3CId             string       `protobuf:"bytes,6,opt,name=H3cId,proto3" json:"H3cId,omitempty"`
	H3CStatus         string       `protobuf:"bytes,7,opt,name=H3cStatus,proto3" json:"H3cStatus,omitempty"`
	HostExtInfo       *HostExtInfo `protobuf:"bytes,8,opt,name=HostExtInfo,proto3" json:"HostExtInfo,omitempty"`
	IfH3CSync         string       `protobuf:"bytes,9,opt,name=IfH3cSync,proto3" json:"IfH3cSync,omitempty"`
	H3CImageId        string       `protobuf:"bytes,10,opt,name=H3cImageId,proto3" json:"H3cImageId,omitempty"`
	H3CHmName         string       `protobuf:"bytes,11,opt,name=H3cHmName,proto3" json:"H3cHmName,omitempty"`
	IsDelete          string       `protobuf:"bytes,12,opt,name=IsDelete,proto3" json:"IsDelete,omitempty"`
	DeployAppInfoList []*AppInfo   `protobuf:"bytes,13,rep,name=DeployAppInfoList,proto3" json:"DeployAppInfoList,omitempty"`
	HostLocInfo       *HostLoc     `protobuf:"bytes,14,opt,name=HostLocInfo,proto3" json:"HostLocInfo,omitempty"`
	BusinessNum       string       `protobuf:"bytes,15,opt,name=BusinessNum,proto3" json:"BusinessNum,omitempty"`
}

func (x *HostResult) Reset() {
	*x = HostResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostResult) ProtoMessage() {}

func (x *HostResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostResult.ProtoReflect.Descriptor instead.
func (*HostResult) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{7}
}

func (x *HostResult) GetDomainNum() string {
	if x != nil {
		return x.DomainNum
	}
	return ""
}

func (x *HostResult) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *HostResult) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *HostResult) GetHostType() string {
	if x != nil {
		return x.HostType
	}
	return ""
}

func (x *HostResult) GetHostOwner() string {
	if x != nil {
		return x.HostOwner
	}
	return ""
}

func (x *HostResult) GetH3CId() string {
	if x != nil {
		return x.H3CId
	}
	return ""
}

func (x *HostResult) GetH3CStatus() string {
	if x != nil {
		return x.H3CStatus
	}
	return ""
}

func (x *HostResult) GetHostExtInfo() *HostExtInfo {
	if x != nil {
		return x.HostExtInfo
	}
	return nil
}

func (x *HostResult) GetIfH3CSync() string {
	if x != nil {
		return x.IfH3CSync
	}
	return ""
}

func (x *HostResult) GetH3CImageId() string {
	if x != nil {
		return x.H3CImageId
	}
	return ""
}

func (x *HostResult) GetH3CHmName() string {
	if x != nil {
		return x.H3CHmName
	}
	return ""
}

func (x *HostResult) GetIsDelete() string {
	if x != nil {
		return x.IsDelete
	}
	return ""
}

func (x *HostResult) GetDeployAppInfoList() []*AppInfo {
	if x != nil {
		return x.DeployAppInfoList
	}
	return nil
}

func (x *HostResult) GetHostLocInfo() *HostLoc {
	if x != nil {
		return x.HostLocInfo
	}
	return nil
}

func (x *HostResult) GetBusinessNum() string {
	if x != nil {
		return x.BusinessNum
	}
	return ""
}

type HostExtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disk  int32 `protobuf:"varint,1,opt,name=Disk,proto3" json:"Disk,omitempty"`
	Ram   int32 `protobuf:"varint,2,opt,name=Ram,proto3" json:"Ram,omitempty"`
	Vcpus int32 `protobuf:"varint,3,opt,name=Vcpus,proto3" json:"Vcpus,omitempty"`
}

func (x *HostExtInfo) Reset() {
	*x = HostExtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostExtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostExtInfo) ProtoMessage() {}

func (x *HostExtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostExtInfo.ProtoReflect.Descriptor instead.
func (*HostExtInfo) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{8}
}

func (x *HostExtInfo) GetDisk() int32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *HostExtInfo) GetRam() int32 {
	if x != nil {
		return x.Ram
	}
	return 0
}

func (x *HostExtInfo) GetVcpus() int32 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

type AppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName    string `protobuf:"bytes,1,opt,name=AppName,proto3" json:"AppName,omitempty"`
	DataSource string `protobuf:"bytes,2,opt,name=DataSource,proto3" json:"DataSource,omitempty"`
}

func (x *AppInfo) Reset() {
	*x = AppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInfo) ProtoMessage() {}

func (x *AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInfo.ProtoReflect.Descriptor instead.
func (*AppInfo) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{9}
}

func (x *AppInfo) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *AppInfo) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

type HostLoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeafNumber      string `protobuf:"bytes,1,opt,name=LeafNumber,proto3" json:"LeafNumber,omitempty"`
	RackNumber      string `protobuf:"bytes,2,opt,name=RackNumber,proto3" json:"RackNumber,omitempty"`
	RackHeight      int32  `protobuf:"varint,3,opt,name=RackHeight,proto3" json:"RackHeight,omitempty"`
	RackStartNumber int32  `protobuf:"varint,4,opt,name=RackStartNumber,proto3" json:"RackStartNumber,omitempty"`
	FromFactor      int32  `protobuf:"varint,5,opt,name=FromFactor,proto3" json:"FromFactor,omitempty"`
	SerialNumber    string `protobuf:"bytes,6,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
}

func (x *HostLoc) Reset() {
	*x = HostLoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostLoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostLoc) ProtoMessage() {}

func (x *HostLoc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostLoc.ProtoReflect.Descriptor instead.
func (*HostLoc) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{10}
}

func (x *HostLoc) GetLeafNumber() string {
	if x != nil {
		return x.LeafNumber
	}
	return ""
}

func (x *HostLoc) GetRackNumber() string {
	if x != nil {
		return x.RackNumber
	}
	return ""
}

func (x *HostLoc) GetRackHeight() int32 {
	if x != nil {
		return x.RackHeight
	}
	return 0
}

func (x *HostLoc) GetRackStartNumber() int32 {
	if x != nil {
		return x.RackStartNumber
	}
	return 0
}

func (x *HostLoc) GetFromFactor() int32 {
	if x != nil {
		return x.FromFactor
	}
	return 0
}

func (x *HostLoc) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

//	message InjectHostsReq {
//	 string AppName = 1;  // 应用编码
//	 string UpdateBy = 2; // 业务组编号，DBA 组为 23
//	 repeated string HostIpList = 3;
//	}
type InjectHostsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hosts []string `protobuf:"bytes,1,rep,name=Hosts,proto3" json:"Hosts,omitempty"`
}

func (x *InjectHostsReq) Reset() {
	*x = InjectHostsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InjectHostsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InjectHostsReq) ProtoMessage() {}

func (x *InjectHostsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InjectHostsReq.ProtoReflect.Descriptor instead.
func (*InjectHostsReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{11}
}

func (x *InjectHostsReq) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type InjectHostsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *InjectHostsResp) Reset() {
	*x = InjectHostsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InjectHostsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InjectHostsResp) ProtoMessage() {}

func (x *InjectHostsResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InjectHostsResp.ProtoReflect.Descriptor instead.
func (*InjectHostsResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{12}
}

func (x *InjectHostsResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InjectHostsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CmdbOpTasksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int32 `protobuf:"varint,1,opt,name=Limit,proto3" json:"Limit,omitempty"` // 按时间倒序输出多少个任务，默认3
}

func (x *CmdbOpTasksReq) Reset() {
	*x = CmdbOpTasksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdbOpTasksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdbOpTasksReq) ProtoMessage() {}

func (x *CmdbOpTasksReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdbOpTasksReq.ProtoReflect.Descriptor instead.
func (*CmdbOpTasksReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{13}
}

func (x *CmdbOpTasksReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CmdbOpTasksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool          `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Tasks   []*CmdbOpTask `protobuf:"bytes,3,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *CmdbOpTasksResp) Reset() {
	*x = CmdbOpTasksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdbOpTasksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdbOpTasksResp) ProtoMessage() {}

func (x *CmdbOpTasksResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdbOpTasksResp.ProtoReflect.Descriptor instead.
func (*CmdbOpTasksResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{14}
}

func (x *CmdbOpTasksResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CmdbOpTasksResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CmdbOpTasksResp) GetTasks() []*CmdbOpTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type CmdbOpTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId  int64  `protobuf:"varint,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"` // extract/inject
	Status  bool   `protobuf:"varint,3,opt,name=Status,proto3" json:"Status,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *CmdbOpTask) Reset() {
	*x = CmdbOpTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdbOpTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdbOpTask) ProtoMessage() {}

func (x *CmdbOpTask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdbOpTask.ProtoReflect.Descriptor instead.
func (*CmdbOpTask) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{15}
}

func (x *CmdbOpTask) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *CmdbOpTask) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CmdbOpTask) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CmdbOpTask) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SyncHostsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DBType int32 `protobuf:"varint,1,opt,name=DBType,proto3" json:"DBType,omitempty"` // 0: all, 1: mysql, 2: goldendb, 3: tidb 指定同步哪种数据库类型的主机
}

func (x *SyncHostsReq) Reset() {
	*x = SyncHostsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncHostsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncHostsReq) ProtoMessage() {}

func (x *SyncHostsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncHostsReq.ProtoReflect.Descriptor instead.
func (*SyncHostsReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{16}
}

func (x *SyncHostsReq) GetDBType() int32 {
	if x != nil {
		return x.DBType
	}
	return 0
}

type SyncHostsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *SyncHostsResp) Reset() {
	*x = SyncHostsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncHostsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncHostsResp) ProtoMessage() {}

func (x *SyncHostsResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncHostsResp.ProtoReflect.Descriptor instead.
func (*SyncHostsResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{17}
}

func (x *SyncHostsResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SyncHostsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AddHostsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *AddHostsResp) Reset() {
	*x = AddHostsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHostsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHostsResp) ProtoMessage() {}

func (x *AddHostsResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHostsResp.ProtoReflect.Descriptor instead.
func (*AddHostsResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{18}
}

func (x *AddHostsResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddHostsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hostname        string `protobuf:"bytes,2,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	HostIp          string `protobuf:"bytes,3,opt,name=HostIp,proto3" json:"HostIp,omitempty"`
	HostType        string `protobuf:"bytes,4,opt,name=HostType,proto3" json:"HostType,omitempty"`
	HostOwner       string `protobuf:"bytes,5,opt,name=HostOwner,proto3" json:"HostOwner,omitempty"`
	H3CId           string `protobuf:"bytes,6,opt,name=H3cId,proto3" json:"H3cId,omitempty"`
	H3CStatus       string `protobuf:"bytes,7,opt,name=H3cStatus,proto3" json:"H3cStatus,omitempty"`
	Disk            int32  `protobuf:"varint,8,opt,name=Disk,proto3" json:"Disk,omitempty"`
	Ram             int32  `protobuf:"varint,9,opt,name=Ram,proto3" json:"Ram,omitempty"`
	VCpu            int32  `protobuf:"varint,10,opt,name=VCpu,proto3" json:"VCpu,omitempty"`
	IfH3CSync       string `protobuf:"bytes,11,opt,name=IfH3cSync,proto3" json:"IfH3cSync,omitempty"`
	H3CImgId        string `protobuf:"bytes,12,opt,name=H3cImgId,proto3" json:"H3cImgId,omitempty"`
	H3CHmName       string `protobuf:"bytes,13,opt,name=H3cHmName,proto3" json:"H3cHmName,omitempty"`
	IsDelete        string `protobuf:"bytes,14,opt,name=IsDelete,proto3" json:"IsDelete,omitempty"` // 这是cmdb系统中记录的状态，不是主机资源池中标识是否已删除的标记
	LeafNumber      string `protobuf:"bytes,15,opt,name=LeafNumber,proto3" json:"LeafNumber,omitempty"`
	RackNumber      string `protobuf:"bytes,16,opt,name=RackNumber,proto3" json:"RackNumber,omitempty"`
	RackHeight      int32  `protobuf:"varint,17,opt,name=RackHeight,proto3" json:"RackHeight,omitempty"`
	RackStartNumber int32  `protobuf:"varint,18,opt,name=RackStartNumber,proto3" json:"RackStartNumber,omitempty"`
	FromFactor      int32  `protobuf:"varint,19,opt,name=FromFactor,proto3" json:"FromFactor,omitempty"`
	SerialNumber    string `protobuf:"bytes,20,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
	IsDeleted       bool   `protobuf:"varint,21,opt,name=IsDeleted,proto3" json:"IsDeleted,omitempty"` // 这是主机资源池中标志是否已删除的状态
	IsStatic        bool   `protobuf:"varint,22,opt,name=IsStatic,proto3" json:"IsStatic,omitempty"`
	CreateTime      string `protobuf:"bytes,23,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdateTime      string `protobuf:"bytes,24,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	IdcId           int64  `protobuf:"varint,25,opt,name=IdcId,proto3" json:"IdcId,omitempty"`    // IDC机房ID
	IdcName         string `protobuf:"bytes,26,opt,name=IdcName,proto3" json:"IdcName,omitempty"` // IDC机房名称
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{19}
}

func (x *Host) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Host) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Host) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *Host) GetHostType() string {
	if x != nil {
		return x.HostType
	}
	return ""
}

func (x *Host) GetHostOwner() string {
	if x != nil {
		return x.HostOwner
	}
	return ""
}

func (x *Host) GetH3CId() string {
	if x != nil {
		return x.H3CId
	}
	return ""
}

func (x *Host) GetH3CStatus() string {
	if x != nil {
		return x.H3CStatus
	}
	return ""
}

func (x *Host) GetDisk() int32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *Host) GetRam() int32 {
	if x != nil {
		return x.Ram
	}
	return 0
}

func (x *Host) GetVCpu() int32 {
	if x != nil {
		return x.VCpu
	}
	return 0
}

func (x *Host) GetIfH3CSync() string {
	if x != nil {
		return x.IfH3CSync
	}
	return ""
}

func (x *Host) GetH3CImgId() string {
	if x != nil {
		return x.H3CImgId
	}
	return ""
}

func (x *Host) GetH3CHmName() string {
	if x != nil {
		return x.H3CHmName
	}
	return ""
}

func (x *Host) GetIsDelete() string {
	if x != nil {
		return x.IsDelete
	}
	return ""
}

func (x *Host) GetLeafNumber() string {
	if x != nil {
		return x.LeafNumber
	}
	return ""
}

func (x *Host) GetRackNumber() string {
	if x != nil {
		return x.RackNumber
	}
	return ""
}

func (x *Host) GetRackHeight() int32 {
	if x != nil {
		return x.RackHeight
	}
	return 0
}

func (x *Host) GetRackStartNumber() int32 {
	if x != nil {
		return x.RackStartNumber
	}
	return 0
}

func (x *Host) GetFromFactor() int32 {
	if x != nil {
		return x.FromFactor
	}
	return 0
}

func (x *Host) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Host) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Host) GetIsStatic() bool {
	if x != nil {
		return x.IsStatic
	}
	return false
}

func (x *Host) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Host) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Host) GetIdcId() int64 {
	if x != nil {
		return x.IdcId
	}
	return 0
}

func (x *Host) GetIdcName() string {
	if x != nil {
		return x.IdcName
	}
	return ""
}

type ModifyHostsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hosts []*Host `protobuf:"bytes,1,rep,name=Hosts,proto3" json:"Hosts,omitempty"`
}

func (x *ModifyHostsReq) Reset() {
	*x = ModifyHostsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyHostsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyHostsReq) ProtoMessage() {}

func (x *ModifyHostsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyHostsReq.ProtoReflect.Descriptor instead.
func (*ModifyHostsReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{20}
}

func (x *ModifyHostsReq) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type ModifyHostsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ModifyHostsResp) Reset() {
	*x = ModifyHostsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyHostsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyHostsResp) ProtoMessage() {}

func (x *ModifyHostsResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyHostsResp.ProtoReflect.Descriptor instead.
func (*ModifyHostsResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{21}
}

func (x *ModifyHostsResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ModifyHostsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SoftDelHostsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpList  []string `protobuf:"bytes,1,rep,name=IpList,proto3" json:"IpList,omitempty"`
	DelStat bool     `protobuf:"varint,2,opt,name=DelStat,proto3" json:"DelStat,omitempty"` // true 删除, false 解除删除
}

func (x *SoftDelHostsReq) Reset() {
	*x = SoftDelHostsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftDelHostsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftDelHostsReq) ProtoMessage() {}

func (x *SoftDelHostsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftDelHostsReq.ProtoReflect.Descriptor instead.
func (*SoftDelHostsReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{22}
}

func (x *SoftDelHostsReq) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

func (x *SoftDelHostsReq) GetDelStat() bool {
	if x != nil {
		return x.DelStat
	}
	return false
}

type SoftDelHostsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *SoftDelHostsResp) Reset() {
	*x = SoftDelHostsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftDelHostsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftDelHostsResp) ProtoMessage() {}

func (x *SoftDelHostsResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftDelHostsResp.ProtoReflect.Descriptor instead.
func (*SoftDelHostsResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{23}
}

func (x *SoftDelHostsResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SoftDelHostsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HardDelHostsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpList []string `protobuf:"bytes,1,rep,name=IpList,proto3" json:"IpList,omitempty"`
}

func (x *HardDelHostsReq) Reset() {
	*x = HardDelHostsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardDelHostsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardDelHostsReq) ProtoMessage() {}

func (x *HardDelHostsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardDelHostsReq.ProtoReflect.Descriptor instead.
func (*HardDelHostsReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{24}
}

func (x *HardDelHostsReq) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

type HardDelHostsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *HardDelHostsResp) Reset() {
	*x = HardDelHostsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardDelHostsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardDelHostsResp) ProtoMessage() {}

func (x *HardDelHostsResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardDelHostsResp.ProtoReflect.Descriptor instead.
func (*HardDelHostsResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{25}
}

func (x *HardDelHostsResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *HardDelHostsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetHostsDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpList []string `protobuf:"bytes,1,rep,name=IpList,proto3" json:"IpList,omitempty"`
}

func (x *GetHostsDetailReq) Reset() {
	*x = GetHostsDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostsDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostsDetailReq) ProtoMessage() {}

func (x *GetHostsDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostsDetailReq.ProtoReflect.Descriptor instead.
func (*GetHostsDetailReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{26}
}

func (x *GetHostsDetailReq) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

type GetHostsPoolDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpList []string `protobuf:"bytes,1,rep,name=IpList,proto3" json:"IpList,omitempty"`
}

func (x *GetHostsPoolDetailReq) Reset() {
	*x = GetHostsPoolDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostsPoolDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostsPoolDetailReq) ProtoMessage() {}

func (x *GetHostsPoolDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostsPoolDetailReq.ProtoReflect.Descriptor instead.
func (*GetHostsPoolDetailReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{27}
}

func (x *GetHostsPoolDetailReq) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aid              int64  `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	ServerType       string `protobuf:"bytes,2,opt,name=ServerType,proto3" json:"ServerType,omitempty"`
	ServerVersion    string `protobuf:"bytes,3,opt,name=ServerVersion,proto3" json:"ServerVersion,omitempty"`
	ServerSubtitle   string `protobuf:"bytes,4,opt,name=ServerSubtitle,proto3" json:"ServerSubtitle,omitempty"`
	ClusterGroupName string `protobuf:"bytes,5,opt,name=ClusterGroupName,proto3" json:"ClusterGroupName,omitempty"`
	ClusterName      string `protobuf:"bytes,6,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	ServiceProtocol  string `protobuf:"bytes,7,opt,name=ServiceProtocol,proto3" json:"ServiceProtocol,omitempty"`
	ServiceAddr      string `protobuf:"bytes,8,opt,name=ServiceAddr,proto3" json:"ServiceAddr,omitempty"`
	ServiceRole      string `protobuf:"bytes,9,opt,name=ServiceRole,proto3" json:"ServiceRole,omitempty"`
	DepartmentName   string `protobuf:"bytes,10,opt,name=DepartmentName,proto3" json:"DepartmentName,omitempty"`
	ProjectName      string `protobuf:"bytes,11,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Developer        string `protobuf:"bytes,12,opt,name=Developer,proto3" json:"Developer,omitempty"`
	DBA              string `protobuf:"bytes,13,opt,name=DBA,proto3" json:"DBA,omitempty"`
	QA               string `protobuf:"bytes,14,opt,name=QA,proto3" json:"QA,omitempty"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{28}
}

func (x *App) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *App) GetServerType() string {
	if x != nil {
		return x.ServerType
	}
	return ""
}

func (x *App) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *App) GetServerSubtitle() string {
	if x != nil {
		return x.ServerSubtitle
	}
	return ""
}

func (x *App) GetClusterGroupName() string {
	if x != nil {
		return x.ClusterGroupName
	}
	return ""
}

func (x *App) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *App) GetServiceProtocol() string {
	if x != nil {
		return x.ServiceProtocol
	}
	return ""
}

func (x *App) GetServiceAddr() string {
	if x != nil {
		return x.ServiceAddr
	}
	return ""
}

func (x *App) GetServiceRole() string {
	if x != nil {
		return x.ServiceRole
	}
	return ""
}

func (x *App) GetDepartmentName() string {
	if x != nil {
		return x.DepartmentName
	}
	return ""
}

func (x *App) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *App) GetDeveloper() string {
	if x != nil {
		return x.Developer
	}
	return ""
}

func (x *App) GetDBA() string {
	if x != nil {
		return x.DBA
	}
	return ""
}

func (x *App) GetQA() string {
	if x != nil {
		return x.QA
	}
	return ""
}

type HostDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host    *Host  `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	AppList []*App `protobuf:"bytes,2,rep,name=AppList,proto3" json:"AppList,omitempty"`
}

func (x *HostDetail) Reset() {
	*x = HostDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostDetail) ProtoMessage() {}

func (x *HostDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostDetail.ProtoReflect.Descriptor instead.
func (*HostDetail) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{29}
}

func (x *HostDetail) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *HostDetail) GetAppList() []*App {
	if x != nil {
		return x.AppList
	}
	return nil
}

type HostPoolDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hostname        string   `protobuf:"bytes,2,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	HostIp          string   `protobuf:"bytes,3,opt,name=HostIp,proto3" json:"HostIp,omitempty"`
	HostType        string   `protobuf:"bytes,4,opt,name=HostType,proto3" json:"HostType,omitempty"`
	HostOwner       string   `protobuf:"bytes,5,opt,name=HostOwner,proto3" json:"HostOwner,omitempty"`
	H3CId           string   `protobuf:"bytes,6,opt,name=H3cId,proto3" json:"H3cId,omitempty"`
	H3CStatus       string   `protobuf:"bytes,7,opt,name=H3cStatus,proto3" json:"H3cStatus,omitempty"`
	Disk            int32    `protobuf:"varint,8,opt,name=Disk,proto3" json:"Disk,omitempty"`
	Ram             int32    `protobuf:"varint,9,opt,name=Ram,proto3" json:"Ram,omitempty"`
	VCpu            int32    `protobuf:"varint,10,opt,name=VCpu,proto3" json:"VCpu,omitempty"`
	IfH3CSync       string   `protobuf:"bytes,11,opt,name=IfH3cSync,proto3" json:"IfH3cSync,omitempty"`
	H3CImgId        string   `protobuf:"bytes,12,opt,name=H3cImgId,proto3" json:"H3cImgId,omitempty"`
	H3CHmName       string   `protobuf:"bytes,13,opt,name=H3cHmName,proto3" json:"H3cHmName,omitempty"`
	IsDelete        string   `protobuf:"bytes,14,opt,name=IsDelete,proto3" json:"IsDelete,omitempty"` // 这是cmdb系统中记录的状态，不是主机资源池中标识是否已删除的标记
	LeafNumber      string   `protobuf:"bytes,15,opt,name=LeafNumber,proto3" json:"LeafNumber,omitempty"`
	RackNumber      string   `protobuf:"bytes,16,opt,name=RackNumber,proto3" json:"RackNumber,omitempty"`
	RackHeight      int32    `protobuf:"varint,17,opt,name=RackHeight,proto3" json:"RackHeight,omitempty"`
	RackStartNumber int32    `protobuf:"varint,18,opt,name=RackStartNumber,proto3" json:"RackStartNumber,omitempty"`
	FromFactor      int32    `protobuf:"varint,19,opt,name=FromFactor,proto3" json:"FromFactor,omitempty"`
	SerialNumber    string   `protobuf:"bytes,20,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
	IsDeleted       bool     `protobuf:"varint,21,opt,name=IsDeleted,proto3" json:"IsDeleted,omitempty"` // 这是主机资源池中标志是否已删除的状态
	IsStatic        bool     `protobuf:"varint,22,opt,name=IsStatic,proto3" json:"IsStatic,omitempty"`
	CreateTime      string   `protobuf:"bytes,23,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdateTime      string   `protobuf:"bytes,24,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	AppList         []*App   `protobuf:"bytes,25,rep,name=AppList,proto3" json:"AppList,omitempty"`
	IdcInfo         *IdcConf `protobuf:"bytes,26,opt,name=IdcInfo,proto3" json:"IdcInfo,omitempty"` // IDC机房信息
	Remark          string   `protobuf:"bytes,27,opt,name=Remark,proto3" json:"Remark,omitempty"`   // 备注信息
}

func (x *HostPoolDetail) Reset() {
	*x = HostPoolDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostPoolDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPoolDetail) ProtoMessage() {}

func (x *HostPoolDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostPoolDetail.ProtoReflect.Descriptor instead.
func (*HostPoolDetail) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{30}
}

func (x *HostPoolDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HostPoolDetail) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostPoolDetail) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *HostPoolDetail) GetHostType() string {
	if x != nil {
		return x.HostType
	}
	return ""
}

func (x *HostPoolDetail) GetHostOwner() string {
	if x != nil {
		return x.HostOwner
	}
	return ""
}

func (x *HostPoolDetail) GetH3CId() string {
	if x != nil {
		return x.H3CId
	}
	return ""
}

func (x *HostPoolDetail) GetH3CStatus() string {
	if x != nil {
		return x.H3CStatus
	}
	return ""
}

func (x *HostPoolDetail) GetDisk() int32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *HostPoolDetail) GetRam() int32 {
	if x != nil {
		return x.Ram
	}
	return 0
}

func (x *HostPoolDetail) GetVCpu() int32 {
	if x != nil {
		return x.VCpu
	}
	return 0
}

func (x *HostPoolDetail) GetIfH3CSync() string {
	if x != nil {
		return x.IfH3CSync
	}
	return ""
}

func (x *HostPoolDetail) GetH3CImgId() string {
	if x != nil {
		return x.H3CImgId
	}
	return ""
}

func (x *HostPoolDetail) GetH3CHmName() string {
	if x != nil {
		return x.H3CHmName
	}
	return ""
}

func (x *HostPoolDetail) GetIsDelete() string {
	if x != nil {
		return x.IsDelete
	}
	return ""
}

func (x *HostPoolDetail) GetLeafNumber() string {
	if x != nil {
		return x.LeafNumber
	}
	return ""
}

func (x *HostPoolDetail) GetRackNumber() string {
	if x != nil {
		return x.RackNumber
	}
	return ""
}

func (x *HostPoolDetail) GetRackHeight() int32 {
	if x != nil {
		return x.RackHeight
	}
	return 0
}

func (x *HostPoolDetail) GetRackStartNumber() int32 {
	if x != nil {
		return x.RackStartNumber
	}
	return 0
}

func (x *HostPoolDetail) GetFromFactor() int32 {
	if x != nil {
		return x.FromFactor
	}
	return 0
}

func (x *HostPoolDetail) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *HostPoolDetail) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *HostPoolDetail) GetIsStatic() bool {
	if x != nil {
		return x.IsStatic
	}
	return false
}

func (x *HostPoolDetail) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *HostPoolDetail) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *HostPoolDetail) GetAppList() []*App {
	if x != nil {
		return x.AppList
	}
	return nil
}

func (x *HostPoolDetail) GetIdcInfo() *IdcConf {
	if x != nil {
		return x.IdcInfo
	}
	return nil
}

func (x *HostPoolDetail) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type GetHostsDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    bool          `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message    string        `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	HostDetail []*HostDetail `protobuf:"bytes,3,rep,name=HostDetail,proto3" json:"HostDetail,omitempty"`
}

func (x *GetHostsDetailResp) Reset() {
	*x = GetHostsDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostsDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostsDetailResp) ProtoMessage() {}

func (x *GetHostsDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostsDetailResp.ProtoReflect.Descriptor instead.
func (*GetHostsDetailResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{31}
}

func (x *GetHostsDetailResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetHostsDetailResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetHostsDetailResp) GetHostDetail() []*HostDetail {
	if x != nil {
		return x.HostDetail
	}
	return nil
}

type GetHostsPoolDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool              `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message         string            `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	HostsPoolDetail []*HostPoolDetail `protobuf:"bytes,3,rep,name=HostsPoolDetail,proto3" json:"HostsPoolDetail,omitempty"`
}

func (x *GetHostsPoolDetailResp) Reset() {
	*x = GetHostsPoolDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostsPoolDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostsPoolDetailResp) ProtoMessage() {}

func (x *GetHostsPoolDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostsPoolDetailResp.ProtoReflect.Descriptor instead.
func (*GetHostsPoolDetailResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{32}
}

func (x *GetHostsPoolDetailResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetHostsPoolDetailResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetHostsPoolDetailResp) GetHostsPoolDetail() []*HostPoolDetail {
	if x != nil {
		return x.HostsPoolDetail
	}
	return nil
}

type ExtractByOwnerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *ExtractByOwnerReq) Reset() {
	*x = ExtractByOwnerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractByOwnerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractByOwnerReq) ProtoMessage() {}

func (x *ExtractByOwnerReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractByOwnerReq.ProtoReflect.Descriptor instead.
func (*ExtractByOwnerReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{33}
}

func (x *ExtractByOwnerReq) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type ExtractByOwnerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	IpList  []string `protobuf:"bytes,3,rep,name=ip_list,json=ipList,proto3" json:"ip_list,omitempty"`
}

func (x *ExtractByOwnerResp) Reset() {
	*x = ExtractByOwnerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractByOwnerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractByOwnerResp) ProtoMessage() {}

func (x *ExtractByOwnerResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractByOwnerResp.ProtoReflect.Descriptor instead.
func (*ExtractByOwnerResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{34}
}

func (x *ExtractByOwnerResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExtractByOwnerResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExtractByOwnerResp) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

type CollAppsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpList []string `protobuf:"bytes,1,rep,name=IpList,proto3" json:"IpList,omitempty"` // IpList 为空则搜集所有机器
}

func (x *CollAppsReq) Reset() {
	*x = CollAppsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollAppsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollAppsReq) ProtoMessage() {}

func (x *CollAppsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollAppsReq.ProtoReflect.Descriptor instead.
func (*CollAppsReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{35}
}

func (x *CollAppsReq) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

type CollAppsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *CollAppsResp) Reset() {
	*x = CollAppsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollAppsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollAppsResp) ProtoMessage() {}

func (x *CollAppsResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollAppsResp.ProtoReflect.Descriptor instead.
func (*CollAppsResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{36}
}

func (x *CollAppsResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CollAppsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetHostsPoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpList      []string `protobuf:"bytes,1,rep,name=IpList,proto3" json:"IpList,omitempty"` // IpList 为空则搜集所有机器
	HostType    []string `protobuf:"bytes,2,rep,name=HostType,proto3" json:"HostType,omitempty"`
	AppName     []string `protobuf:"bytes,3,rep,name=AppName,proto3" json:"AppName,omitempty"`
	AppVer      string   `protobuf:"bytes,4,opt,name=AppVer,proto3" json:"AppVer,omitempty"`
	AppSub      string   `protobuf:"bytes,5,opt,name=AppSub,proto3" json:"AppSub,omitempty"`
	AppDepart   string   `protobuf:"bytes,6,opt,name=AppDepart,proto3" json:"AppDepart,omitempty"`
	AppPorjName string   `protobuf:"bytes,7,opt,name=AppPorjName,proto3" json:"AppPorjName,omitempty"`
	AppDev      string   `protobuf:"bytes,8,opt,name=AppDev,proto3" json:"AppDev,omitempty"`
	AppDBA      string   `protobuf:"bytes,9,opt,name=AppDBA,proto3" json:"AppDBA,omitempty"`
}

func (x *GetHostsPoolReq) Reset() {
	*x = GetHostsPoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostsPoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostsPoolReq) ProtoMessage() {}

func (x *GetHostsPoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostsPoolReq.ProtoReflect.Descriptor instead.
func (*GetHostsPoolReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{37}
}

func (x *GetHostsPoolReq) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

func (x *GetHostsPoolReq) GetHostType() []string {
	if x != nil {
		return x.HostType
	}
	return nil
}

func (x *GetHostsPoolReq) GetAppName() []string {
	if x != nil {
		return x.AppName
	}
	return nil
}

func (x *GetHostsPoolReq) GetAppVer() string {
	if x != nil {
		return x.AppVer
	}
	return ""
}

func (x *GetHostsPoolReq) GetAppSub() string {
	if x != nil {
		return x.AppSub
	}
	return ""
}

func (x *GetHostsPoolReq) GetAppDepart() string {
	if x != nil {
		return x.AppDepart
	}
	return ""
}

func (x *GetHostsPoolReq) GetAppPorjName() string {
	if x != nil {
		return x.AppPorjName
	}
	return ""
}

func (x *GetHostsPoolReq) GetAppDev() string {
	if x != nil {
		return x.AppDev
	}
	return ""
}

func (x *GetHostsPoolReq) GetAppDBA() string {
	if x != nil {
		return x.AppDBA
	}
	return ""
}

type AddHostsAppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*HostsApp `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AddHostsAppReq) Reset() {
	*x = AddHostsAppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHostsAppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHostsAppReq) ProtoMessage() {}

func (x *AddHostsAppReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHostsAppReq.ProtoReflect.Descriptor instead.
func (*AddHostsAppReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{38}
}

func (x *AddHostsAppReq) GetData() []*HostsApp {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddHostsAppResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *AddHostsAppResp) Reset() {
	*x = AddHostsAppResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHostsAppResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHostsAppResp) ProtoMessage() {}

func (x *AddHostsAppResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHostsAppResp.ProtoReflect.Descriptor instead.
func (*AddHostsAppResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{39}
}

func (x *AddHostsAppResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddHostsAppResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MdfHostsAppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*HostsApp `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MdfHostsAppReq) Reset() {
	*x = MdfHostsAppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdfHostsAppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdfHostsAppReq) ProtoMessage() {}

func (x *MdfHostsAppReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdfHostsAppReq.ProtoReflect.Descriptor instead.
func (*MdfHostsAppReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{40}
}

func (x *MdfHostsAppReq) GetData() []*HostsApp {
	if x != nil {
		return x.Data
	}
	return nil
}

type MdfHostsAppResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *MdfHostsAppResp) Reset() {
	*x = MdfHostsAppResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdfHostsAppResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdfHostsAppResp) ProtoMessage() {}

func (x *MdfHostsAppResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdfHostsAppResp.ProtoReflect.Descriptor instead.
func (*MdfHostsAppResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{41}
}

func (x *MdfHostsAppResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MdfHostsAppResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DelHostsAppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppIds []int64 `protobuf:"varint,1,rep,packed,name=AppIds,proto3" json:"AppIds,omitempty"` // 应用ID列表
}

func (x *DelHostsAppReq) Reset() {
	*x = DelHostsAppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelHostsAppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelHostsAppReq) ProtoMessage() {}

func (x *DelHostsAppReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelHostsAppReq.ProtoReflect.Descriptor instead.
func (*DelHostsAppReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{42}
}

func (x *DelHostsAppReq) GetAppIds() []int64 {
	if x != nil {
		return x.AppIds
	}
	return nil
}

type DelHostsAppResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *DelHostsAppResp) Reset() {
	*x = DelHostsAppResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelHostsAppResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelHostsAppResp) ProtoMessage() {}

func (x *DelHostsAppResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelHostsAppResp.ProtoReflect.Descriptor instead.
func (*DelHostsAppResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{43}
}

func (x *DelHostsAppResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DelHostsAppResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HostsApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId           int32  `protobuf:"varint,1,opt,name=HostId,proto3" json:"HostId,omitempty"`
	ServerType       string `protobuf:"bytes,2,opt,name=ServerType,proto3" json:"ServerType,omitempty"`
	ServerVersion    string `protobuf:"bytes,3,opt,name=ServerVersion,proto3" json:"ServerVersion,omitempty"`
	ServerSubtitle   string `protobuf:"bytes,4,opt,name=ServerSubtitle,proto3" json:"ServerSubtitle,omitempty"`
	ClusterGroupName string `protobuf:"bytes,5,opt,name=ClusterGroupName,proto3" json:"ClusterGroupName,omitempty"`
	ClusterName      string `protobuf:"bytes,6,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	ServerProtocol   string `protobuf:"bytes,7,opt,name=ServerProtocol,proto3" json:"ServerProtocol,omitempty"`
	ServerAddr       string `protobuf:"bytes,8,opt,name=ServerAddr,proto3" json:"ServerAddr,omitempty"`
	ServerPort       int32  `protobuf:"varint,9,opt,name=ServerPort,proto3" json:"ServerPort,omitempty"`
	ServerRole       string `protobuf:"bytes,10,opt,name=ServerRole,proto3" json:"ServerRole,omitempty"`
	ServerStatus     string `protobuf:"bytes,11,opt,name=ServerStatus,proto3" json:"ServerStatus,omitempty"`
	DepartmentName   string `protobuf:"bytes,12,opt,name=DepartmentName,proto3" json:"DepartmentName,omitempty"`
}

func (x *HostsApp) Reset() {
	*x = HostsApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostsApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostsApp) ProtoMessage() {}

func (x *HostsApp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostsApp.ProtoReflect.Descriptor instead.
func (*HostsApp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{44}
}

func (x *HostsApp) GetHostId() int32 {
	if x != nil {
		return x.HostId
	}
	return 0
}

func (x *HostsApp) GetServerType() string {
	if x != nil {
		return x.ServerType
	}
	return ""
}

func (x *HostsApp) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *HostsApp) GetServerSubtitle() string {
	if x != nil {
		return x.ServerSubtitle
	}
	return ""
}

func (x *HostsApp) GetClusterGroupName() string {
	if x != nil {
		return x.ClusterGroupName
	}
	return ""
}

func (x *HostsApp) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *HostsApp) GetServerProtocol() string {
	if x != nil {
		return x.ServerProtocol
	}
	return ""
}

func (x *HostsApp) GetServerAddr() string {
	if x != nil {
		return x.ServerAddr
	}
	return ""
}

func (x *HostsApp) GetServerPort() int32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *HostsApp) GetServerRole() string {
	if x != nil {
		return x.ServerRole
	}
	return ""
}

func (x *HostsApp) GetServerStatus() string {
	if x != nil {
		return x.ServerStatus
	}
	return ""
}

func (x *HostsApp) GetDepartmentName() string {
	if x != nil {
		return x.DepartmentName
	}
	return ""
}

type ClusterGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClusterGroupsReq) Reset() {
	*x = ClusterGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterGroupsReq) ProtoMessage() {}

func (x *ClusterGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterGroupsReq.ProtoReflect.Descriptor instead.
func (*ClusterGroupsReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{45}
}

type ClusterGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreateAt       string `protobuf:"bytes,2,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	UpdateAt       string `protobuf:"bytes,3,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	GroupName      string `protobuf:"bytes,4,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	ClusterName    string `protobuf:"bytes,5,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	DepartmentName string `protobuf:"bytes,6,opt,name=DepartmentName,proto3" json:"DepartmentName,omitempty"`
}

func (x *ClusterGroup) Reset() {
	*x = ClusterGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterGroup) ProtoMessage() {}

func (x *ClusterGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterGroup.ProtoReflect.Descriptor instead.
func (*ClusterGroup) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{46}
}

func (x *ClusterGroup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterGroup) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *ClusterGroup) GetUpdateAt() string {
	if x != nil {
		return x.UpdateAt
	}
	return ""
}

func (x *ClusterGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ClusterGroup) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterGroup) GetDepartmentName() string {
	if x != nil {
		return x.DepartmentName
	}
	return ""
}

type ClusterGroupsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool            `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message      string          `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ClusterGroup []*ClusterGroup `protobuf:"bytes,3,rep,name=ClusterGroup,proto3" json:"ClusterGroup,omitempty"`
}

func (x *ClusterGroupsResp) Reset() {
	*x = ClusterGroupsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterGroupsResp) ProtoMessage() {}

func (x *ClusterGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterGroupsResp.ProtoReflect.Descriptor instead.
func (*ClusterGroupsResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{47}
}

func (x *ClusterGroupsResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ClusterGroupsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ClusterGroupsResp) GetClusterGroup() []*ClusterGroup {
	if x != nil {
		return x.ClusterGroup
	}
	return nil
}

type ServerResourceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginTime string   `protobuf:"bytes,1,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`
	EndTime   string   `protobuf:"bytes,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	IpList    []string `protobuf:"bytes,3,rep,name=IpList,proto3" json:"IpList,omitempty"`
	Cluster   string   `protobuf:"bytes,4,opt,name=Cluster,proto3" json:"Cluster,omitempty"`
}

func (x *ServerResourceReq) Reset() {
	*x = ServerResourceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerResourceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerResourceReq) ProtoMessage() {}

func (x *ServerResourceReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerResourceReq.ProtoReflect.Descriptor instead.
func (*ServerResourceReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{48}
}

func (x *ServerResourceReq) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *ServerResourceReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ServerResourceReq) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

func (x *ServerResourceReq) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

type ServerResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64              `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreateAt       string             `protobuf:"bytes,2,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	UpdateAt       string             `protobuf:"bytes,3,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	PoolId         int64              `protobuf:"varint,4,opt,name=PoolId,proto3" json:"PoolId,omitempty"`
	Ip             string             `protobuf:"bytes,5,opt,name=Ip,proto3" json:"Ip,omitempty"`
	TotalMemory    float32            `protobuf:"fixed32,6,opt,name=TotalMemory,proto3" json:"TotalMemory,omitempty"`
	UsedMemory     float32            `protobuf:"fixed32,7,opt,name=UsedMemory,proto3" json:"UsedMemory,omitempty"`
	TotalDisk      float32            `protobuf:"fixed32,8,opt,name=TotalDisk,proto3" json:"TotalDisk,omitempty"`
	UsedDisk       float32            `protobuf:"fixed32,9,opt,name=UsedDisk,proto3" json:"UsedDisk,omitempty"`
	CPUCores       int32              `protobuf:"varint,10,opt,name=CPUCores,proto3" json:"CPUCores,omitempty"`
	CPULoad        float32            `protobuf:"fixed32,11,opt,name=CPULoad,proto3" json:"CPULoad,omitempty"`
	Datetime       string             `protobuf:"bytes,12,opt,name=Datetime,proto3" json:"Datetime,omitempty"`
	SequenceNumber int64              `protobuf:"varint,13,opt,name=SequenceNumber,proto3" json:"SequenceNumber,omitempty"` // 序列号，用于确保数据唯一性和排序一致性
	Clusters       []*HostClusterInfo `protobuf:"bytes,14,rep,name=Clusters,proto3" json:"Clusters,omitempty"`              // 新增：主机所属的集群列表
	IdcInfo        *IdcConf           `protobuf:"bytes,15,opt,name=IdcInfo,proto3" json:"IdcInfo,omitempty"`                // IDC机房信息
	// 百分比字段
	CpuPercentMax  float64 `protobuf:"fixed64,16,opt,name=CpuPercentMax,proto3" json:"CpuPercentMax,omitempty"`   // CPU使用率最大值(%)
	CpuPercentAvg  float64 `protobuf:"fixed64,17,opt,name=CpuPercentAvg,proto3" json:"CpuPercentAvg,omitempty"`   // CPU使用率平均值(%)
	CpuPercentMin  float64 `protobuf:"fixed64,18,opt,name=CpuPercentMin,proto3" json:"CpuPercentMin,omitempty"`   // CPU使用率最小值(%)
	MemPercentMax  float64 `protobuf:"fixed64,19,opt,name=MemPercentMax,proto3" json:"MemPercentMax,omitempty"`   // 内存使用率最大值(%)
	MemPercentAvg  float64 `protobuf:"fixed64,20,opt,name=MemPercentAvg,proto3" json:"MemPercentAvg,omitempty"`   // 内存使用率平均值(%)
	MemPercentMin  float64 `protobuf:"fixed64,21,opt,name=MemPercentMin,proto3" json:"MemPercentMin,omitempty"`   // 内存使用率最小值(%)
	DiskPercentMax float64 `protobuf:"fixed64,22,opt,name=DiskPercentMax,proto3" json:"DiskPercentMax,omitempty"` // 磁盘使用率最大值(%)
	DiskPercentAvg float64 `protobuf:"fixed64,23,opt,name=DiskPercentAvg,proto3" json:"DiskPercentAvg,omitempty"` // 磁盘使用率平均值(%)
	DiskPercentMin float64 `protobuf:"fixed64,24,opt,name=DiskPercentMin,proto3" json:"DiskPercentMin,omitempty"` // 磁盘使用率最小值(%)
}

func (x *ServerResource) Reset() {
	*x = ServerResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerResource) ProtoMessage() {}

func (x *ServerResource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerResource.ProtoReflect.Descriptor instead.
func (*ServerResource) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{49}
}

func (x *ServerResource) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServerResource) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *ServerResource) GetUpdateAt() string {
	if x != nil {
		return x.UpdateAt
	}
	return ""
}

func (x *ServerResource) GetPoolId() int64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *ServerResource) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ServerResource) GetTotalMemory() float32 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *ServerResource) GetUsedMemory() float32 {
	if x != nil {
		return x.UsedMemory
	}
	return 0
}

func (x *ServerResource) GetTotalDisk() float32 {
	if x != nil {
		return x.TotalDisk
	}
	return 0
}

func (x *ServerResource) GetUsedDisk() float32 {
	if x != nil {
		return x.UsedDisk
	}
	return 0
}

func (x *ServerResource) GetCPUCores() int32 {
	if x != nil {
		return x.CPUCores
	}
	return 0
}

func (x *ServerResource) GetCPULoad() float32 {
	if x != nil {
		return x.CPULoad
	}
	return 0
}

func (x *ServerResource) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *ServerResource) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ServerResource) GetClusters() []*HostClusterInfo {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ServerResource) GetIdcInfo() *IdcConf {
	if x != nil {
		return x.IdcInfo
	}
	return nil
}

func (x *ServerResource) GetCpuPercentMax() float64 {
	if x != nil {
		return x.CpuPercentMax
	}
	return 0
}

func (x *ServerResource) GetCpuPercentAvg() float64 {
	if x != nil {
		return x.CpuPercentAvg
	}
	return 0
}

func (x *ServerResource) GetCpuPercentMin() float64 {
	if x != nil {
		return x.CpuPercentMin
	}
	return 0
}

func (x *ServerResource) GetMemPercentMax() float64 {
	if x != nil {
		return x.MemPercentMax
	}
	return 0
}

func (x *ServerResource) GetMemPercentAvg() float64 {
	if x != nil {
		return x.MemPercentAvg
	}
	return 0
}

func (x *ServerResource) GetMemPercentMin() float64 {
	if x != nil {
		return x.MemPercentMin
	}
	return 0
}

func (x *ServerResource) GetDiskPercentMax() float64 {
	if x != nil {
		return x.DiskPercentMax
	}
	return 0
}

func (x *ServerResource) GetDiskPercentAvg() float64 {
	if x != nil {
		return x.DiskPercentAvg
	}
	return 0
}

func (x *ServerResource) GetDiskPercentMin() float64 {
	if x != nil {
		return x.DiskPercentMin
	}
	return 0
}

type ServerResourceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool              `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ServerResource []*ServerResource `protobuf:"bytes,3,rep,name=ServerResource,proto3" json:"ServerResource,omitempty"`
}

func (x *ServerResourceResp) Reset() {
	*x = ServerResourceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerResourceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerResourceResp) ProtoMessage() {}

func (x *ServerResourceResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerResourceResp.ProtoReflect.Descriptor instead.
func (*ServerResourceResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{50}
}

func (x *ServerResourceResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ServerResourceResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ServerResourceResp) GetServerResource() []*ServerResource {
	if x != nil {
		return x.ServerResource
	}
	return nil
}

// 主机资源最大利用率请求
type ServerResourceMaxReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginTime string   `protobuf:"bytes,1,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`
	EndTime   string   `protobuf:"bytes,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	IpList    []string `protobuf:"bytes,3,rep,name=IpList,proto3" json:"IpList,omitempty"`
	Cluster   string   `protobuf:"bytes,4,opt,name=Cluster,proto3" json:"Cluster,omitempty"`
}

func (x *ServerResourceMaxReq) Reset() {
	*x = ServerResourceMaxReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerResourceMaxReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerResourceMaxReq) ProtoMessage() {}

func (x *ServerResourceMaxReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerResourceMaxReq.ProtoReflect.Descriptor instead.
func (*ServerResourceMaxReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{51}
}

func (x *ServerResourceMaxReq) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *ServerResourceMaxReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ServerResourceMaxReq) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

func (x *ServerResourceMaxReq) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

// 主机所属集群信息
type HostClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName      string `protobuf:"bytes,1,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	ClusterGroupName string `protobuf:"bytes,2,opt,name=ClusterGroupName,proto3" json:"ClusterGroupName,omitempty"`
	DepartmentName   string `protobuf:"bytes,3,opt,name=DepartmentName,proto3" json:"DepartmentName,omitempty"`
}

func (x *HostClusterInfo) Reset() {
	*x = HostClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostClusterInfo) ProtoMessage() {}

func (x *HostClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostClusterInfo.ProtoReflect.Descriptor instead.
func (*HostClusterInfo) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{52}
}

func (x *HostClusterInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *HostClusterInfo) GetClusterGroupName() string {
	if x != nil {
		return x.ClusterGroupName
	}
	return ""
}

func (x *HostClusterInfo) GetDepartmentName() string {
	if x != nil {
		return x.DepartmentName
	}
	return ""
}

// 主机资源最大利用率数据
type ServerResourceMax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64              `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreateAt      string             `protobuf:"bytes,2,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	UpdateAt      string             `protobuf:"bytes,3,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	PoolId        int64              `protobuf:"varint,4,opt,name=PoolId,proto3" json:"PoolId,omitempty"`
	Ip            string             `protobuf:"bytes,5,opt,name=Ip,proto3" json:"Ip,omitempty"`
	TotalMemory   float32            `protobuf:"fixed32,6,opt,name=TotalMemory,proto3" json:"TotalMemory,omitempty"`
	MaxUsedMemory float32            `protobuf:"fixed32,7,opt,name=MaxUsedMemory,proto3" json:"MaxUsedMemory,omitempty"` // 最大内存使用量
	TotalDisk     float32            `protobuf:"fixed32,8,opt,name=TotalDisk,proto3" json:"TotalDisk,omitempty"`
	MaxUsedDisk   float32            `protobuf:"fixed32,9,opt,name=MaxUsedDisk,proto3" json:"MaxUsedDisk,omitempty"` // 最大磁盘使用量
	CPUCores      int32              `protobuf:"varint,10,opt,name=CPUCores,proto3" json:"CPUCores,omitempty"`
	MaxCPULoad    float32            `protobuf:"fixed32,11,opt,name=MaxCPULoad,proto3" json:"MaxCPULoad,omitempty"` // 最大CPU负载
	MaxDateTime   string             `protobuf:"bytes,12,opt,name=MaxDateTime,proto3" json:"MaxDateTime,omitempty"` // 产生最大值的时间点（修正字段名）
	HostName      string             `protobuf:"bytes,13,opt,name=HostName,proto3" json:"HostName,omitempty"`       // 主机名
	HostType      string             `protobuf:"bytes,14,opt,name=HostType,proto3" json:"HostType,omitempty"`       // 主机类型
	Clusters      []*HostClusterInfo `protobuf:"bytes,15,rep,name=Clusters,proto3" json:"Clusters,omitempty"`       // 新增：主机所属的集群列表
	IdcInfo       *IdcConf           `protobuf:"bytes,16,opt,name=IdcInfo,proto3" json:"IdcInfo,omitempty"`         // IDC机房信息
	// 百分比字段
	CpuPercentMax  float64 `protobuf:"fixed64,17,opt,name=CpuPercentMax,proto3" json:"CpuPercentMax,omitempty"`   // CPU使用率最大值(%)
	CpuPercentAvg  float64 `protobuf:"fixed64,18,opt,name=CpuPercentAvg,proto3" json:"CpuPercentAvg,omitempty"`   // CPU使用率平均值(%)
	CpuPercentMin  float64 `protobuf:"fixed64,19,opt,name=CpuPercentMin,proto3" json:"CpuPercentMin,omitempty"`   // CPU使用率最小值(%)
	MemPercentMax  float64 `protobuf:"fixed64,20,opt,name=MemPercentMax,proto3" json:"MemPercentMax,omitempty"`   // 内存使用率最大值(%)
	MemPercentAvg  float64 `protobuf:"fixed64,21,opt,name=MemPercentAvg,proto3" json:"MemPercentAvg,omitempty"`   // 内存使用率平均值(%)
	MemPercentMin  float64 `protobuf:"fixed64,22,opt,name=MemPercentMin,proto3" json:"MemPercentMin,omitempty"`   // 内存使用率最小值(%)
	DiskPercentMax float64 `protobuf:"fixed64,23,opt,name=DiskPercentMax,proto3" json:"DiskPercentMax,omitempty"` // 磁盘使用率最大值(%)
	DiskPercentAvg float64 `protobuf:"fixed64,24,opt,name=DiskPercentAvg,proto3" json:"DiskPercentAvg,omitempty"` // 磁盘使用率平均值(%)
	DiskPercentMin float64 `protobuf:"fixed64,25,opt,name=DiskPercentMin,proto3" json:"DiskPercentMin,omitempty"` // 磁盘使用率最小值(%)
}

func (x *ServerResourceMax) Reset() {
	*x = ServerResourceMax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerResourceMax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerResourceMax) ProtoMessage() {}

func (x *ServerResourceMax) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerResourceMax.ProtoReflect.Descriptor instead.
func (*ServerResourceMax) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{53}
}

func (x *ServerResourceMax) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServerResourceMax) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *ServerResourceMax) GetUpdateAt() string {
	if x != nil {
		return x.UpdateAt
	}
	return ""
}

func (x *ServerResourceMax) GetPoolId() int64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *ServerResourceMax) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ServerResourceMax) GetTotalMemory() float32 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *ServerResourceMax) GetMaxUsedMemory() float32 {
	if x != nil {
		return x.MaxUsedMemory
	}
	return 0
}

func (x *ServerResourceMax) GetTotalDisk() float32 {
	if x != nil {
		return x.TotalDisk
	}
	return 0
}

func (x *ServerResourceMax) GetMaxUsedDisk() float32 {
	if x != nil {
		return x.MaxUsedDisk
	}
	return 0
}

func (x *ServerResourceMax) GetCPUCores() int32 {
	if x != nil {
		return x.CPUCores
	}
	return 0
}

func (x *ServerResourceMax) GetMaxCPULoad() float32 {
	if x != nil {
		return x.MaxCPULoad
	}
	return 0
}

func (x *ServerResourceMax) GetMaxDateTime() string {
	if x != nil {
		return x.MaxDateTime
	}
	return ""
}

func (x *ServerResourceMax) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ServerResourceMax) GetHostType() string {
	if x != nil {
		return x.HostType
	}
	return ""
}

func (x *ServerResourceMax) GetClusters() []*HostClusterInfo {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ServerResourceMax) GetIdcInfo() *IdcConf {
	if x != nil {
		return x.IdcInfo
	}
	return nil
}

func (x *ServerResourceMax) GetCpuPercentMax() float64 {
	if x != nil {
		return x.CpuPercentMax
	}
	return 0
}

func (x *ServerResourceMax) GetCpuPercentAvg() float64 {
	if x != nil {
		return x.CpuPercentAvg
	}
	return 0
}

func (x *ServerResourceMax) GetCpuPercentMin() float64 {
	if x != nil {
		return x.CpuPercentMin
	}
	return 0
}

func (x *ServerResourceMax) GetMemPercentMax() float64 {
	if x != nil {
		return x.MemPercentMax
	}
	return 0
}

func (x *ServerResourceMax) GetMemPercentAvg() float64 {
	if x != nil {
		return x.MemPercentAvg
	}
	return 0
}

func (x *ServerResourceMax) GetMemPercentMin() float64 {
	if x != nil {
		return x.MemPercentMin
	}
	return 0
}

func (x *ServerResourceMax) GetDiskPercentMax() float64 {
	if x != nil {
		return x.DiskPercentMax
	}
	return 0
}

func (x *ServerResourceMax) GetDiskPercentAvg() float64 {
	if x != nil {
		return x.DiskPercentAvg
	}
	return 0
}

func (x *ServerResourceMax) GetDiskPercentMin() float64 {
	if x != nil {
		return x.DiskPercentMin
	}
	return 0
}

type ServerResourceMaxResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success           bool                 `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message           string               `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ServerResourceMax []*ServerResourceMax `protobuf:"bytes,3,rep,name=ServerResourceMax,proto3" json:"ServerResourceMax,omitempty"`
}

func (x *ServerResourceMaxResp) Reset() {
	*x = ServerResourceMaxResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerResourceMaxResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerResourceMaxResp) ProtoMessage() {}

func (x *ServerResourceMaxResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerResourceMaxResp.ProtoReflect.Descriptor instead.
func (*ServerResourceMaxResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{54}
}

func (x *ServerResourceMaxResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ServerResourceMaxResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ServerResourceMaxResp) GetServerResourceMax() []*ServerResourceMax {
	if x != nil {
		return x.ServerResourceMax
	}
	return nil
}

// 集群资源请求
type ClusterResourceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginTime   string `protobuf:"bytes,1,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`
	EndTime     string `protobuf:"bytes,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	GroupName   string `protobuf:"bytes,4,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
}

func (x *ClusterResourceReq) Reset() {
	*x = ClusterResourceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResourceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResourceReq) ProtoMessage() {}

func (x *ClusterResourceReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResourceReq.ProtoReflect.Descriptor instead.
func (*ClusterResourceReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{55}
}

func (x *ClusterResourceReq) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *ClusterResourceReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ClusterResourceReq) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterResourceReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

// 集群成员节点资源信息
type ClusterMemberResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ClusterName      string   `protobuf:"bytes,2,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	ClusterGroupName string   `protobuf:"bytes,3,opt,name=ClusterGroupName,proto3" json:"ClusterGroupName,omitempty"`
	Ip               string   `protobuf:"bytes,4,opt,name=Ip,proto3" json:"Ip,omitempty"`
	HostName         string   `protobuf:"bytes,5,opt,name=HostName,proto3" json:"HostName,omitempty"`
	Port             int32    `protobuf:"varint,6,opt,name=Port,proto3" json:"Port,omitempty"`
	InstanceRole     string   `protobuf:"bytes,7,opt,name=InstanceRole,proto3" json:"InstanceRole,omitempty"`
	TotalMemory      float32  `protobuf:"fixed32,8,opt,name=TotalMemory,proto3" json:"TotalMemory,omitempty"`
	UsedMemory       float32  `protobuf:"fixed32,9,opt,name=UsedMemory,proto3" json:"UsedMemory,omitempty"`
	TotalDisk        float32  `protobuf:"fixed32,10,opt,name=TotalDisk,proto3" json:"TotalDisk,omitempty"`
	UsedDisk         float32  `protobuf:"fixed32,11,opt,name=UsedDisk,proto3" json:"UsedDisk,omitempty"`
	CPUCores         int32    `protobuf:"varint,12,opt,name=CPUCores,proto3" json:"CPUCores,omitempty"`
	CPULoad          float32  `protobuf:"fixed32,13,opt,name=CPULoad,proto3" json:"CPULoad,omitempty"`
	DateTime         string   `protobuf:"bytes,14,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	DepartmentName   []string `protobuf:"bytes,15,rep,name=DepartmentName,proto3" json:"DepartmentName,omitempty"`
	SequenceNumber   int64    `protobuf:"varint,16,opt,name=SequenceNumber,proto3" json:"SequenceNumber,omitempty"` // 序列号，用于确保数据唯一性和排序一致性
	// 百分比字段
	CpuPercentMax  float64 `protobuf:"fixed64,17,opt,name=CpuPercentMax,proto3" json:"CpuPercentMax,omitempty"`   // CPU使用率最大值(%)
	CpuPercentAvg  float64 `protobuf:"fixed64,18,opt,name=CpuPercentAvg,proto3" json:"CpuPercentAvg,omitempty"`   // CPU使用率平均值(%)
	CpuPercentMin  float64 `protobuf:"fixed64,19,opt,name=CpuPercentMin,proto3" json:"CpuPercentMin,omitempty"`   // CPU使用率最小值(%)
	MemPercentMax  float64 `protobuf:"fixed64,20,opt,name=MemPercentMax,proto3" json:"MemPercentMax,omitempty"`   // 内存使用率最大值(%)
	MemPercentAvg  float64 `protobuf:"fixed64,21,opt,name=MemPercentAvg,proto3" json:"MemPercentAvg,omitempty"`   // 内存使用率平均值(%)
	MemPercentMin  float64 `protobuf:"fixed64,22,opt,name=MemPercentMin,proto3" json:"MemPercentMin,omitempty"`   // 内存使用率最小值(%)
	DiskPercentMax float64 `protobuf:"fixed64,23,opt,name=DiskPercentMax,proto3" json:"DiskPercentMax,omitempty"` // 磁盘使用率最大值(%)
	DiskPercentAvg float64 `protobuf:"fixed64,24,opt,name=DiskPercentAvg,proto3" json:"DiskPercentAvg,omitempty"` // 磁盘使用率平均值(%)
	DiskPercentMin float64 `protobuf:"fixed64,25,opt,name=DiskPercentMin,proto3" json:"DiskPercentMin,omitempty"` // 磁盘使用率最小值(%)
}

func (x *ClusterMemberResource) Reset() {
	*x = ClusterMemberResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMemberResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMemberResource) ProtoMessage() {}

func (x *ClusterMemberResource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMemberResource.ProtoReflect.Descriptor instead.
func (*ClusterMemberResource) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{56}
}

func (x *ClusterMemberResource) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterMemberResource) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterMemberResource) GetClusterGroupName() string {
	if x != nil {
		return x.ClusterGroupName
	}
	return ""
}

func (x *ClusterMemberResource) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ClusterMemberResource) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ClusterMemberResource) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClusterMemberResource) GetInstanceRole() string {
	if x != nil {
		return x.InstanceRole
	}
	return ""
}

func (x *ClusterMemberResource) GetTotalMemory() float32 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *ClusterMemberResource) GetUsedMemory() float32 {
	if x != nil {
		return x.UsedMemory
	}
	return 0
}

func (x *ClusterMemberResource) GetTotalDisk() float32 {
	if x != nil {
		return x.TotalDisk
	}
	return 0
}

func (x *ClusterMemberResource) GetUsedDisk() float32 {
	if x != nil {
		return x.UsedDisk
	}
	return 0
}

func (x *ClusterMemberResource) GetCPUCores() int32 {
	if x != nil {
		return x.CPUCores
	}
	return 0
}

func (x *ClusterMemberResource) GetCPULoad() float32 {
	if x != nil {
		return x.CPULoad
	}
	return 0
}

func (x *ClusterMemberResource) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *ClusterMemberResource) GetDepartmentName() []string {
	if x != nil {
		return x.DepartmentName
	}
	return nil
}

func (x *ClusterMemberResource) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ClusterMemberResource) GetCpuPercentMax() float64 {
	if x != nil {
		return x.CpuPercentMax
	}
	return 0
}

func (x *ClusterMemberResource) GetCpuPercentAvg() float64 {
	if x != nil {
		return x.CpuPercentAvg
	}
	return 0
}

func (x *ClusterMemberResource) GetCpuPercentMin() float64 {
	if x != nil {
		return x.CpuPercentMin
	}
	return 0
}

func (x *ClusterMemberResource) GetMemPercentMax() float64 {
	if x != nil {
		return x.MemPercentMax
	}
	return 0
}

func (x *ClusterMemberResource) GetMemPercentAvg() float64 {
	if x != nil {
		return x.MemPercentAvg
	}
	return 0
}

func (x *ClusterMemberResource) GetMemPercentMin() float64 {
	if x != nil {
		return x.MemPercentMin
	}
	return 0
}

func (x *ClusterMemberResource) GetDiskPercentMax() float64 {
	if x != nil {
		return x.DiskPercentMax
	}
	return 0
}

func (x *ClusterMemberResource) GetDiskPercentAvg() float64 {
	if x != nil {
		return x.DiskPercentAvg
	}
	return 0
}

func (x *ClusterMemberResource) GetDiskPercentMin() float64 {
	if x != nil {
		return x.DiskPercentMin
	}
	return 0
}

// 集群最大资源利用率信息
type ClusterResourceMax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName      string `protobuf:"bytes,1,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	ClusterGroupName string `protobuf:"bytes,2,opt,name=ClusterGroupName,proto3" json:"ClusterGroupName,omitempty"`
	DepartmentName   string `protobuf:"bytes,3,opt,name=DepartmentName,proto3" json:"DepartmentName,omitempty"`
	NodeCount        int32  `protobuf:"varint,4,opt,name=NodeCount,proto3" json:"NodeCount,omitempty"`
	CPUCores         int32  `protobuf:"varint,5,opt,name=CPUCores,proto3" json:"CPUCores,omitempty"`
	// 平均值字段
	AvgCPULoad     float32 `protobuf:"fixed32,6,opt,name=AvgCPULoad,proto3" json:"AvgCPULoad,omitempty"`
	AvgMemoryUsage float32 `protobuf:"fixed32,7,opt,name=AvgMemoryUsage,proto3" json:"AvgMemoryUsage,omitempty"`
	AvgDiskUsage   float32 `protobuf:"fixed32,8,opt,name=AvgDiskUsage,proto3" json:"AvgDiskUsage,omitempty"`
	// 最大值字段
	MaxCPULoad     float32 `protobuf:"fixed32,9,opt,name=MaxCPULoad,proto3" json:"MaxCPULoad,omitempty"`
	MaxMemoryUsage float32 `protobuf:"fixed32,10,opt,name=MaxMemoryUsage,proto3" json:"MaxMemoryUsage,omitempty"`
	MaxDiskUsage   float32 `protobuf:"fixed32,11,opt,name=MaxDiskUsage,proto3" json:"MaxDiskUsage,omitempty"`
	TotalMemory    float32 `protobuf:"fixed32,12,opt,name=TotalMemory,proto3" json:"TotalMemory,omitempty"`
	TotalDisk      float32 `protobuf:"fixed32,13,opt,name=TotalDisk,proto3" json:"TotalDisk,omitempty"`
	MaxUsedMemory  float32 `protobuf:"fixed32,14,opt,name=MaxUsedMemory,proto3" json:"MaxUsedMemory,omitempty"`
	MaxUsedDisk    float32 `protobuf:"fixed32,15,opt,name=MaxUsedDisk,proto3" json:"MaxUsedDisk,omitempty"`
	MaxDateTime    string  `protobuf:"bytes,16,opt,name=MaxDateTime,proto3" json:"MaxDateTime,omitempty"`
	//repeated ClusterMemberResource MemberNodes = 17;
	// 百分比字段
	CpuPercentMax  float64 `protobuf:"fixed64,18,opt,name=CpuPercentMax,proto3" json:"CpuPercentMax,omitempty"`   // CPU使用率最大值(%)
	CpuPercentAvg  float64 `protobuf:"fixed64,19,opt,name=CpuPercentAvg,proto3" json:"CpuPercentAvg,omitempty"`   // CPU使用率平均值(%)
	CpuPercentMin  float64 `protobuf:"fixed64,20,opt,name=CpuPercentMin,proto3" json:"CpuPercentMin,omitempty"`   // CPU使用率最小值(%)
	MemPercentMax  float64 `protobuf:"fixed64,21,opt,name=MemPercentMax,proto3" json:"MemPercentMax,omitempty"`   // 内存使用率最大值(%)
	MemPercentAvg  float64 `protobuf:"fixed64,22,opt,name=MemPercentAvg,proto3" json:"MemPercentAvg,omitempty"`   // 内存使用率平均值(%)
	MemPercentMin  float64 `protobuf:"fixed64,23,opt,name=MemPercentMin,proto3" json:"MemPercentMin,omitempty"`   // 内存使用率最小值(%)
	DiskPercentMax float64 `protobuf:"fixed64,24,opt,name=DiskPercentMax,proto3" json:"DiskPercentMax,omitempty"` // 磁盘使用率最大值(%)
	DiskPercentAvg float64 `protobuf:"fixed64,25,opt,name=DiskPercentAvg,proto3" json:"DiskPercentAvg,omitempty"` // 磁盘使用率平均值(%)
	DiskPercentMin float64 `protobuf:"fixed64,26,opt,name=DiskPercentMin,proto3" json:"DiskPercentMin,omitempty"` // 磁盘使用率最小值(%)
}

func (x *ClusterResourceMax) Reset() {
	*x = ClusterResourceMax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResourceMax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResourceMax) ProtoMessage() {}

func (x *ClusterResourceMax) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResourceMax.ProtoReflect.Descriptor instead.
func (*ClusterResourceMax) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{57}
}

func (x *ClusterResourceMax) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterResourceMax) GetClusterGroupName() string {
	if x != nil {
		return x.ClusterGroupName
	}
	return ""
}

func (x *ClusterResourceMax) GetDepartmentName() string {
	if x != nil {
		return x.DepartmentName
	}
	return ""
}

func (x *ClusterResourceMax) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *ClusterResourceMax) GetCPUCores() int32 {
	if x != nil {
		return x.CPUCores
	}
	return 0
}

func (x *ClusterResourceMax) GetAvgCPULoad() float32 {
	if x != nil {
		return x.AvgCPULoad
	}
	return 0
}

func (x *ClusterResourceMax) GetAvgMemoryUsage() float32 {
	if x != nil {
		return x.AvgMemoryUsage
	}
	return 0
}

func (x *ClusterResourceMax) GetAvgDiskUsage() float32 {
	if x != nil {
		return x.AvgDiskUsage
	}
	return 0
}

func (x *ClusterResourceMax) GetMaxCPULoad() float32 {
	if x != nil {
		return x.MaxCPULoad
	}
	return 0
}

func (x *ClusterResourceMax) GetMaxMemoryUsage() float32 {
	if x != nil {
		return x.MaxMemoryUsage
	}
	return 0
}

func (x *ClusterResourceMax) GetMaxDiskUsage() float32 {
	if x != nil {
		return x.MaxDiskUsage
	}
	return 0
}

func (x *ClusterResourceMax) GetTotalMemory() float32 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *ClusterResourceMax) GetTotalDisk() float32 {
	if x != nil {
		return x.TotalDisk
	}
	return 0
}

func (x *ClusterResourceMax) GetMaxUsedMemory() float32 {
	if x != nil {
		return x.MaxUsedMemory
	}
	return 0
}

func (x *ClusterResourceMax) GetMaxUsedDisk() float32 {
	if x != nil {
		return x.MaxUsedDisk
	}
	return 0
}

func (x *ClusterResourceMax) GetMaxDateTime() string {
	if x != nil {
		return x.MaxDateTime
	}
	return ""
}

func (x *ClusterResourceMax) GetCpuPercentMax() float64 {
	if x != nil {
		return x.CpuPercentMax
	}
	return 0
}

func (x *ClusterResourceMax) GetCpuPercentAvg() float64 {
	if x != nil {
		return x.CpuPercentAvg
	}
	return 0
}

func (x *ClusterResourceMax) GetCpuPercentMin() float64 {
	if x != nil {
		return x.CpuPercentMin
	}
	return 0
}

func (x *ClusterResourceMax) GetMemPercentMax() float64 {
	if x != nil {
		return x.MemPercentMax
	}
	return 0
}

func (x *ClusterResourceMax) GetMemPercentAvg() float64 {
	if x != nil {
		return x.MemPercentAvg
	}
	return 0
}

func (x *ClusterResourceMax) GetMemPercentMin() float64 {
	if x != nil {
		return x.MemPercentMin
	}
	return 0
}

func (x *ClusterResourceMax) GetDiskPercentMax() float64 {
	if x != nil {
		return x.DiskPercentMax
	}
	return 0
}

func (x *ClusterResourceMax) GetDiskPercentAvg() float64 {
	if x != nil {
		return x.DiskPercentAvg
	}
	return 0
}

func (x *ClusterResourceMax) GetDiskPercentMin() float64 {
	if x != nil {
		return x.DiskPercentMin
	}
	return 0
}

// 响应消息
type ClusterResourceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success          bool                     `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message          string                   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ClusterResources []*ClusterMemberResource `protobuf:"bytes,3,rep,name=ClusterResources,proto3" json:"ClusterResources,omitempty"`
}

func (x *ClusterResourceResp) Reset() {
	*x = ClusterResourceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResourceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResourceResp) ProtoMessage() {}

func (x *ClusterResourceResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResourceResp.ProtoReflect.Descriptor instead.
func (*ClusterResourceResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{58}
}

func (x *ClusterResourceResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ClusterResourceResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ClusterResourceResp) GetClusterResources() []*ClusterMemberResource {
	if x != nil {
		return x.ClusterResources
	}
	return nil
}

type ClusterResourceMaxResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success             bool                  `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message             string                `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ClusterResourcesMax []*ClusterResourceMax `protobuf:"bytes,3,rep,name=ClusterResourcesMax,proto3" json:"ClusterResourcesMax,omitempty"`
}

func (x *ClusterResourceMaxResp) Reset() {
	*x = ClusterResourceMaxResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResourceMaxResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResourceMaxResp) ProtoMessage() {}

func (x *ClusterResourceMaxResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResourceMaxResp.ProtoReflect.Descriptor instead.
func (*ClusterResourceMaxResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{59}
}

func (x *ClusterResourceMaxResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ClusterResourceMaxResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ClusterResourceMaxResp) GetClusterResourcesMax() []*ClusterResourceMax {
	if x != nil {
		return x.ClusterResourcesMax
	}
	return nil
}

// 磁盘预测请求
type DiskPredictionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginTime      string   `protobuf:"bytes,1,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`
	EndTime        string   `protobuf:"bytes,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	IpList         []string `protobuf:"bytes,3,rep,name=IpList,proto3" json:"IpList,omitempty"`
	Cluster        string   `protobuf:"bytes,4,opt,name=Cluster,proto3" json:"Cluster,omitempty"`
	DepartmentName string   `protobuf:"bytes,5,opt,name=DepartmentName,proto3" json:"DepartmentName,omitempty"` // 部门筛选条件
}

func (x *DiskPredictionReq) Reset() {
	*x = DiskPredictionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskPredictionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPredictionReq) ProtoMessage() {}

func (x *DiskPredictionReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPredictionReq.ProtoReflect.Descriptor instead.
func (*DiskPredictionReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{60}
}

func (x *DiskPredictionReq) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *DiskPredictionReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DiskPredictionReq) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

func (x *DiskPredictionReq) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *DiskPredictionReq) GetDepartmentName() string {
	if x != nil {
		return x.DepartmentName
	}
	return ""
}

// 磁盘预测数据
type DiskPrediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int64              `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Ip                      string             `protobuf:"bytes,2,opt,name=Ip,proto3" json:"Ip,omitempty"`
	CurrentDiskUsagePercent float32            `protobuf:"fixed32,6,opt,name=CurrentDiskUsagePercent,proto3" json:"CurrentDiskUsagePercent,omitempty"`
	TotalDisk               float32            `protobuf:"fixed32,7,opt,name=TotalDisk,proto3" json:"TotalDisk,omitempty"`
	UsedDisk                float32            `protobuf:"fixed32,8,opt,name=UsedDisk,proto3" json:"UsedDisk,omitempty"`
	DailyGrowthRate         float32            `protobuf:"fixed32,9,opt,name=DailyGrowthRate,proto3" json:"DailyGrowthRate,omitempty"`    // 每日增长率(GB)
	PredictedFullDate       string             `protobuf:"bytes,10,opt,name=PredictedFullDate,proto3" json:"PredictedFullDate,omitempty"` // 预测磁盘满时间
	DaysUntilFull           int32              `protobuf:"varint,11,opt,name=DaysUntilFull,proto3" json:"DaysUntilFull,omitempty"`        // 距离磁盘满的天数
	IsHighRisk              bool               `protobuf:"varint,12,opt,name=IsHighRisk,proto3" json:"IsHighRisk,omitempty"`              // 是否高风险(30天内磁盘满)
	CreateAt                string             `protobuf:"bytes,13,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	UpdateAt                string             `protobuf:"bytes,14,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	Clusters                []*HostClusterInfo `protobuf:"bytes,15,rep,name=Clusters,proto3" json:"Clusters,omitempty"` // 主机所属的集群信息数组
	IdcInfo                 *IdcConf           `protobuf:"bytes,16,opt,name=IdcInfo,proto3" json:"IdcInfo,omitempty"`   // IDC 机房信息
}

func (x *DiskPrediction) Reset() {
	*x = DiskPrediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPrediction) ProtoMessage() {}

func (x *DiskPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPrediction.ProtoReflect.Descriptor instead.
func (*DiskPrediction) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{61}
}

func (x *DiskPrediction) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DiskPrediction) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DiskPrediction) GetCurrentDiskUsagePercent() float32 {
	if x != nil {
		return x.CurrentDiskUsagePercent
	}
	return 0
}

func (x *DiskPrediction) GetTotalDisk() float32 {
	if x != nil {
		return x.TotalDisk
	}
	return 0
}

func (x *DiskPrediction) GetUsedDisk() float32 {
	if x != nil {
		return x.UsedDisk
	}
	return 0
}

func (x *DiskPrediction) GetDailyGrowthRate() float32 {
	if x != nil {
		return x.DailyGrowthRate
	}
	return 0
}

func (x *DiskPrediction) GetPredictedFullDate() string {
	if x != nil {
		return x.PredictedFullDate
	}
	return ""
}

func (x *DiskPrediction) GetDaysUntilFull() int32 {
	if x != nil {
		return x.DaysUntilFull
	}
	return 0
}

func (x *DiskPrediction) GetIsHighRisk() bool {
	if x != nil {
		return x.IsHighRisk
	}
	return false
}

func (x *DiskPrediction) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *DiskPrediction) GetUpdateAt() string {
	if x != nil {
		return x.UpdateAt
	}
	return ""
}

func (x *DiskPrediction) GetClusters() []*HostClusterInfo {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *DiskPrediction) GetIdcInfo() *IdcConf {
	if x != nil {
		return x.IdcInfo
	}
	return nil
}

// 磁盘预测响应
type DiskPredictionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool              `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	DiskPrediction []*DiskPrediction `protobuf:"bytes,3,rep,name=DiskPrediction,proto3" json:"DiskPrediction,omitempty"`
}

func (x *DiskPredictionResp) Reset() {
	*x = DiskPredictionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskPredictionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPredictionResp) ProtoMessage() {}

func (x *DiskPredictionResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPredictionResp.ProtoReflect.Descriptor instead.
func (*DiskPredictionResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{62}
}

func (x *DiskPredictionResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DiskPredictionResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DiskPredictionResp) GetDiskPrediction() []*DiskPrediction {
	if x != nil {
		return x.DiskPrediction
	}
	return nil
}

// 备份恢复检查信息相关消息
type BackupRestoreCheckInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int32 `protobuf:"varint,1,opt,name=Limit,proto3" json:"Limit,omitempty"` // 限制返回记录数，默认100
}

func (x *BackupRestoreCheckInfoReq) Reset() {
	*x = BackupRestoreCheckInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRestoreCheckInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRestoreCheckInfoReq) ProtoMessage() {}

func (x *BackupRestoreCheckInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRestoreCheckInfoReq.ProtoReflect.Descriptor instead.
func (*BackupRestoreCheckInfoReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{63}
}

func (x *BackupRestoreCheckInfoReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type BackupRestoreCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CheckSeq    string `protobuf:"bytes,2,opt,name=CheckSeq,proto3" json:"CheckSeq,omitempty"`
	CheckDb     string `protobuf:"bytes,3,opt,name=CheckDb,proto3" json:"CheckDb,omitempty"`
	CheckStatus string `protobuf:"bytes,4,opt,name=CheckStatus,proto3" json:"CheckStatus,omitempty"`
	CheckResult string `protobuf:"bytes,5,opt,name=CheckResult,proto3" json:"CheckResult,omitempty"`
	CheckTime   string `protobuf:"bytes,6,opt,name=CheckTime,proto3" json:"CheckTime,omitempty"`
}

func (x *BackupRestoreCheckInfo) Reset() {
	*x = BackupRestoreCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRestoreCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRestoreCheckInfo) ProtoMessage() {}

func (x *BackupRestoreCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRestoreCheckInfo.ProtoReflect.Descriptor instead.
func (*BackupRestoreCheckInfo) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{64}
}

func (x *BackupRestoreCheckInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BackupRestoreCheckInfo) GetCheckSeq() string {
	if x != nil {
		return x.CheckSeq
	}
	return ""
}

func (x *BackupRestoreCheckInfo) GetCheckDb() string {
	if x != nil {
		return x.CheckDb
	}
	return ""
}

func (x *BackupRestoreCheckInfo) GetCheckStatus() string {
	if x != nil {
		return x.CheckStatus
	}
	return ""
}

func (x *BackupRestoreCheckInfo) GetCheckResult() string {
	if x != nil {
		return x.CheckResult
	}
	return ""
}

func (x *BackupRestoreCheckInfo) GetCheckTime() string {
	if x != nil {
		return x.CheckTime
	}
	return ""
}

type BackupRestoreCheckInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success                bool                      `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message                string                    `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	BackupRestoreCheckInfo []*BackupRestoreCheckInfo `protobuf:"bytes,3,rep,name=BackupRestoreCheckInfo,proto3" json:"BackupRestoreCheckInfo,omitempty"`
}

func (x *BackupRestoreCheckInfoResp) Reset() {
	*x = BackupRestoreCheckInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRestoreCheckInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRestoreCheckInfoResp) ProtoMessage() {}

func (x *BackupRestoreCheckInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRestoreCheckInfoResp.ProtoReflect.Descriptor instead.
func (*BackupRestoreCheckInfoResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{65}
}

func (x *BackupRestoreCheckInfoResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BackupRestoreCheckInfoResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BackupRestoreCheckInfoResp) GetBackupRestoreCheckInfo() []*BackupRestoreCheckInfo {
	if x != nil {
		return x.BackupRestoreCheckInfo
	}
	return nil
}

// 集群确认摘要相关消息
type ClusterConfirmSummaryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Days int32 `protobuf:"varint,1,opt,name=Days,proto3" json:"Days,omitempty"` // 查询最近多少天的数据，默认7天
}

func (x *ClusterConfirmSummaryReq) Reset() {
	*x = ClusterConfirmSummaryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfirmSummaryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfirmSummaryReq) ProtoMessage() {}

func (x *ClusterConfirmSummaryReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfirmSummaryReq.ProtoReflect.Descriptor instead.
func (*ClusterConfirmSummaryReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{66}
}

func (x *ClusterConfirmSummaryReq) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type ClusterConfirmSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportFileURL string `protobuf:"bytes,1,opt,name=ReportFileURL,proto3" json:"ReportFileURL,omitempty"`
	PluginResults string `protobuf:"bytes,2,opt,name=PluginResults,proto3" json:"PluginResults,omitempty"` // JSON字符串格式的插件执行结果
}

func (x *ClusterConfirmSummary) Reset() {
	*x = ClusterConfirmSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfirmSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfirmSummary) ProtoMessage() {}

func (x *ClusterConfirmSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfirmSummary.ProtoReflect.Descriptor instead.
func (*ClusterConfirmSummary) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{67}
}

func (x *ClusterConfirmSummary) GetReportFileURL() string {
	if x != nil {
		return x.ReportFileURL
	}
	return ""
}

func (x *ClusterConfirmSummary) GetPluginResults() string {
	if x != nil {
		return x.PluginResults
	}
	return ""
}

type ClusterConfirmSummaryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success               bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message               string                 `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ClusterConfirmSummary *ClusterConfirmSummary `protobuf:"bytes,3,opt,name=ClusterConfirmSummary,proto3" json:"ClusterConfirmSummary,omitempty"`
}

func (x *ClusterConfirmSummaryResp) Reset() {
	*x = ClusterConfirmSummaryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfirmSummaryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfirmSummaryResp) ProtoMessage() {}

func (x *ClusterConfirmSummaryResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfirmSummaryResp.ProtoReflect.Descriptor instead.
func (*ClusterConfirmSummaryResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{68}
}

func (x *ClusterConfirmSummaryResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ClusterConfirmSummaryResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ClusterConfirmSummaryResp) GetClusterConfirmSummary() *ClusterConfirmSummary {
	if x != nil {
		return x.ClusterConfirmSummary
	}
	return nil
}

// 同步集群组相关消息
type SyncClusterGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncClusterGroupsReq) Reset() {
	*x = SyncClusterGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncClusterGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncClusterGroupsReq) ProtoMessage() {}

func (x *SyncClusterGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncClusterGroupsReq.ProtoReflect.Descriptor instead.
func (*SyncClusterGroupsReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{69}
}

// 数据库类型同步详情
type DatabaseSyncDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseType  string   `protobuf:"bytes,1,opt,name=DatabaseType,proto3" json:"DatabaseType,omitempty"`   // 数据库类型（mysql, mssql, tidb, goldendb）
	SyncedCount   int32    `protobuf:"varint,2,opt,name=SyncedCount,proto3" json:"SyncedCount,omitempty"`    // 该类型同步的记录数
	ClusterGroups []string `protobuf:"bytes,3,rep,name=ClusterGroups,proto3" json:"ClusterGroups,omitempty"` // 同步的集群组列表
}

func (x *DatabaseSyncDetail) Reset() {
	*x = DatabaseSyncDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseSyncDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSyncDetail) ProtoMessage() {}

func (x *DatabaseSyncDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSyncDetail.ProtoReflect.Descriptor instead.
func (*DatabaseSyncDetail) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{70}
}

func (x *DatabaseSyncDetail) GetDatabaseType() string {
	if x != nil {
		return x.DatabaseType
	}
	return ""
}

func (x *DatabaseSyncDetail) GetSyncedCount() int32 {
	if x != nil {
		return x.SyncedCount
	}
	return 0
}

func (x *DatabaseSyncDetail) GetClusterGroups() []string {
	if x != nil {
		return x.ClusterGroups
	}
	return nil
}

type SyncClusterGroupsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool                  `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message     string                `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	SyncedCount int32                 `protobuf:"varint,3,opt,name=SyncedCount,proto3" json:"SyncedCount,omitempty"` // 总同步记录数
	Details     []*DatabaseSyncDetail `protobuf:"bytes,4,rep,name=Details,proto3" json:"Details,omitempty"`          // 各数据库类型的详细同步信息
}

func (x *SyncClusterGroupsResp) Reset() {
	*x = SyncClusterGroupsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncClusterGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncClusterGroupsResp) ProtoMessage() {}

func (x *SyncClusterGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncClusterGroupsResp.ProtoReflect.Descriptor instead.
func (*SyncClusterGroupsResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{71}
}

func (x *SyncClusterGroupsResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SyncClusterGroupsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SyncClusterGroupsResp) GetSyncedCount() int32 {
	if x != nil {
		return x.SyncedCount
	}
	return 0
}

func (x *SyncClusterGroupsResp) GetDetails() []*DatabaseSyncDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type LoadServerMetricsCSVReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileContent []byte `protobuf:"bytes,1,opt,name=FileContent,proto3" json:"FileContent,omitempty"`
	Filename    string `protobuf:"bytes,2,opt,name=Filename,proto3" json:"Filename,omitempty"`
}

func (x *LoadServerMetricsCSVReq) Reset() {
	*x = LoadServerMetricsCSVReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadServerMetricsCSVReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadServerMetricsCSVReq) ProtoMessage() {}

func (x *LoadServerMetricsCSVReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadServerMetricsCSVReq.ProtoReflect.Descriptor instead.
func (*LoadServerMetricsCSVReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{72}
}

func (x *LoadServerMetricsCSVReq) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *LoadServerMetricsCSVReq) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type LoadServerMetricsCSVProgressResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success            bool    `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message            string  `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	TotalRows          int32   `protobuf:"varint,3,opt,name=TotalRows,proto3" json:"TotalRows,omitempty"`
	ProcessedRows      int32   `protobuf:"varint,4,opt,name=ProcessedRows,proto3" json:"ProcessedRows,omitempty"`
	ProgressPercentage float32 `protobuf:"fixed32,5,opt,name=ProgressPercentage,proto3" json:"ProgressPercentage,omitempty"`
	IsCompleted        bool    `protobuf:"varint,6,opt,name=IsCompleted,proto3" json:"IsCompleted,omitempty"`
	ErrorDetail        string  `protobuf:"bytes,7,opt,name=ErrorDetail,proto3" json:"ErrorDetail,omitempty"`
	ErrorLine          int32   `protobuf:"varint,8,opt,name=ErrorLine,proto3" json:"ErrorLine,omitempty"`
	LastUpdatedTime    string  `protobuf:"bytes,9,opt,name=LastUpdatedTime,proto3" json:"LastUpdatedTime,omitempty"`
}

func (x *LoadServerMetricsCSVProgressResp) Reset() {
	*x = LoadServerMetricsCSVProgressResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadServerMetricsCSVProgressResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadServerMetricsCSVProgressResp) ProtoMessage() {}

func (x *LoadServerMetricsCSVProgressResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadServerMetricsCSVProgressResp.ProtoReflect.Descriptor instead.
func (*LoadServerMetricsCSVProgressResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{73}
}

func (x *LoadServerMetricsCSVProgressResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LoadServerMetricsCSVProgressResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LoadServerMetricsCSVProgressResp) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *LoadServerMetricsCSVProgressResp) GetProcessedRows() int32 {
	if x != nil {
		return x.ProcessedRows
	}
	return 0
}

func (x *LoadServerMetricsCSVProgressResp) GetProgressPercentage() float32 {
	if x != nil {
		return x.ProgressPercentage
	}
	return 0
}

func (x *LoadServerMetricsCSVProgressResp) GetIsCompleted() bool {
	if x != nil {
		return x.IsCompleted
	}
	return false
}

func (x *LoadServerMetricsCSVProgressResp) GetErrorDetail() string {
	if x != nil {
		return x.ErrorDetail
	}
	return ""
}

func (x *LoadServerMetricsCSVProgressResp) GetErrorLine() int32 {
	if x != nil {
		return x.ErrorLine
	}
	return 0
}

func (x *LoadServerMetricsCSVProgressResp) GetLastUpdatedTime() string {
	if x != nil {
		return x.LastUpdatedTime
	}
	return ""
}

// 监控数据核对相关消息
type VerifyMonitoringDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string `protobuf:"bytes,1,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime   string `protobuf:"bytes,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (x *VerifyMonitoringDataReq) Reset() {
	*x = VerifyMonitoringDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMonitoringDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMonitoringDataReq) ProtoMessage() {}

func (x *VerifyMonitoringDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMonitoringDataReq.ProtoReflect.Descriptor instead.
func (*VerifyMonitoringDataReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{74}
}

func (x *VerifyMonitoringDataReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *VerifyMonitoringDataReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type HostWithoutMonitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIp     string `protobuf:"bytes,1,opt,name=HostIp,proto3" json:"HostIp,omitempty"`
	HostName   string `protobuf:"bytes,2,opt,name=HostName,proto3" json:"HostName,omitempty"`
	PoolName   string `protobuf:"bytes,3,opt,name=PoolName,proto3" json:"PoolName,omitempty"`
	CreateTime string `protobuf:"bytes,4,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
}

func (x *HostWithoutMonitoring) Reset() {
	*x = HostWithoutMonitoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostWithoutMonitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostWithoutMonitoring) ProtoMessage() {}

func (x *HostWithoutMonitoring) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostWithoutMonitoring.ProtoReflect.Descriptor instead.
func (*HostWithoutMonitoring) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{75}
}

func (x *HostWithoutMonitoring) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *HostWithoutMonitoring) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *HostWithoutMonitoring) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *HostWithoutMonitoring) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type VerifyMonitoringDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success                    bool                     `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message                    string                   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	TotalHosts                 int32                    `protobuf:"varint,3,opt,name=TotalHosts,proto3" json:"TotalHosts,omitempty"`
	HostsWithMonitoring        int32                    `protobuf:"varint,4,opt,name=HostsWithMonitoring,proto3" json:"HostsWithMonitoring,omitempty"`
	HostsWithoutMonitoring     int32                    `protobuf:"varint,5,opt,name=HostsWithoutMonitoring,proto3" json:"HostsWithoutMonitoring,omitempty"`
	MonitoringCoverage         float32                  `protobuf:"fixed32,6,opt,name=MonitoringCoverage,proto3" json:"MonitoringCoverage,omitempty"`
	HostsWithoutMonitoringList []*HostWithoutMonitoring `protobuf:"bytes,7,rep,name=HostsWithoutMonitoringList,proto3" json:"HostsWithoutMonitoringList,omitempty"`
}

func (x *VerifyMonitoringDataResp) Reset() {
	*x = VerifyMonitoringDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMonitoringDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMonitoringDataResp) ProtoMessage() {}

func (x *VerifyMonitoringDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMonitoringDataResp.ProtoReflect.Descriptor instead.
func (*VerifyMonitoringDataResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{76}
}

func (x *VerifyMonitoringDataResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VerifyMonitoringDataResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VerifyMonitoringDataResp) GetTotalHosts() int32 {
	if x != nil {
		return x.TotalHosts
	}
	return 0
}

func (x *VerifyMonitoringDataResp) GetHostsWithMonitoring() int32 {
	if x != nil {
		return x.HostsWithMonitoring
	}
	return 0
}

func (x *VerifyMonitoringDataResp) GetHostsWithoutMonitoring() int32 {
	if x != nil {
		return x.HostsWithoutMonitoring
	}
	return 0
}

func (x *VerifyMonitoringDataResp) GetMonitoringCoverage() float32 {
	if x != nil {
		return x.MonitoringCoverage
	}
	return 0
}

func (x *VerifyMonitoringDataResp) GetHostsWithoutMonitoringList() []*HostWithoutMonitoring {
	if x != nil {
		return x.HostsWithoutMonitoringList
	}
	return nil
}

// 硬件资源验证相关消息
type HardwareResourceVerificationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIpList     []string `protobuf:"bytes,1,rep,name=HostIpList,proto3" json:"HostIpList,omitempty"`          // 目标主机IP列表
	ResourceType   string   `protobuf:"bytes,2,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"`      // 资源类型: cpu, memory, disk
	TargetPercent  int32    `protobuf:"varint,3,opt,name=TargetPercent,proto3" json:"TargetPercent,omitempty"`   // 目标资源占用百分比
	Duration       int32    `protobuf:"varint,4,opt,name=Duration,proto3" json:"Duration,omitempty"`             // 执行持续时间（秒），默认300秒
	ScriptParams   string   `protobuf:"bytes,5,opt,name=ScriptParams,proto3" json:"ScriptParams,omitempty"`      // 额外的脚本参数（JSON格式）
	ForceExecution bool     `protobuf:"varint,6,opt,name=ForceExecution,proto3" json:"ForceExecution,omitempty"` // 强制执行：true=终止旧任务并执行新任务，false=跳过有冲突的主机
}

func (x *HardwareResourceVerificationReq) Reset() {
	*x = HardwareResourceVerificationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareResourceVerificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareResourceVerificationReq) ProtoMessage() {}

func (x *HardwareResourceVerificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareResourceVerificationReq.ProtoReflect.Descriptor instead.
func (*HardwareResourceVerificationReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{77}
}

func (x *HardwareResourceVerificationReq) GetHostIpList() []string {
	if x != nil {
		return x.HostIpList
	}
	return nil
}

func (x *HardwareResourceVerificationReq) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *HardwareResourceVerificationReq) GetTargetPercent() int32 {
	if x != nil {
		return x.TargetPercent
	}
	return 0
}

func (x *HardwareResourceVerificationReq) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *HardwareResourceVerificationReq) GetScriptParams() string {
	if x != nil {
		return x.ScriptParams
	}
	return ""
}

func (x *HardwareResourceVerificationReq) GetForceExecution() bool {
	if x != nil {
		return x.ForceExecution
	}
	return false
}

type HardwareResourceVerificationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	TaskId  string `protobuf:"bytes,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"` // 任务ID，用于跟踪任务状态
}

func (x *HardwareResourceVerificationResp) Reset() {
	*x = HardwareResourceVerificationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareResourceVerificationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareResourceVerificationResp) ProtoMessage() {}

func (x *HardwareResourceVerificationResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareResourceVerificationResp.ProtoReflect.Descriptor instead.
func (*HardwareResourceVerificationResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{78}
}

func (x *HardwareResourceVerificationResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *HardwareResourceVerificationResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HardwareResourceVerificationResp) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetHardwareResourceVerificationStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIpList   []string `protobuf:"bytes,1,rep,name=HostIpList,proto3" json:"HostIpList,omitempty"`     // 主机IP列表，空则返回所有
	ResourceType string   `protobuf:"bytes,2,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"` // 资源类型过滤，空则返回所有类型
}

func (x *GetHardwareResourceVerificationStatusReq) Reset() {
	*x = GetHardwareResourceVerificationStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHardwareResourceVerificationStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardwareResourceVerificationStatusReq) ProtoMessage() {}

func (x *GetHardwareResourceVerificationStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardwareResourceVerificationStatusReq.ProtoReflect.Descriptor instead.
func (*GetHardwareResourceVerificationStatusReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{79}
}

func (x *GetHardwareResourceVerificationStatusReq) GetHostIpList() []string {
	if x != nil {
		return x.HostIpList
	}
	return nil
}

func (x *GetHardwareResourceVerificationStatusReq) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

type HardwareResourceVerificationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TaskId          string `protobuf:"bytes,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	HostIp          string `protobuf:"bytes,3,opt,name=HostIp,proto3" json:"HostIp,omitempty"`
	ResourceType    string `protobuf:"bytes,4,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"`
	TargetPercent   int32  `protobuf:"varint,5,opt,name=TargetPercent,proto3" json:"TargetPercent,omitempty"`
	Duration        int32  `protobuf:"varint,6,opt,name=Duration,proto3" json:"Duration,omitempty"`
	ExecutionStatus string `protobuf:"bytes,7,opt,name=ExecutionStatus,proto3" json:"ExecutionStatus,omitempty"` // pending, running, completed, failed
	StartTime       string `protobuf:"bytes,8,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime         string `protobuf:"bytes,9,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	ExitCode        int32  `protobuf:"varint,10,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
	ResultSummary   string `protobuf:"bytes,11,opt,name=ResultSummary,proto3" json:"ResultSummary,omitempty"` // JSON格式的结果摘要
	CreateTime      string `protobuf:"bytes,12,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	SSHError        string `protobuf:"bytes,13,opt,name=SSHError,proto3" json:"SSHError,omitempty"`
}

func (x *HardwareResourceVerificationStatus) Reset() {
	*x = HardwareResourceVerificationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareResourceVerificationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareResourceVerificationStatus) ProtoMessage() {}

func (x *HardwareResourceVerificationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareResourceVerificationStatus.ProtoReflect.Descriptor instead.
func (*HardwareResourceVerificationStatus) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{80}
}

func (x *HardwareResourceVerificationStatus) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HardwareResourceVerificationStatus) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *HardwareResourceVerificationStatus) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *HardwareResourceVerificationStatus) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *HardwareResourceVerificationStatus) GetTargetPercent() int32 {
	if x != nil {
		return x.TargetPercent
	}
	return 0
}

func (x *HardwareResourceVerificationStatus) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *HardwareResourceVerificationStatus) GetExecutionStatus() string {
	if x != nil {
		return x.ExecutionStatus
	}
	return ""
}

func (x *HardwareResourceVerificationStatus) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *HardwareResourceVerificationStatus) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *HardwareResourceVerificationStatus) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *HardwareResourceVerificationStatus) GetResultSummary() string {
	if x != nil {
		return x.ResultSummary
	}
	return ""
}

func (x *HardwareResourceVerificationStatus) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *HardwareResourceVerificationStatus) GetSSHError() string {
	if x != nil {
		return x.SSHError
	}
	return ""
}

type GetHardwareResourceVerificationStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success             bool                                  `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message             string                                `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	VerificationRecords []*HardwareResourceVerificationStatus `protobuf:"bytes,3,rep,name=VerificationRecords,proto3" json:"VerificationRecords,omitempty"`
}

func (x *GetHardwareResourceVerificationStatusResp) Reset() {
	*x = GetHardwareResourceVerificationStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHardwareResourceVerificationStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardwareResourceVerificationStatusResp) ProtoMessage() {}

func (x *GetHardwareResourceVerificationStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardwareResourceVerificationStatusResp.ProtoReflect.Descriptor instead.
func (*GetHardwareResourceVerificationStatusResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{81}
}

func (x *GetHardwareResourceVerificationStatusResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetHardwareResourceVerificationStatusResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetHardwareResourceVerificationStatusResp) GetVerificationRecords() []*HardwareResourceVerificationStatus {
	if x != nil {
		return x.VerificationRecords
	}
	return nil
}

type GetHardwareResourceVerificationHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIp       string `protobuf:"bytes,1,opt,name=HostIp,proto3" json:"HostIp,omitempty"`             // 指定主机IP
	ResourceType string `protobuf:"bytes,2,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"` // 资源类型过滤，空则返回所有类型
	Limit        int32  `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`              // 限制返回记录数，默认50
}

func (x *GetHardwareResourceVerificationHistoryReq) Reset() {
	*x = GetHardwareResourceVerificationHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHardwareResourceVerificationHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardwareResourceVerificationHistoryReq) ProtoMessage() {}

func (x *GetHardwareResourceVerificationHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardwareResourceVerificationHistoryReq.ProtoReflect.Descriptor instead.
func (*GetHardwareResourceVerificationHistoryReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{82}
}

func (x *GetHardwareResourceVerificationHistoryReq) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *GetHardwareResourceVerificationHistoryReq) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *GetHardwareResourceVerificationHistoryReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type HardwareResourceVerificationHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TaskId          string `protobuf:"bytes,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	HostIp          string `protobuf:"bytes,3,opt,name=HostIp,proto3" json:"HostIp,omitempty"`
	ResourceType    string `protobuf:"bytes,4,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"`
	TargetPercent   int32  `protobuf:"varint,5,opt,name=TargetPercent,proto3" json:"TargetPercent,omitempty"`
	Duration        int32  `protobuf:"varint,6,opt,name=Duration,proto3" json:"Duration,omitempty"`
	ExecutionStatus string `protobuf:"bytes,7,opt,name=ExecutionStatus,proto3" json:"ExecutionStatus,omitempty"`
	StartTime       string `protobuf:"bytes,8,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime         string `protobuf:"bytes,9,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	ExitCode        int32  `protobuf:"varint,10,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
	StdoutLog       string `protobuf:"bytes,11,opt,name=StdoutLog,proto3" json:"StdoutLog,omitempty"`
	StderrLog       string `protobuf:"bytes,12,opt,name=StderrLog,proto3" json:"StderrLog,omitempty"`
	ResultSummary   string `protobuf:"bytes,13,opt,name=ResultSummary,proto3" json:"ResultSummary,omitempty"`
	CreateTime      string `protobuf:"bytes,14,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	SSHError        string `protobuf:"bytes,15,opt,name=SSHError,proto3" json:"SSHError,omitempty"`
}

func (x *HardwareResourceVerificationHistory) Reset() {
	*x = HardwareResourceVerificationHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareResourceVerificationHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareResourceVerificationHistory) ProtoMessage() {}

func (x *HardwareResourceVerificationHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareResourceVerificationHistory.ProtoReflect.Descriptor instead.
func (*HardwareResourceVerificationHistory) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{83}
}

func (x *HardwareResourceVerificationHistory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HardwareResourceVerificationHistory) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *HardwareResourceVerificationHistory) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *HardwareResourceVerificationHistory) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *HardwareResourceVerificationHistory) GetTargetPercent() int32 {
	if x != nil {
		return x.TargetPercent
	}
	return 0
}

func (x *HardwareResourceVerificationHistory) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *HardwareResourceVerificationHistory) GetExecutionStatus() string {
	if x != nil {
		return x.ExecutionStatus
	}
	return ""
}

func (x *HardwareResourceVerificationHistory) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *HardwareResourceVerificationHistory) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *HardwareResourceVerificationHistory) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *HardwareResourceVerificationHistory) GetStdoutLog() string {
	if x != nil {
		return x.StdoutLog
	}
	return ""
}

func (x *HardwareResourceVerificationHistory) GetStderrLog() string {
	if x != nil {
		return x.StderrLog
	}
	return ""
}

func (x *HardwareResourceVerificationHistory) GetResultSummary() string {
	if x != nil {
		return x.ResultSummary
	}
	return ""
}

func (x *HardwareResourceVerificationHistory) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *HardwareResourceVerificationHistory) GetSSHError() string {
	if x != nil {
		return x.SSHError
	}
	return ""
}

type GetHardwareResourceVerificationHistoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool                                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message        string                                 `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	HistoryRecords []*HardwareResourceVerificationHistory `protobuf:"bytes,3,rep,name=HistoryRecords,proto3" json:"HistoryRecords,omitempty"`
}

func (x *GetHardwareResourceVerificationHistoryResp) Reset() {
	*x = GetHardwareResourceVerificationHistoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHardwareResourceVerificationHistoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardwareResourceVerificationHistoryResp) ProtoMessage() {}

func (x *GetHardwareResourceVerificationHistoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardwareResourceVerificationHistoryResp.ProtoReflect.Descriptor instead.
func (*GetHardwareResourceVerificationHistoryResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{84}
}

func (x *GetHardwareResourceVerificationHistoryResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetHardwareResourceVerificationHistoryResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetHardwareResourceVerificationHistoryResp) GetHistoryRecords() []*HardwareResourceVerificationHistory {
	if x != nil {
		return x.HistoryRecords
	}
	return nil
}

// 用户认证相关消息类型
type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	LoginSource string `protobuf:"bytes,3,opt,name=LoginSource,proto3" json:"LoginSource,omitempty"` // "local" 或 "cas"
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{85}
}

func (x *LoginReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginReq) GetLoginSource() string {
	if x != nil {
		return x.LoginSource
	}
	return ""
}

type LoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool      `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message  string    `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Token    string    `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	UserInfo *UserInfo `protobuf:"bytes,4,opt,name=UserInfo,proto3" json:"UserInfo,omitempty"`
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{86}
}

func (x *LoginResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LoginResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LoginResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginResp) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Username    string `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Email       string `protobuf:"bytes,3,opt,name=Email,proto3" json:"Email,omitempty"`
	DisplayName string `protobuf:"bytes,4,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
	IsActive    bool   `protobuf:"varint,5,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	IsAdmin     bool   `protobuf:"varint,6,opt,name=IsAdmin,proto3" json:"IsAdmin,omitempty"`
	LoginSource string `protobuf:"bytes,7,opt,name=LoginSource,proto3" json:"LoginSource,omitempty"`
	LastLoginAt string `protobuf:"bytes,8,opt,name=LastLoginAt,proto3" json:"LastLoginAt,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{87}
}

func (x *UserInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserInfo) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *UserInfo) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *UserInfo) GetLoginSource() string {
	if x != nil {
		return x.LoginSource
	}
	return ""
}

func (x *UserInfo) GetLastLoginAt() string {
	if x != nil {
		return x.LastLoginAt
	}
	return ""
}

type ValidateTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *ValidateTokenReq) Reset() {
	*x = ValidateTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTokenReq) ProtoMessage() {}

func (x *ValidateTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTokenReq.ProtoReflect.Descriptor instead.
func (*ValidateTokenReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{88}
}

func (x *ValidateTokenReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ValidateTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid    bool      `protobuf:"varint,1,opt,name=Valid,proto3" json:"Valid,omitempty"`
	UserInfo *UserInfo `protobuf:"bytes,2,opt,name=UserInfo,proto3" json:"UserInfo,omitempty"`
	Message  string    `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ValidateTokenResp) Reset() {
	*x = ValidateTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTokenResp) ProtoMessage() {}

func (x *ValidateTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTokenResp.ProtoReflect.Descriptor instead.
func (*ValidateTokenResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{89}
}

func (x *ValidateTokenResp) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ValidateTokenResp) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ValidateTokenResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type LogoutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *LogoutReq) Reset() {
	*x = LogoutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutReq) ProtoMessage() {}

func (x *LogoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutReq.ProtoReflect.Descriptor instead.
func (*LogoutReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{90}
}

func (x *LogoutReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type LogoutResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *LogoutResp) Reset() {
	*x = LogoutResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResp) ProtoMessage() {}

func (x *LogoutResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResp.ProtoReflect.Descriptor instead.
func (*LogoutResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{91}
}

func (x *LogoutResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LogoutResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Email       string `protobuf:"bytes,3,opt,name=Email,proto3" json:"Email,omitempty"`
	DisplayName string `protobuf:"bytes,4,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
	IsAdmin     bool   `protobuf:"varint,5,opt,name=IsAdmin,proto3" json:"IsAdmin,omitempty"`
	LoginSource string `protobuf:"bytes,6,opt,name=LoginSource,proto3" json:"LoginSource,omitempty"`
}

func (x *CreateUserReq) Reset() {
	*x = CreateUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserReq) ProtoMessage() {}

func (x *CreateUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserReq.ProtoReflect.Descriptor instead.
func (*CreateUserReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{92}
}

func (x *CreateUserReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateUserReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateUserReq) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateUserReq) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *CreateUserReq) GetLoginSource() string {
	if x != nil {
		return x.LoginSource
	}
	return ""
}

type CreateUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	UserId  int64  `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *CreateUserResp) Reset() {
	*x = CreateUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResp) ProtoMessage() {}

func (x *CreateUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResp.ProtoReflect.Descriptor instead.
func (*CreateUserResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{93}
}

func (x *CreateUserResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateUserResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateUserResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 定时任务相关消息类型
type CreateScheduledTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName       string   `protobuf:"bytes,1,opt,name=TaskName,proto3" json:"TaskName,omitempty"`              // 任务名称
	Description    string   `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`        // 任务描述
	CronExpression string   `protobuf:"bytes,3,opt,name=CronExpression,proto3" json:"CronExpression,omitempty"`  // Cron表达式
	HostIpList     []string `protobuf:"bytes,4,rep,name=HostIpList,proto3" json:"HostIpList,omitempty"`          // 主机IP列表
	ResourceType   string   `protobuf:"bytes,5,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"`      // 资源类型: cpu, memory, disk
	TargetPercent  int32    `protobuf:"varint,6,opt,name=TargetPercent,proto3" json:"TargetPercent,omitempty"`   // 目标百分比
	Duration       int32    `protobuf:"varint,7,opt,name=Duration,proto3" json:"Duration,omitempty"`             // 执行持续时间（秒）
	ScriptParams   string   `protobuf:"bytes,8,opt,name=ScriptParams,proto3" json:"ScriptParams,omitempty"`      // 脚本参数（JSON格式）
	ForceExecution bool     `protobuf:"varint,9,opt,name=ForceExecution,proto3" json:"ForceExecution,omitempty"` // 是否强制执行
	CreatedBy      string   `protobuf:"bytes,10,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`           // 创建者
}

func (x *CreateScheduledTaskReq) Reset() {
	*x = CreateScheduledTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScheduledTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScheduledTaskReq) ProtoMessage() {}

func (x *CreateScheduledTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScheduledTaskReq.ProtoReflect.Descriptor instead.
func (*CreateScheduledTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{94}
}

func (x *CreateScheduledTaskReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CreateScheduledTaskReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateScheduledTaskReq) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *CreateScheduledTaskReq) GetHostIpList() []string {
	if x != nil {
		return x.HostIpList
	}
	return nil
}

func (x *CreateScheduledTaskReq) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *CreateScheduledTaskReq) GetTargetPercent() int32 {
	if x != nil {
		return x.TargetPercent
	}
	return 0
}

func (x *CreateScheduledTaskReq) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CreateScheduledTaskReq) GetScriptParams() string {
	if x != nil {
		return x.ScriptParams
	}
	return ""
}

func (x *CreateScheduledTaskReq) GetForceExecution() bool {
	if x != nil {
		return x.ForceExecution
	}
	return false
}

func (x *CreateScheduledTaskReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type CreateScheduledTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	TaskId  int64  `protobuf:"varint,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *CreateScheduledTaskResp) Reset() {
	*x = CreateScheduledTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScheduledTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScheduledTaskResp) ProtoMessage() {}

func (x *CreateScheduledTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScheduledTaskResp.ProtoReflect.Descriptor instead.
func (*CreateScheduledTaskResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{95}
}

func (x *CreateScheduledTaskResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateScheduledTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateScheduledTaskResp) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type UpdateScheduledTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                          // 任务ID
	TaskName       string   `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`               // 任务名称
	Description    string   `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`         // 任务描述
	CronExpression string   `protobuf:"bytes,4,opt,name=CronExpression,proto3" json:"CronExpression,omitempty"`   // Cron表达式
	HostIpList     []string `protobuf:"bytes,5,rep,name=HostIpList,proto3" json:"HostIpList,omitempty"`           // 主机IP列表
	ResourceType   string   `protobuf:"bytes,6,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"`       // 资源类型
	TargetPercent  int32    `protobuf:"varint,7,opt,name=TargetPercent,proto3" json:"TargetPercent,omitempty"`    // 目标百分比
	Duration       int32    `protobuf:"varint,8,opt,name=Duration,proto3" json:"Duration,omitempty"`              // 执行持续时间（秒）
	ScriptParams   string   `protobuf:"bytes,9,opt,name=ScriptParams,proto3" json:"ScriptParams,omitempty"`       // 脚本参数（JSON格式）
	ForceExecution bool     `protobuf:"varint,10,opt,name=ForceExecution,proto3" json:"ForceExecution,omitempty"` // 是否强制执行
}

func (x *UpdateScheduledTaskReq) Reset() {
	*x = UpdateScheduledTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScheduledTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledTaskReq) ProtoMessage() {}

func (x *UpdateScheduledTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledTaskReq.ProtoReflect.Descriptor instead.
func (*UpdateScheduledTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{96}
}

func (x *UpdateScheduledTaskReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateScheduledTaskReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpdateScheduledTaskReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateScheduledTaskReq) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *UpdateScheduledTaskReq) GetHostIpList() []string {
	if x != nil {
		return x.HostIpList
	}
	return nil
}

func (x *UpdateScheduledTaskReq) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *UpdateScheduledTaskReq) GetTargetPercent() int32 {
	if x != nil {
		return x.TargetPercent
	}
	return 0
}

func (x *UpdateScheduledTaskReq) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UpdateScheduledTaskReq) GetScriptParams() string {
	if x != nil {
		return x.ScriptParams
	}
	return ""
}

func (x *UpdateScheduledTaskReq) GetForceExecution() bool {
	if x != nil {
		return x.ForceExecution
	}
	return false
}

type UpdateScheduledTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *UpdateScheduledTaskResp) Reset() {
	*x = UpdateScheduledTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScheduledTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledTaskResp) ProtoMessage() {}

func (x *UpdateScheduledTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledTaskResp.ProtoReflect.Descriptor instead.
func (*UpdateScheduledTaskResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{97}
}

func (x *UpdateScheduledTaskResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateScheduledTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteScheduledTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"` // 任务ID
}

func (x *DeleteScheduledTaskReq) Reset() {
	*x = DeleteScheduledTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScheduledTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScheduledTaskReq) ProtoMessage() {}

func (x *DeleteScheduledTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScheduledTaskReq.ProtoReflect.Descriptor instead.
func (*DeleteScheduledTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{98}
}

func (x *DeleteScheduledTaskReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteScheduledTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *DeleteScheduledTaskResp) Reset() {
	*x = DeleteScheduledTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScheduledTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScheduledTaskResp) ProtoMessage() {}

func (x *DeleteScheduledTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScheduledTaskResp.ProtoReflect.Descriptor instead.
func (*DeleteScheduledTaskResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{99}
}

func (x *DeleteScheduledTaskResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteScheduledTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetScheduledTasksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string `protobuf:"bytes,1,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"` // 资源类型过滤，空则返回所有
	EnabledOnly  bool   `protobuf:"varint,2,opt,name=EnabledOnly,proto3" json:"EnabledOnly,omitempty"`  // 是否只返回启用的任务
}

func (x *GetScheduledTasksReq) Reset() {
	*x = GetScheduledTasksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduledTasksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledTasksReq) ProtoMessage() {}

func (x *GetScheduledTasksReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledTasksReq.ProtoReflect.Descriptor instead.
func (*GetScheduledTasksReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{100}
}

func (x *GetScheduledTasksReq) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *GetScheduledTasksReq) GetEnabledOnly() bool {
	if x != nil {
		return x.EnabledOnly
	}
	return false
}

type ScheduledTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TaskName          string `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	Description       string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	CronExpression    string `protobuf:"bytes,4,opt,name=CronExpression,proto3" json:"CronExpression,omitempty"`
	HostIpList        string `protobuf:"bytes,5,opt,name=HostIpList,proto3" json:"HostIpList,omitempty"` // JSON格式的主机IP列表
	ResourceType      string `protobuf:"bytes,6,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"`
	TargetPercent     int32  `protobuf:"varint,7,opt,name=TargetPercent,proto3" json:"TargetPercent,omitempty"`
	Duration          int32  `protobuf:"varint,8,opt,name=Duration,proto3" json:"Duration,omitempty"`
	ScriptParams      string `protobuf:"bytes,9,opt,name=ScriptParams,proto3" json:"ScriptParams,omitempty"`
	ForceExecution    bool   `protobuf:"varint,10,opt,name=ForceExecution,proto3" json:"ForceExecution,omitempty"`
	IsEnabled         bool   `protobuf:"varint,11,opt,name=IsEnabled,proto3" json:"IsEnabled,omitempty"`
	CreatedBy         string `protobuf:"bytes,12,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	CreatedAt         string `protobuf:"bytes,13,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         string `protobuf:"bytes,14,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	LastExecutionTime string `protobuf:"bytes,15,opt,name=LastExecutionTime,proto3" json:"LastExecutionTime,omitempty"`
	NextExecutionTime string `protobuf:"bytes,16,opt,name=NextExecutionTime,proto3" json:"NextExecutionTime,omitempty"`
}

func (x *ScheduledTask) Reset() {
	*x = ScheduledTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledTask) ProtoMessage() {}

func (x *ScheduledTask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledTask.ProtoReflect.Descriptor instead.
func (*ScheduledTask) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{101}
}

func (x *ScheduledTask) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScheduledTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ScheduledTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScheduledTask) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *ScheduledTask) GetHostIpList() string {
	if x != nil {
		return x.HostIpList
	}
	return ""
}

func (x *ScheduledTask) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ScheduledTask) GetTargetPercent() int32 {
	if x != nil {
		return x.TargetPercent
	}
	return 0
}

func (x *ScheduledTask) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ScheduledTask) GetScriptParams() string {
	if x != nil {
		return x.ScriptParams
	}
	return ""
}

func (x *ScheduledTask) GetForceExecution() bool {
	if x != nil {
		return x.ForceExecution
	}
	return false
}

func (x *ScheduledTask) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *ScheduledTask) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ScheduledTask) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ScheduledTask) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ScheduledTask) GetLastExecutionTime() string {
	if x != nil {
		return x.LastExecutionTime
	}
	return ""
}

func (x *ScheduledTask) GetNextExecutionTime() string {
	if x != nil {
		return x.NextExecutionTime
	}
	return ""
}

type GetScheduledTasksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool             `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Tasks   []*ScheduledTask `protobuf:"bytes,3,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *GetScheduledTasksResp) Reset() {
	*x = GetScheduledTasksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduledTasksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledTasksResp) ProtoMessage() {}

func (x *GetScheduledTasksResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledTasksResp.ProtoReflect.Descriptor instead.
func (*GetScheduledTasksResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{102}
}

func (x *GetScheduledTasksResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetScheduledTasksResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetScheduledTasksResp) GetTasks() []*ScheduledTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type GetScheduledTaskDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"` // 任务ID
}

func (x *GetScheduledTaskDetailReq) Reset() {
	*x = GetScheduledTaskDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduledTaskDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledTaskDetailReq) ProtoMessage() {}

func (x *GetScheduledTaskDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledTaskDetailReq.ProtoReflect.Descriptor instead.
func (*GetScheduledTaskDetailReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{103}
}

func (x *GetScheduledTaskDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetScheduledTaskDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool           `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Task    *ScheduledTask `protobuf:"bytes,3,opt,name=Task,proto3" json:"Task,omitempty"`
}

func (x *GetScheduledTaskDetailResp) Reset() {
	*x = GetScheduledTaskDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduledTaskDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledTaskDetailResp) ProtoMessage() {}

func (x *GetScheduledTaskDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledTaskDetailResp.ProtoReflect.Descriptor instead.
func (*GetScheduledTaskDetailResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{104}
}

func (x *GetScheduledTaskDetailResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetScheduledTaskDetailResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetScheduledTaskDetailResp) GetTask() *ScheduledTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type EnableScheduledTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`               // 任务ID
	IsEnabled bool  `protobuf:"varint,2,opt,name=IsEnabled,proto3" json:"IsEnabled,omitempty"` // 是否启用
}

func (x *EnableScheduledTaskReq) Reset() {
	*x = EnableScheduledTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableScheduledTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableScheduledTaskReq) ProtoMessage() {}

func (x *EnableScheduledTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableScheduledTaskReq.ProtoReflect.Descriptor instead.
func (*EnableScheduledTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{105}
}

func (x *EnableScheduledTaskReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EnableScheduledTaskReq) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

type EnableScheduledTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *EnableScheduledTaskResp) Reset() {
	*x = EnableScheduledTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableScheduledTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableScheduledTaskResp) ProtoMessage() {}

func (x *EnableScheduledTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableScheduledTaskResp.ProtoReflect.Descriptor instead.
func (*EnableScheduledTaskResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{106}
}

func (x *EnableScheduledTaskResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EnableScheduledTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetScheduledTaskExecutionHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledTaskId int64 `protobuf:"varint,1,opt,name=ScheduledTaskId,proto3" json:"ScheduledTaskId,omitempty"` // 定时任务ID
	Limit           int32 `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`                     // 限制返回记录数，默认50
}

func (x *GetScheduledTaskExecutionHistoryReq) Reset() {
	*x = GetScheduledTaskExecutionHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduledTaskExecutionHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledTaskExecutionHistoryReq) ProtoMessage() {}

func (x *GetScheduledTaskExecutionHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledTaskExecutionHistoryReq.ProtoReflect.Descriptor instead.
func (*GetScheduledTaskExecutionHistoryReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{107}
}

func (x *GetScheduledTaskExecutionHistoryReq) GetScheduledTaskId() int64 {
	if x != nil {
		return x.ScheduledTaskId
	}
	return 0
}

func (x *GetScheduledTaskExecutionHistoryReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ScheduledTaskExecutionHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ScheduledTaskId int64                  `protobuf:"varint,2,opt,name=ScheduledTaskId,proto3" json:"ScheduledTaskId,omitempty"`
	ExecutionTaskId string                 `protobuf:"bytes,3,opt,name=ExecutionTaskId,proto3" json:"ExecutionTaskId,omitempty"`
	ExecutionTime   string                 `protobuf:"bytes,4,opt,name=ExecutionTime,proto3" json:"ExecutionTime,omitempty"`
	ExecutionStatus string                 `protobuf:"bytes,5,opt,name=ExecutionStatus,proto3" json:"ExecutionStatus,omitempty"` // success, failed, partial
	TotalHosts      int32                  `protobuf:"varint,6,opt,name=TotalHosts,proto3" json:"TotalHosts,omitempty"`
	SuccessHosts    int32                  `protobuf:"varint,7,opt,name=SuccessHosts,proto3" json:"SuccessHosts,omitempty"`
	FailedHosts     int32                  `protobuf:"varint,8,opt,name=FailedHosts,proto3" json:"FailedHosts,omitempty"`
	ErrorMessage    string                 `protobuf:"bytes,9,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	HostDetails     []*HostExecutionDetail `protobuf:"bytes,10,rep,name=HostDetails,proto3" json:"HostDetails,omitempty"` // 主机执行详情列表
}

func (x *ScheduledTaskExecutionHistory) Reset() {
	*x = ScheduledTaskExecutionHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledTaskExecutionHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledTaskExecutionHistory) ProtoMessage() {}

func (x *ScheduledTaskExecutionHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledTaskExecutionHistory.ProtoReflect.Descriptor instead.
func (*ScheduledTaskExecutionHistory) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{108}
}

func (x *ScheduledTaskExecutionHistory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScheduledTaskExecutionHistory) GetScheduledTaskId() int64 {
	if x != nil {
		return x.ScheduledTaskId
	}
	return 0
}

func (x *ScheduledTaskExecutionHistory) GetExecutionTaskId() string {
	if x != nil {
		return x.ExecutionTaskId
	}
	return ""
}

func (x *ScheduledTaskExecutionHistory) GetExecutionTime() string {
	if x != nil {
		return x.ExecutionTime
	}
	return ""
}

func (x *ScheduledTaskExecutionHistory) GetExecutionStatus() string {
	if x != nil {
		return x.ExecutionStatus
	}
	return ""
}

func (x *ScheduledTaskExecutionHistory) GetTotalHosts() int32 {
	if x != nil {
		return x.TotalHosts
	}
	return 0
}

func (x *ScheduledTaskExecutionHistory) GetSuccessHosts() int32 {
	if x != nil {
		return x.SuccessHosts
	}
	return 0
}

func (x *ScheduledTaskExecutionHistory) GetFailedHosts() int32 {
	if x != nil {
		return x.FailedHosts
	}
	return 0
}

func (x *ScheduledTaskExecutionHistory) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ScheduledTaskExecutionHistory) GetHostDetails() []*HostExecutionDetail {
	if x != nil {
		return x.HostDetails
	}
	return nil
}

// 主机执行详情
type HostExecutionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIp          string `protobuf:"bytes,1,opt,name=HostIp,proto3" json:"HostIp,omitempty"`                   // 主机IP
	ResourceType    string `protobuf:"bytes,2,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"`       // 资源类型: cpu, memory, disk
	TargetPercent   int32  `protobuf:"varint,3,opt,name=TargetPercent,proto3" json:"TargetPercent,omitempty"`    // 目标百分比
	Duration        int32  `protobuf:"varint,4,opt,name=Duration,proto3" json:"Duration,omitempty"`              // 执行持续时间（秒）
	ExecutionStatus string `protobuf:"bytes,5,opt,name=ExecutionStatus,proto3" json:"ExecutionStatus,omitempty"` // 执行状态：pending, running, completed, failed
	StartTime       string `protobuf:"bytes,6,opt,name=StartTime,proto3" json:"StartTime,omitempty"`             // 开始时间
	EndTime         string `protobuf:"bytes,7,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                 // 结束时间
	ExitCode        int32  `protobuf:"varint,8,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`              // 退出代码
	StdoutLog       string `protobuf:"bytes,9,opt,name=StdoutLog,proto3" json:"StdoutLog,omitempty"`             // 标准输出日志
	StderrLog       string `protobuf:"bytes,10,opt,name=StderrLog,proto3" json:"StderrLog,omitempty"`            // 错误输出日志
	ResultSummary   string `protobuf:"bytes,11,opt,name=ResultSummary,proto3" json:"ResultSummary,omitempty"`    // 结果摘要（JSON格式）
	SSHError        string `protobuf:"bytes,12,opt,name=SSHError,proto3" json:"SSHError,omitempty"`              // SSH错误信息
	CreateTime      string `protobuf:"bytes,13,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`          // 创建时间
}

func (x *HostExecutionDetail) Reset() {
	*x = HostExecutionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostExecutionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostExecutionDetail) ProtoMessage() {}

func (x *HostExecutionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostExecutionDetail.ProtoReflect.Descriptor instead.
func (*HostExecutionDetail) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{109}
}

func (x *HostExecutionDetail) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *HostExecutionDetail) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *HostExecutionDetail) GetTargetPercent() int32 {
	if x != nil {
		return x.TargetPercent
	}
	return 0
}

func (x *HostExecutionDetail) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *HostExecutionDetail) GetExecutionStatus() string {
	if x != nil {
		return x.ExecutionStatus
	}
	return ""
}

func (x *HostExecutionDetail) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *HostExecutionDetail) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *HostExecutionDetail) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *HostExecutionDetail) GetStdoutLog() string {
	if x != nil {
		return x.StdoutLog
	}
	return ""
}

func (x *HostExecutionDetail) GetStderrLog() string {
	if x != nil {
		return x.StderrLog
	}
	return ""
}

func (x *HostExecutionDetail) GetResultSummary() string {
	if x != nil {
		return x.ResultSummary
	}
	return ""
}

func (x *HostExecutionDetail) GetSSHError() string {
	if x != nil {
		return x.SSHError
	}
	return ""
}

func (x *HostExecutionDetail) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type GetScheduledTaskExecutionHistoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool                             `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message        string                           `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	HistoryRecords []*ScheduledTaskExecutionHistory `protobuf:"bytes,3,rep,name=HistoryRecords,proto3" json:"HistoryRecords,omitempty"`
}

func (x *GetScheduledTaskExecutionHistoryResp) Reset() {
	*x = GetScheduledTaskExecutionHistoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduledTaskExecutionHistoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledTaskExecutionHistoryResp) ProtoMessage() {}

func (x *GetScheduledTaskExecutionHistoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledTaskExecutionHistoryResp.ProtoReflect.Descriptor instead.
func (*GetScheduledTaskExecutionHistoryResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{110}
}

func (x *GetScheduledTaskExecutionHistoryResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetScheduledTaskExecutionHistoryResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetScheduledTaskExecutionHistoryResp) GetHistoryRecords() []*ScheduledTaskExecutionHistory {
	if x != nil {
		return x.HistoryRecords
	}
	return nil
}

// 获取定时任务执行详情相关消息类型
type GetScheduledTaskExecutionDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionTaskId string `protobuf:"bytes,1,opt,name=ExecutionTaskId,proto3" json:"ExecutionTaskId,omitempty"` // 执行任务ID (对应scheduled_task_execution_history.execution_task_id)
}

func (x *GetScheduledTaskExecutionDetailsReq) Reset() {
	*x = GetScheduledTaskExecutionDetailsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduledTaskExecutionDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledTaskExecutionDetailsReq) ProtoMessage() {}

func (x *GetScheduledTaskExecutionDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledTaskExecutionDetailsReq.ProtoReflect.Descriptor instead.
func (*GetScheduledTaskExecutionDetailsReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{111}
}

func (x *GetScheduledTaskExecutionDetailsReq) GetExecutionTaskId() string {
	if x != nil {
		return x.ExecutionTaskId
	}
	return ""
}

type ScheduledTaskExecutionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIp          string `protobuf:"bytes,1,opt,name=HostIp,proto3" json:"HostIp,omitempty"`                   // 主机IP
	ResourceType    string `protobuf:"bytes,2,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"`       // 资源类型: cpu, memory, disk
	TargetPercent   int32  `protobuf:"varint,3,opt,name=TargetPercent,proto3" json:"TargetPercent,omitempty"`    // 目标百分比
	Duration        int32  `protobuf:"varint,4,opt,name=Duration,proto3" json:"Duration,omitempty"`              // 执行持续时间（秒）
	ExecutionStatus string `protobuf:"bytes,5,opt,name=ExecutionStatus,proto3" json:"ExecutionStatus,omitempty"` // 执行状态: pending, running, completed, failed
	StartTime       string `protobuf:"bytes,6,opt,name=StartTime,proto3" json:"StartTime,omitempty"`             // 开始时间
	EndTime         string `protobuf:"bytes,7,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                 // 结束时间
	ExitCode        int32  `protobuf:"varint,8,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`              // 退出代码
	StdoutLog       string `protobuf:"bytes,9,opt,name=StdoutLog,proto3" json:"StdoutLog,omitempty"`             // 标准输出日志
	StderrLog       string `protobuf:"bytes,10,opt,name=StderrLog,proto3" json:"StderrLog,omitempty"`            // 错误输出日志
	ResultSummary   string `protobuf:"bytes,11,opt,name=ResultSummary,proto3" json:"ResultSummary,omitempty"`    // 结果摘要（JSON格式）
	SSHError        string `protobuf:"bytes,12,opt,name=SSHError,proto3" json:"SSHError,omitempty"`              // SSH错误信息
	CreateTime      string `protobuf:"bytes,13,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`          // 创建时间
}

func (x *ScheduledTaskExecutionDetail) Reset() {
	*x = ScheduledTaskExecutionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledTaskExecutionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledTaskExecutionDetail) ProtoMessage() {}

func (x *ScheduledTaskExecutionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledTaskExecutionDetail.ProtoReflect.Descriptor instead.
func (*ScheduledTaskExecutionDetail) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{112}
}

func (x *ScheduledTaskExecutionDetail) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *ScheduledTaskExecutionDetail) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ScheduledTaskExecutionDetail) GetTargetPercent() int32 {
	if x != nil {
		return x.TargetPercent
	}
	return 0
}

func (x *ScheduledTaskExecutionDetail) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ScheduledTaskExecutionDetail) GetExecutionStatus() string {
	if x != nil {
		return x.ExecutionStatus
	}
	return ""
}

func (x *ScheduledTaskExecutionDetail) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ScheduledTaskExecutionDetail) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ScheduledTaskExecutionDetail) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ScheduledTaskExecutionDetail) GetStdoutLog() string {
	if x != nil {
		return x.StdoutLog
	}
	return ""
}

func (x *ScheduledTaskExecutionDetail) GetStderrLog() string {
	if x != nil {
		return x.StderrLog
	}
	return ""
}

func (x *ScheduledTaskExecutionDetail) GetResultSummary() string {
	if x != nil {
		return x.ResultSummary
	}
	return ""
}

func (x *ScheduledTaskExecutionDetail) GetSSHError() string {
	if x != nil {
		return x.SSHError
	}
	return ""
}

func (x *ScheduledTaskExecutionDetail) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type ScheduledTaskExecutionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledTaskId int64                           `protobuf:"varint,1,opt,name=ScheduledTaskId,proto3" json:"ScheduledTaskId,omitempty"` // 定时任务ID
	TaskName        string                          `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`                // 任务名称
	ExecutionTaskId string                          `protobuf:"bytes,3,opt,name=ExecutionTaskId,proto3" json:"ExecutionTaskId,omitempty"`  // 执行任务ID
	ExecutionTime   string                          `protobuf:"bytes,4,opt,name=ExecutionTime,proto3" json:"ExecutionTime,omitempty"`      // 执行时间
	ExecutionStatus string                          `protobuf:"bytes,5,opt,name=ExecutionStatus,proto3" json:"ExecutionStatus,omitempty"`  // 执行状态: success, failed, partial
	TotalHosts      int32                           `protobuf:"varint,6,opt,name=TotalHosts,proto3" json:"TotalHosts,omitempty"`           // 总主机数
	SuccessHosts    int32                           `protobuf:"varint,7,opt,name=SuccessHosts,proto3" json:"SuccessHosts,omitempty"`       // 成功主机数
	FailedHosts     int32                           `protobuf:"varint,8,opt,name=FailedHosts,proto3" json:"FailedHosts,omitempty"`         // 失败主机数
	ResourceType    string                          `protobuf:"bytes,9,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"`        // 资源类型
	TargetPercent   int32                           `protobuf:"varint,10,opt,name=TargetPercent,proto3" json:"TargetPercent,omitempty"`    // 目标百分比
	Duration        int32                           `protobuf:"varint,11,opt,name=Duration,proto3" json:"Duration,omitempty"`              // 执行持续时间（秒）
	HostDetails     []*ScheduledTaskExecutionDetail `protobuf:"bytes,12,rep,name=HostDetails,proto3" json:"HostDetails,omitempty"`         // 主机执行详情列表
}

func (x *ScheduledTaskExecutionInfo) Reset() {
	*x = ScheduledTaskExecutionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledTaskExecutionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledTaskExecutionInfo) ProtoMessage() {}

func (x *ScheduledTaskExecutionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledTaskExecutionInfo.ProtoReflect.Descriptor instead.
func (*ScheduledTaskExecutionInfo) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{113}
}

func (x *ScheduledTaskExecutionInfo) GetScheduledTaskId() int64 {
	if x != nil {
		return x.ScheduledTaskId
	}
	return 0
}

func (x *ScheduledTaskExecutionInfo) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ScheduledTaskExecutionInfo) GetExecutionTaskId() string {
	if x != nil {
		return x.ExecutionTaskId
	}
	return ""
}

func (x *ScheduledTaskExecutionInfo) GetExecutionTime() string {
	if x != nil {
		return x.ExecutionTime
	}
	return ""
}

func (x *ScheduledTaskExecutionInfo) GetExecutionStatus() string {
	if x != nil {
		return x.ExecutionStatus
	}
	return ""
}

func (x *ScheduledTaskExecutionInfo) GetTotalHosts() int32 {
	if x != nil {
		return x.TotalHosts
	}
	return 0
}

func (x *ScheduledTaskExecutionInfo) GetSuccessHosts() int32 {
	if x != nil {
		return x.SuccessHosts
	}
	return 0
}

func (x *ScheduledTaskExecutionInfo) GetFailedHosts() int32 {
	if x != nil {
		return x.FailedHosts
	}
	return 0
}

func (x *ScheduledTaskExecutionInfo) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ScheduledTaskExecutionInfo) GetTargetPercent() int32 {
	if x != nil {
		return x.TargetPercent
	}
	return 0
}

func (x *ScheduledTaskExecutionInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ScheduledTaskExecutionInfo) GetHostDetails() []*ScheduledTaskExecutionDetail {
	if x != nil {
		return x.HostDetails
	}
	return nil
}

type GetScheduledTaskExecutionDetailsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                        `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string                      `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Data    *ScheduledTaskExecutionInfo `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"` // 执行详情数据
}

func (x *GetScheduledTaskExecutionDetailsResp) Reset() {
	*x = GetScheduledTaskExecutionDetailsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduledTaskExecutionDetailsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledTaskExecutionDetailsResp) ProtoMessage() {}

func (x *GetScheduledTaskExecutionDetailsResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledTaskExecutionDetailsResp.ProtoReflect.Descriptor instead.
func (*GetScheduledTaskExecutionDetailsResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{114}
}

func (x *GetScheduledTaskExecutionDetailsResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetScheduledTaskExecutionDetailsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetScheduledTaskExecutionDetailsResp) GetData() *ScheduledTaskExecutionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 从外部CMDB获取硬件信息相关消息类型
type FetchHostsHardwareInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIpList []string `protobuf:"bytes,1,rep,name=HostIpList,proto3" json:"HostIpList,omitempty"` // 要获取硬件信息的主机IP列表，为空则获取hosts_pool表中所有主机
}

func (x *FetchHostsHardwareInfoReq) Reset() {
	*x = FetchHostsHardwareInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHostsHardwareInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHostsHardwareInfoReq) ProtoMessage() {}

func (x *FetchHostsHardwareInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHostsHardwareInfoReq.ProtoReflect.Descriptor instead.
func (*FetchHostsHardwareInfoReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{115}
}

func (x *FetchHostsHardwareInfoReq) GetHostIpList() []string {
	if x != nil {
		return x.HostIpList
	}
	return nil
}

type HostHardwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIp   string `protobuf:"bytes,1,opt,name=HostIp,proto3" json:"HostIp,omitempty"`
	HostName string `protobuf:"bytes,2,opt,name=HostName,proto3" json:"HostName,omitempty"`
	Disk     int64  `protobuf:"varint,3,opt,name=Disk,proto3" json:"Disk,omitempty"`       // 磁盘大小(GB)
	Ram      int64  `protobuf:"varint,4,opt,name=Ram,proto3" json:"Ram,omitempty"`         // 内存大小(GB)
	Vcpus    int64  `protobuf:"varint,5,opt,name=Vcpus,proto3" json:"Vcpus,omitempty"`     // CPU核数
	Message  string `protobuf:"bytes,6,opt,name=Message,proto3" json:"Message,omitempty"`  // 获取结果或错误信息
	Success  bool   `protobuf:"varint,7,opt,name=Success,proto3" json:"Success,omitempty"` // 是否成功获取
}

func (x *HostHardwareInfo) Reset() {
	*x = HostHardwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostHardwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostHardwareInfo) ProtoMessage() {}

func (x *HostHardwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostHardwareInfo.ProtoReflect.Descriptor instead.
func (*HostHardwareInfo) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{116}
}

func (x *HostHardwareInfo) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *HostHardwareInfo) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *HostHardwareInfo) GetDisk() int64 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *HostHardwareInfo) GetRam() int64 {
	if x != nil {
		return x.Ram
	}
	return 0
}

func (x *HostHardwareInfo) GetVcpus() int64 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *HostHardwareInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HostHardwareInfo) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type FetchHostsHardwareInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success          bool                `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message          string              `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	TotalHosts       int32               `protobuf:"varint,3,opt,name=TotalHosts,proto3" json:"TotalHosts,omitempty"`            // 总主机数
	UpdatedHosts     int32               `protobuf:"varint,4,opt,name=UpdatedHosts,proto3" json:"UpdatedHosts,omitempty"`        // 成功更新的主机数
	FailedHosts      int32               `protobuf:"varint,5,opt,name=FailedHosts,proto3" json:"FailedHosts,omitempty"`          // 失败的主机数
	HardwareInfoList []*HostHardwareInfo `protobuf:"bytes,6,rep,name=HardwareInfoList,proto3" json:"HardwareInfoList,omitempty"` // 详细硬件信息列表
}

func (x *FetchHostsHardwareInfoResp) Reset() {
	*x = FetchHostsHardwareInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHostsHardwareInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHostsHardwareInfoResp) ProtoMessage() {}

func (x *FetchHostsHardwareInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHostsHardwareInfoResp.ProtoReflect.Descriptor instead.
func (*FetchHostsHardwareInfoResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{117}
}

func (x *FetchHostsHardwareInfoResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FetchHostsHardwareInfoResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FetchHostsHardwareInfoResp) GetTotalHosts() int32 {
	if x != nil {
		return x.TotalHosts
	}
	return 0
}

func (x *FetchHostsHardwareInfoResp) GetUpdatedHosts() int32 {
	if x != nil {
		return x.UpdatedHosts
	}
	return 0
}

func (x *FetchHostsHardwareInfoResp) GetFailedHosts() int32 {
	if x != nil {
		return x.FailedHosts
	}
	return 0
}

func (x *FetchHostsHardwareInfoResp) GetHardwareInfoList() []*HostHardwareInfo {
	if x != nil {
		return x.HardwareInfoList
	}
	return nil
}

// 从外部CMDB同步主机信息相关消息类型
type SyncExternalCmdbReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize    int32 `protobuf:"varint,1,opt,name=PageSize,proto3" json:"PageSize,omitempty"`       // 每页数据量，默认100
	HostOwner   int32 `protobuf:"varint,2,opt,name=HostOwner,proto3" json:"HostOwner,omitempty"`     // 主机所有者ID，为空则同步所有
	ForceUpdate bool  `protobuf:"varint,3,opt,name=ForceUpdate,proto3" json:"ForceUpdate,omitempty"` // 是否强制更新已存在的主机信息
}

func (x *SyncExternalCmdbReq) Reset() {
	*x = SyncExternalCmdbReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncExternalCmdbReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncExternalCmdbReq) ProtoMessage() {}

func (x *SyncExternalCmdbReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncExternalCmdbReq.ProtoReflect.Descriptor instead.
func (*SyncExternalCmdbReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{118}
}

func (x *SyncExternalCmdbReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SyncExternalCmdbReq) GetHostOwner() int32 {
	if x != nil {
		return x.HostOwner
	}
	return 0
}

func (x *SyncExternalCmdbReq) GetForceUpdate() bool {
	if x != nil {
		return x.ForceUpdate
	}
	return false
}

type ExternalCmdbHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdbId       string `protobuf:"bytes,1,opt,name=CmdbId,proto3" json:"CmdbId,omitempty"`
	DomainNum    string `protobuf:"bytes,2,opt,name=DomainNum,proto3" json:"DomainNum,omitempty"`
	HostName     string `protobuf:"bytes,3,opt,name=HostName,proto3" json:"HostName,omitempty"`
	HostIp       string `protobuf:"bytes,4,opt,name=HostIp,proto3" json:"HostIp,omitempty"`
	HostType     string `protobuf:"bytes,5,opt,name=HostType,proto3" json:"HostType,omitempty"`
	HostOwner    string `protobuf:"bytes,6,opt,name=HostOwner,proto3" json:"HostOwner,omitempty"`
	OpsIamCode   string `protobuf:"bytes,7,opt,name=OpsIamCode,proto3" json:"OpsIamCode,omitempty"`
	OwnerGroup   string `protobuf:"bytes,8,opt,name=OwnerGroup,proto3" json:"OwnerGroup,omitempty"`
	OwnerIamCode string `protobuf:"bytes,9,opt,name=OwnerIamCode,proto3" json:"OwnerIamCode,omitempty"`
	H3CId        string `protobuf:"bytes,10,opt,name=H3cId,proto3" json:"H3cId,omitempty"`
	H3CStatus    string `protobuf:"bytes,11,opt,name=H3cStatus,proto3" json:"H3cStatus,omitempty"`
	Disk         int64  `protobuf:"varint,12,opt,name=Disk,proto3" json:"Disk,omitempty"`   // 磁盘大小(GB)
	Ram          int64  `protobuf:"varint,13,opt,name=Ram,proto3" json:"Ram,omitempty"`     // 内存大小(MB)
	Vcpus        int64  `protobuf:"varint,14,opt,name=Vcpus,proto3" json:"Vcpus,omitempty"` // CPU核数
	CreatedAt    string `protobuf:"bytes,15,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,16,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	IfH3CSync    string `protobuf:"bytes,17,opt,name=IfH3cSync,proto3" json:"IfH3cSync,omitempty"`
	H3CImageId   string `protobuf:"bytes,18,opt,name=H3cImageId,proto3" json:"H3cImageId,omitempty"`
	H3CHmName    string `protobuf:"bytes,19,opt,name=H3cHmName,proto3" json:"H3cHmName,omitempty"`
	IsDelete     string `protobuf:"bytes,20,opt,name=IsDelete,proto3" json:"IsDelete,omitempty"`
	AppName      string `protobuf:"bytes,21,opt,name=AppName,proto3" json:"AppName,omitempty"`         // 部署的应用名称
	DataSource   string `protobuf:"bytes,22,opt,name=DataSource,proto3" json:"DataSource,omitempty"`   // 数据源
	BizGroup     string `protobuf:"bytes,23,opt,name=BizGroup,proto3" json:"BizGroup,omitempty"`       // 业务组
	OpsBizGroup  string `protobuf:"bytes,24,opt,name=OpsBizGroup,proto3" json:"OpsBizGroup,omitempty"` // 运维业务组
	Message      string `protobuf:"bytes,25,opt,name=Message,proto3" json:"Message,omitempty"`         // 同步结果消息
	Success      bool   `protobuf:"varint,26,opt,name=Success,proto3" json:"Success,omitempty"`        // 同步是否成功
}

func (x *ExternalCmdbHost) Reset() {
	*x = ExternalCmdbHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalCmdbHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalCmdbHost) ProtoMessage() {}

func (x *ExternalCmdbHost) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalCmdbHost.ProtoReflect.Descriptor instead.
func (*ExternalCmdbHost) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{119}
}

func (x *ExternalCmdbHost) GetCmdbId() string {
	if x != nil {
		return x.CmdbId
	}
	return ""
}

func (x *ExternalCmdbHost) GetDomainNum() string {
	if x != nil {
		return x.DomainNum
	}
	return ""
}

func (x *ExternalCmdbHost) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ExternalCmdbHost) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *ExternalCmdbHost) GetHostType() string {
	if x != nil {
		return x.HostType
	}
	return ""
}

func (x *ExternalCmdbHost) GetHostOwner() string {
	if x != nil {
		return x.HostOwner
	}
	return ""
}

func (x *ExternalCmdbHost) GetOpsIamCode() string {
	if x != nil {
		return x.OpsIamCode
	}
	return ""
}

func (x *ExternalCmdbHost) GetOwnerGroup() string {
	if x != nil {
		return x.OwnerGroup
	}
	return ""
}

func (x *ExternalCmdbHost) GetOwnerIamCode() string {
	if x != nil {
		return x.OwnerIamCode
	}
	return ""
}

func (x *ExternalCmdbHost) GetH3CId() string {
	if x != nil {
		return x.H3CId
	}
	return ""
}

func (x *ExternalCmdbHost) GetH3CStatus() string {
	if x != nil {
		return x.H3CStatus
	}
	return ""
}

func (x *ExternalCmdbHost) GetDisk() int64 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *ExternalCmdbHost) GetRam() int64 {
	if x != nil {
		return x.Ram
	}
	return 0
}

func (x *ExternalCmdbHost) GetVcpus() int64 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *ExternalCmdbHost) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ExternalCmdbHost) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ExternalCmdbHost) GetIfH3CSync() string {
	if x != nil {
		return x.IfH3CSync
	}
	return ""
}

func (x *ExternalCmdbHost) GetH3CImageId() string {
	if x != nil {
		return x.H3CImageId
	}
	return ""
}

func (x *ExternalCmdbHost) GetH3CHmName() string {
	if x != nil {
		return x.H3CHmName
	}
	return ""
}

func (x *ExternalCmdbHost) GetIsDelete() string {
	if x != nil {
		return x.IsDelete
	}
	return ""
}

func (x *ExternalCmdbHost) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *ExternalCmdbHost) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *ExternalCmdbHost) GetBizGroup() string {
	if x != nil {
		return x.BizGroup
	}
	return ""
}

func (x *ExternalCmdbHost) GetOpsBizGroup() string {
	if x != nil {
		return x.OpsBizGroup
	}
	return ""
}

func (x *ExternalCmdbHost) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExternalCmdbHost) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SyncExternalCmdbResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool                `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message        string              `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	TotalPages     int32               `protobuf:"varint,3,opt,name=TotalPages,proto3" json:"TotalPages,omitempty"`         // 总页数
	ProcessedPages int32               `protobuf:"varint,4,opt,name=ProcessedPages,proto3" json:"ProcessedPages,omitempty"` // 已处理页数
	TotalHosts     int32               `protobuf:"varint,5,opt,name=TotalHosts,proto3" json:"TotalHosts,omitempty"`         // 总主机数
	SyncedHosts    int32               `protobuf:"varint,6,opt,name=SyncedHosts,proto3" json:"SyncedHosts,omitempty"`       // 成功同步的主机数
	UpdatedHosts   int32               `protobuf:"varint,7,opt,name=UpdatedHosts,proto3" json:"UpdatedHosts,omitempty"`     // 更新的主机数
	FailedHosts    int32               `protobuf:"varint,8,opt,name=FailedHosts,proto3" json:"FailedHosts,omitempty"`       // 失败的主机数
	SyncResults    []*ExternalCmdbHost `protobuf:"bytes,9,rep,name=SyncResults,proto3" json:"SyncResults,omitempty"`        // 同步结果详情
}

func (x *SyncExternalCmdbResp) Reset() {
	*x = SyncExternalCmdbResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncExternalCmdbResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncExternalCmdbResp) ProtoMessage() {}

func (x *SyncExternalCmdbResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncExternalCmdbResp.ProtoReflect.Descriptor instead.
func (*SyncExternalCmdbResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{120}
}

func (x *SyncExternalCmdbResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SyncExternalCmdbResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SyncExternalCmdbResp) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *SyncExternalCmdbResp) GetProcessedPages() int32 {
	if x != nil {
		return x.ProcessedPages
	}
	return 0
}

func (x *SyncExternalCmdbResp) GetTotalHosts() int32 {
	if x != nil {
		return x.TotalHosts
	}
	return 0
}

func (x *SyncExternalCmdbResp) GetSyncedHosts() int32 {
	if x != nil {
		return x.SyncedHosts
	}
	return 0
}

func (x *SyncExternalCmdbResp) GetUpdatedHosts() int32 {
	if x != nil {
		return x.UpdatedHosts
	}
	return 0
}

func (x *SyncExternalCmdbResp) GetFailedHosts() int32 {
	if x != nil {
		return x.FailedHosts
	}
	return 0
}

func (x *SyncExternalCmdbResp) GetSyncResults() []*ExternalCmdbHost {
	if x != nil {
		return x.SyncResults
	}
	return nil
}

// 手动添加主机相关消息类型
type ManualHostHardwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskSize        int32  `protobuf:"varint,1,opt,name=DiskSize,proto3" json:"DiskSize,omitempty"`                // 磁盘大小(GB)
	Ram             int32  `protobuf:"varint,2,opt,name=Ram,proto3" json:"Ram,omitempty"`                          // 内存大小(GB)
	Vcpus           int32  `protobuf:"varint,3,opt,name=Vcpus,proto3" json:"Vcpus,omitempty"`                      // CPU核数
	HostType        string `protobuf:"bytes,4,opt,name=HostType,proto3" json:"HostType,omitempty"`                 // 主机类型
	H3CId           string `protobuf:"bytes,5,opt,name=H3cId,proto3" json:"H3cId,omitempty"`                       // H3C ID
	H3CStatus       string `protobuf:"bytes,6,opt,name=H3cStatus,proto3" json:"H3cStatus,omitempty"`               // H3C状态
	IfH3CSync       string `protobuf:"bytes,7,opt,name=IfH3cSync,proto3" json:"IfH3cSync,omitempty"`               // 是否H3C同步
	H3CImgId        string `protobuf:"bytes,8,opt,name=H3cImgId,proto3" json:"H3cImgId,omitempty"`                 // H3C镜像ID
	H3CHmName       string `protobuf:"bytes,9,opt,name=H3cHmName,proto3" json:"H3cHmName,omitempty"`               // H3C主机名
	LeafNumber      string `protobuf:"bytes,10,opt,name=LeafNumber,proto3" json:"LeafNumber,omitempty"`            // 叶子编号
	RackNumber      string `protobuf:"bytes,11,opt,name=RackNumber,proto3" json:"RackNumber,omitempty"`            // 机柜编号
	RackHeight      int32  `protobuf:"varint,12,opt,name=RackHeight,proto3" json:"RackHeight,omitempty"`           // 机柜高度
	RackStartNumber int32  `protobuf:"varint,13,opt,name=RackStartNumber,proto3" json:"RackStartNumber,omitempty"` // 机柜起始编号
	FromFactor      int32  `protobuf:"varint,14,opt,name=FromFactor,proto3" json:"FromFactor,omitempty"`           // From因子
	SerialNumber    string `protobuf:"bytes,15,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`        // 序列号
}

func (x *ManualHostHardwareInfo) Reset() {
	*x = ManualHostHardwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualHostHardwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualHostHardwareInfo) ProtoMessage() {}

func (x *ManualHostHardwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualHostHardwareInfo.ProtoReflect.Descriptor instead.
func (*ManualHostHardwareInfo) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{121}
}

func (x *ManualHostHardwareInfo) GetDiskSize() int32 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *ManualHostHardwareInfo) GetRam() int32 {
	if x != nil {
		return x.Ram
	}
	return 0
}

func (x *ManualHostHardwareInfo) GetVcpus() int32 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *ManualHostHardwareInfo) GetHostType() string {
	if x != nil {
		return x.HostType
	}
	return ""
}

func (x *ManualHostHardwareInfo) GetH3CId() string {
	if x != nil {
		return x.H3CId
	}
	return ""
}

func (x *ManualHostHardwareInfo) GetH3CStatus() string {
	if x != nil {
		return x.H3CStatus
	}
	return ""
}

func (x *ManualHostHardwareInfo) GetIfH3CSync() string {
	if x != nil {
		return x.IfH3CSync
	}
	return ""
}

func (x *ManualHostHardwareInfo) GetH3CImgId() string {
	if x != nil {
		return x.H3CImgId
	}
	return ""
}

func (x *ManualHostHardwareInfo) GetH3CHmName() string {
	if x != nil {
		return x.H3CHmName
	}
	return ""
}

func (x *ManualHostHardwareInfo) GetLeafNumber() string {
	if x != nil {
		return x.LeafNumber
	}
	return ""
}

func (x *ManualHostHardwareInfo) GetRackNumber() string {
	if x != nil {
		return x.RackNumber
	}
	return ""
}

func (x *ManualHostHardwareInfo) GetRackHeight() int32 {
	if x != nil {
		return x.RackHeight
	}
	return 0
}

func (x *ManualHostHardwareInfo) GetRackStartNumber() int32 {
	if x != nil {
		return x.RackStartNumber
	}
	return 0
}

func (x *ManualHostHardwareInfo) GetFromFactor() int32 {
	if x != nil {
		return x.FromFactor
	}
	return 0
}

func (x *ManualHostHardwareInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type HostApplicationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerType     string `protobuf:"bytes,1,opt,name=ServerType,proto3" json:"ServerType,omitempty"`          // 服务类型
	ServerVersion  string `protobuf:"bytes,2,opt,name=ServerVersion,proto3" json:"ServerVersion,omitempty"`    // 服务版本
	ServerSubtitle string `protobuf:"bytes,3,opt,name=ServerSubtitle,proto3" json:"ServerSubtitle,omitempty"`  // 服务子标题
	ClusterName    string `protobuf:"bytes,4,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`        // 集群名称
	ServerProtocol string `protobuf:"bytes,5,opt,name=ServerProtocol,proto3" json:"ServerProtocol,omitempty"`  // 服务协议
	ServerAddr     string `protobuf:"bytes,6,opt,name=ServerAddr,proto3" json:"ServerAddr,omitempty"`          // 服务地址
	ServerPort     int32  `protobuf:"varint,7,opt,name=ServerPort,proto3" json:"ServerPort,omitempty"`         // 服务端口
	ServerRole     string `protobuf:"bytes,8,opt,name=ServerRole,proto3" json:"ServerRole,omitempty"`          // 服务角色
	ServerStatus   string `protobuf:"bytes,9,opt,name=ServerStatus,proto3" json:"ServerStatus,omitempty"`      // 服务状态
	DepartmentName string `protobuf:"bytes,10,opt,name=DepartmentName,proto3" json:"DepartmentName,omitempty"` // 部门名称
}

func (x *HostApplicationInfo) Reset() {
	*x = HostApplicationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostApplicationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostApplicationInfo) ProtoMessage() {}

func (x *HostApplicationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostApplicationInfo.ProtoReflect.Descriptor instead.
func (*HostApplicationInfo) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{122}
}

func (x *HostApplicationInfo) GetServerType() string {
	if x != nil {
		return x.ServerType
	}
	return ""
}

func (x *HostApplicationInfo) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *HostApplicationInfo) GetServerSubtitle() string {
	if x != nil {
		return x.ServerSubtitle
	}
	return ""
}

func (x *HostApplicationInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *HostApplicationInfo) GetServerProtocol() string {
	if x != nil {
		return x.ServerProtocol
	}
	return ""
}

func (x *HostApplicationInfo) GetServerAddr() string {
	if x != nil {
		return x.ServerAddr
	}
	return ""
}

func (x *HostApplicationInfo) GetServerPort() int32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *HostApplicationInfo) GetServerRole() string {
	if x != nil {
		return x.ServerRole
	}
	return ""
}

func (x *HostApplicationInfo) GetServerStatus() string {
	if x != nil {
		return x.ServerStatus
	}
	return ""
}

func (x *HostApplicationInfo) GetDepartmentName() string {
	if x != nil {
		return x.DepartmentName
	}
	return ""
}

type ManualAddHostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIp                string                  `protobuf:"bytes,1,opt,name=HostIp,proto3" json:"HostIp,omitempty"`                                // 主机IP（必填）
	HostName              string                  `protobuf:"bytes,2,opt,name=HostName,proto3" json:"HostName,omitempty"`                            // 主机名
	HardwareInfo          *ManualHostHardwareInfo `protobuf:"bytes,3,opt,name=HardwareInfo,proto3" json:"HardwareInfo,omitempty"`                    // 硬件信息
	Applications          []*HostApplicationInfo  `protobuf:"bytes,4,rep,name=Applications,proto3" json:"Applications,omitempty"`                    // 应用信息列表
	AutoFetchFromCmdb     bool                    `protobuf:"varint,5,opt,name=AutoFetchFromCmdb,proto3" json:"AutoFetchFromCmdb,omitempty"`         // 是否从CMDB自动获取信息
	AutoFetchFromClusters bool                    `protobuf:"varint,6,opt,name=AutoFetchFromClusters,proto3" json:"AutoFetchFromClusters,omitempty"` // 是否从集群实例表自动获取应用信息
	IdcId                 int64                   `protobuf:"varint,7,opt,name=IdcId,proto3" json:"IdcId,omitempty"`                                 // IDC机房ID
}

func (x *ManualAddHostReq) Reset() {
	*x = ManualAddHostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualAddHostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualAddHostReq) ProtoMessage() {}

func (x *ManualAddHostReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualAddHostReq.ProtoReflect.Descriptor instead.
func (*ManualAddHostReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{123}
}

func (x *ManualAddHostReq) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *ManualAddHostReq) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ManualAddHostReq) GetHardwareInfo() *ManualHostHardwareInfo {
	if x != nil {
		return x.HardwareInfo
	}
	return nil
}

func (x *ManualAddHostReq) GetApplications() []*HostApplicationInfo {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *ManualAddHostReq) GetAutoFetchFromCmdb() bool {
	if x != nil {
		return x.AutoFetchFromCmdb
	}
	return false
}

func (x *ManualAddHostReq) GetAutoFetchFromClusters() bool {
	if x != nil {
		return x.AutoFetchFromClusters
	}
	return false
}

func (x *ManualAddHostReq) GetIdcId() int64 {
	if x != nil {
		return x.IdcId
	}
	return 0
}

type AutoFetchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool                    `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message      string                  `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	HardwareInfo *ManualHostHardwareInfo `protobuf:"bytes,3,opt,name=HardwareInfo,proto3" json:"HardwareInfo,omitempty"` // 获取到的硬件信息
	Applications []*HostApplicationInfo  `protobuf:"bytes,4,rep,name=Applications,proto3" json:"Applications,omitempty"` // 获取到的应用信息列表
}

func (x *AutoFetchResult) Reset() {
	*x = AutoFetchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoFetchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoFetchResult) ProtoMessage() {}

func (x *AutoFetchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoFetchResult.ProtoReflect.Descriptor instead.
func (*AutoFetchResult) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{124}
}

func (x *AutoFetchResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AutoFetchResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AutoFetchResult) GetHardwareInfo() *ManualHostHardwareInfo {
	if x != nil {
		return x.HardwareInfo
	}
	return nil
}

func (x *AutoFetchResult) GetApplications() []*HostApplicationInfo {
	if x != nil {
		return x.Applications
	}
	return nil
}

type ManualAddHostResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool             `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message         string           `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	AutoFetchResult *AutoFetchResult `protobuf:"bytes,3,opt,name=AutoFetchResult,proto3" json:"AutoFetchResult,omitempty"` // 自动获取的结果（用于填充表单）
}

func (x *ManualAddHostResp) Reset() {
	*x = ManualAddHostResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualAddHostResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualAddHostResp) ProtoMessage() {}

func (x *ManualAddHostResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualAddHostResp.ProtoReflect.Descriptor instead.
func (*ManualAddHostResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{125}
}

func (x *ManualAddHostResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ManualAddHostResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ManualAddHostResp) GetAutoFetchResult() *AutoFetchResult {
	if x != nil {
		return x.AutoFetchResult
	}
	return nil
}

// 自动获取主机信息的请求（用于填充表单）
type AutoFetchHostInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIp            string `protobuf:"bytes,1,opt,name=HostIp,proto3" json:"HostIp,omitempty"`                        // 主机IP
	FetchFromCmdb     bool   `protobuf:"varint,2,opt,name=FetchFromCmdb,proto3" json:"FetchFromCmdb,omitempty"`         // 是否从CMDB获取
	FetchFromClusters bool   `protobuf:"varint,3,opt,name=FetchFromClusters,proto3" json:"FetchFromClusters,omitempty"` // 是否从集群实例表获取
}

func (x *AutoFetchHostInfoReq) Reset() {
	*x = AutoFetchHostInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoFetchHostInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoFetchHostInfoReq) ProtoMessage() {}

func (x *AutoFetchHostInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoFetchHostInfoReq.ProtoReflect.Descriptor instead.
func (*AutoFetchHostInfoReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{126}
}

func (x *AutoFetchHostInfoReq) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *AutoFetchHostInfoReq) GetFetchFromCmdb() bool {
	if x != nil {
		return x.FetchFromCmdb
	}
	return false
}

func (x *AutoFetchHostInfoReq) GetFetchFromClusters() bool {
	if x != nil {
		return x.FetchFromClusters
	}
	return false
}

type AutoFetchHostInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool                    `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message      string                  `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	HardwareInfo *ManualHostHardwareInfo `protobuf:"bytes,3,opt,name=HardwareInfo,proto3" json:"HardwareInfo,omitempty"`
	Applications []*HostApplicationInfo  `protobuf:"bytes,4,rep,name=Applications,proto3" json:"Applications,omitempty"`
	IdcInfo      *IdcConf                `protobuf:"bytes,5,opt,name=IdcInfo,proto3" json:"IdcInfo,omitempty"` // IDC信息，独立于硬件信息
}

func (x *AutoFetchHostInfoResp) Reset() {
	*x = AutoFetchHostInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoFetchHostInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoFetchHostInfoResp) ProtoMessage() {}

func (x *AutoFetchHostInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoFetchHostInfoResp.ProtoReflect.Descriptor instead.
func (*AutoFetchHostInfoResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{127}
}

func (x *AutoFetchHostInfoResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AutoFetchHostInfoResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AutoFetchHostInfoResp) GetHardwareInfo() *ManualHostHardwareInfo {
	if x != nil {
		return x.HardwareInfo
	}
	return nil
}

func (x *AutoFetchHostInfoResp) GetApplications() []*HostApplicationInfo {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *AutoFetchHostInfoResp) GetIdcInfo() *IdcConf {
	if x != nil {
		return x.IdcInfo
	}
	return nil
}

// IDC机房配置相关消息类型
type IdcConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IdcName        string `protobuf:"bytes,2,opt,name=IdcName,proto3" json:"IdcName,omitempty"`
	IdcCode        string `protobuf:"bytes,3,opt,name=IdcCode,proto3" json:"IdcCode,omitempty"`
	IdcIpRegexp    string `protobuf:"bytes,4,opt,name=IdcIpRegexp,proto3" json:"IdcIpRegexp,omitempty"`
	IdcLocation    string `protobuf:"bytes,5,opt,name=IdcLocation,proto3" json:"IdcLocation,omitempty"`
	IdcDescription string `protobuf:"bytes,6,opt,name=IdcDescription,proto3" json:"IdcDescription,omitempty"`
	IsActive       bool   `protobuf:"varint,7,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	Priority       int32  `protobuf:"varint,8,opt,name=Priority,proto3" json:"Priority,omitempty"`
	CreatedAt      string `protobuf:"bytes,9,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt      string `protobuf:"bytes,10,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *IdcConf) Reset() {
	*x = IdcConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdcConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdcConf) ProtoMessage() {}

func (x *IdcConf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdcConf.ProtoReflect.Descriptor instead.
func (*IdcConf) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{128}
}

func (x *IdcConf) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IdcConf) GetIdcName() string {
	if x != nil {
		return x.IdcName
	}
	return ""
}

func (x *IdcConf) GetIdcCode() string {
	if x != nil {
		return x.IdcCode
	}
	return ""
}

func (x *IdcConf) GetIdcIpRegexp() string {
	if x != nil {
		return x.IdcIpRegexp
	}
	return ""
}

func (x *IdcConf) GetIdcLocation() string {
	if x != nil {
		return x.IdcLocation
	}
	return ""
}

func (x *IdcConf) GetIdcDescription() string {
	if x != nil {
		return x.IdcDescription
	}
	return ""
}

func (x *IdcConf) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *IdcConf) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *IdcConf) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *IdcConf) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GetIdcConfListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveOnly bool `protobuf:"varint,1,opt,name=ActiveOnly,proto3" json:"ActiveOnly,omitempty"` // 是否只返回激活的IDC配置
}

func (x *GetIdcConfListReq) Reset() {
	*x = GetIdcConfListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdcConfListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdcConfListReq) ProtoMessage() {}

func (x *GetIdcConfListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdcConfListReq.ProtoReflect.Descriptor instead.
func (*GetIdcConfListReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{129}
}

func (x *GetIdcConfListReq) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

type GetIdcConfListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool       `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message     string     `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	IdcConfList []*IdcConf `protobuf:"bytes,3,rep,name=IdcConfList,proto3" json:"IdcConfList,omitempty"`
}

func (x *GetIdcConfListResp) Reset() {
	*x = GetIdcConfListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdcConfListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdcConfListResp) ProtoMessage() {}

func (x *GetIdcConfListResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdcConfListResp.ProtoReflect.Descriptor instead.
func (*GetIdcConfListResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{130}
}

func (x *GetIdcConfListResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetIdcConfListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetIdcConfListResp) GetIdcConfList() []*IdcConf {
	if x != nil {
		return x.IdcConfList
	}
	return nil
}

type CreateIdcConfReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdcName        string `protobuf:"bytes,1,opt,name=IdcName,proto3" json:"IdcName,omitempty"`
	IdcCode        string `protobuf:"bytes,2,opt,name=IdcCode,proto3" json:"IdcCode,omitempty"`
	IdcIpRegexp    string `protobuf:"bytes,3,opt,name=IdcIpRegexp,proto3" json:"IdcIpRegexp,omitempty"`
	IdcLocation    string `protobuf:"bytes,4,opt,name=IdcLocation,proto3" json:"IdcLocation,omitempty"`
	IdcDescription string `protobuf:"bytes,5,opt,name=IdcDescription,proto3" json:"IdcDescription,omitempty"`
	Priority       int32  `protobuf:"varint,6,opt,name=Priority,proto3" json:"Priority,omitempty"`
}

func (x *CreateIdcConfReq) Reset() {
	*x = CreateIdcConfReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIdcConfReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIdcConfReq) ProtoMessage() {}

func (x *CreateIdcConfReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIdcConfReq.ProtoReflect.Descriptor instead.
func (*CreateIdcConfReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{131}
}

func (x *CreateIdcConfReq) GetIdcName() string {
	if x != nil {
		return x.IdcName
	}
	return ""
}

func (x *CreateIdcConfReq) GetIdcCode() string {
	if x != nil {
		return x.IdcCode
	}
	return ""
}

func (x *CreateIdcConfReq) GetIdcIpRegexp() string {
	if x != nil {
		return x.IdcIpRegexp
	}
	return ""
}

func (x *CreateIdcConfReq) GetIdcLocation() string {
	if x != nil {
		return x.IdcLocation
	}
	return ""
}

func (x *CreateIdcConfReq) GetIdcDescription() string {
	if x != nil {
		return x.IdcDescription
	}
	return ""
}

func (x *CreateIdcConfReq) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type CreateIdcConfResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	IdcId   int64  `protobuf:"varint,3,opt,name=IdcId,proto3" json:"IdcId,omitempty"`
}

func (x *CreateIdcConfResp) Reset() {
	*x = CreateIdcConfResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIdcConfResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIdcConfResp) ProtoMessage() {}

func (x *CreateIdcConfResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIdcConfResp.ProtoReflect.Descriptor instead.
func (*CreateIdcConfResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{132}
}

func (x *CreateIdcConfResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateIdcConfResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateIdcConfResp) GetIdcId() int64 {
	if x != nil {
		return x.IdcId
	}
	return 0
}

type UpdateIdcConfReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IdcName        string `protobuf:"bytes,2,opt,name=IdcName,proto3" json:"IdcName,omitempty"`
	IdcCode        string `protobuf:"bytes,3,opt,name=IdcCode,proto3" json:"IdcCode,omitempty"`
	IdcIpRegexp    string `protobuf:"bytes,4,opt,name=IdcIpRegexp,proto3" json:"IdcIpRegexp,omitempty"`
	IdcLocation    string `protobuf:"bytes,5,opt,name=IdcLocation,proto3" json:"IdcLocation,omitempty"`
	IdcDescription string `protobuf:"bytes,6,opt,name=IdcDescription,proto3" json:"IdcDescription,omitempty"`
	IsActive       bool   `protobuf:"varint,7,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	Priority       int32  `protobuf:"varint,8,opt,name=Priority,proto3" json:"Priority,omitempty"`
}

func (x *UpdateIdcConfReq) Reset() {
	*x = UpdateIdcConfReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIdcConfReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIdcConfReq) ProtoMessage() {}

func (x *UpdateIdcConfReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIdcConfReq.ProtoReflect.Descriptor instead.
func (*UpdateIdcConfReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{133}
}

func (x *UpdateIdcConfReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateIdcConfReq) GetIdcName() string {
	if x != nil {
		return x.IdcName
	}
	return ""
}

func (x *UpdateIdcConfReq) GetIdcCode() string {
	if x != nil {
		return x.IdcCode
	}
	return ""
}

func (x *UpdateIdcConfReq) GetIdcIpRegexp() string {
	if x != nil {
		return x.IdcIpRegexp
	}
	return ""
}

func (x *UpdateIdcConfReq) GetIdcLocation() string {
	if x != nil {
		return x.IdcLocation
	}
	return ""
}

func (x *UpdateIdcConfReq) GetIdcDescription() string {
	if x != nil {
		return x.IdcDescription
	}
	return ""
}

func (x *UpdateIdcConfReq) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *UpdateIdcConfReq) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type UpdateIdcConfResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *UpdateIdcConfResp) Reset() {
	*x = UpdateIdcConfResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIdcConfResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIdcConfResp) ProtoMessage() {}

func (x *UpdateIdcConfResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIdcConfResp.ProtoReflect.Descriptor instead.
func (*UpdateIdcConfResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{134}
}

func (x *UpdateIdcConfResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateIdcConfResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteIdcConfReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DeleteIdcConfReq) Reset() {
	*x = DeleteIdcConfReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIdcConfReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIdcConfReq) ProtoMessage() {}

func (x *DeleteIdcConfReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIdcConfReq.ProtoReflect.Descriptor instead.
func (*DeleteIdcConfReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{135}
}

func (x *DeleteIdcConfReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteIdcConfResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *DeleteIdcConfResp) Reset() {
	*x = DeleteIdcConfResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIdcConfResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIdcConfResp) ProtoMessage() {}

func (x *DeleteIdcConfResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIdcConfResp.ProtoReflect.Descriptor instead.
func (*DeleteIdcConfResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{136}
}

func (x *DeleteIdcConfResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteIdcConfResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MatchIdcByIpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIp string `protobuf:"bytes,1,opt,name=HostIp,proto3" json:"HostIp,omitempty"`
}

func (x *MatchIdcByIpReq) Reset() {
	*x = MatchIdcByIpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchIdcByIpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchIdcByIpReq) ProtoMessage() {}

func (x *MatchIdcByIpReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchIdcByIpReq.ProtoReflect.Descriptor instead.
func (*MatchIdcByIpReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{137}
}

func (x *MatchIdcByIpReq) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

type MatchIdcByIpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool     `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	IdcConf *IdcConf `protobuf:"bytes,3,opt,name=IdcConf,proto3" json:"IdcConf,omitempty"` // 匹配到的IDC配置，如果没有匹配到则为空
}

func (x *MatchIdcByIpResp) Reset() {
	*x = MatchIdcByIpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchIdcByIpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchIdcByIpResp) ProtoMessage() {}

func (x *MatchIdcByIpResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchIdcByIpResp.ProtoReflect.Descriptor instead.
func (*MatchIdcByIpResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{138}
}

func (x *MatchIdcByIpResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MatchIdcByIpResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MatchIdcByIpResp) GetIdcConf() *IdcConf {
	if x != nil {
		return x.IdcConf
	}
	return nil
}

// 批量更新主机IDC信息
type UpdateHostsIdcReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIpList []string `protobuf:"bytes,1,rep,name=HostIpList,proto3" json:"HostIpList,omitempty"` // 空则更新所有主机
}

func (x *UpdateHostsIdcReq) Reset() {
	*x = UpdateHostsIdcReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHostsIdcReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostsIdcReq) ProtoMessage() {}

func (x *UpdateHostsIdcReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostsIdcReq.ProtoReflect.Descriptor instead.
func (*UpdateHostsIdcReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{139}
}

func (x *UpdateHostsIdcReq) GetHostIpList() []string {
	if x != nil {
		return x.HostIpList
	}
	return nil
}

type UpdateHostsIdcResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message        string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	TotalHosts     int32  `protobuf:"varint,3,opt,name=TotalHosts,proto3" json:"TotalHosts,omitempty"`         // 总处理主机数
	UpdatedHosts   int32  `protobuf:"varint,4,opt,name=UpdatedHosts,proto3" json:"UpdatedHosts,omitempty"`     // 成功更新的主机数
	UnmatchedHosts int32  `protobuf:"varint,5,opt,name=UnmatchedHosts,proto3" json:"UnmatchedHosts,omitempty"` // 未匹配到IDC的主机数
}

func (x *UpdateHostsIdcResp) Reset() {
	*x = UpdateHostsIdcResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHostsIdcResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostsIdcResp) ProtoMessage() {}

func (x *UpdateHostsIdcResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostsIdcResp.ProtoReflect.Descriptor instead.
func (*UpdateHostsIdcResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{140}
}

func (x *UpdateHostsIdcResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateHostsIdcResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateHostsIdcResp) GetTotalHosts() int32 {
	if x != nil {
		return x.TotalHosts
	}
	return 0
}

func (x *UpdateHostsIdcResp) GetUpdatedHosts() int32 {
	if x != nil {
		return x.UpdatedHosts
	}
	return 0
}

func (x *UpdateHostsIdcResp) GetUnmatchedHosts() int32 {
	if x != nil {
		return x.UnmatchedHosts
	}
	return 0
}

// ES数据同步任务配置相关消息类型
type CreateESSyncTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName       string `protobuf:"bytes,1,opt,name=TaskName,proto3" json:"TaskName,omitempty"`             // 任务名称
	Description    string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`       // 任务描述
	EsEndpoint     string `protobuf:"bytes,3,opt,name=EsEndpoint,proto3" json:"EsEndpoint,omitempty"`         // ES接口地址
	EsIndexPattern string `protobuf:"bytes,4,opt,name=EsIndexPattern,proto3" json:"EsIndexPattern,omitempty"` // ES索引模式
	CronExpression string `protobuf:"bytes,5,opt,name=CronExpression,proto3" json:"CronExpression,omitempty"` // Cron表达式
	QueryTimeRange string `protobuf:"bytes,6,opt,name=QueryTimeRange,proto3" json:"QueryTimeRange,omitempty"` // 查询时间范围(如7d,30d)
	CreatedBy      string `protobuf:"bytes,7,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`           // 创建者
}

func (x *CreateESSyncTaskReq) Reset() {
	*x = CreateESSyncTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateESSyncTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateESSyncTaskReq) ProtoMessage() {}

func (x *CreateESSyncTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateESSyncTaskReq.ProtoReflect.Descriptor instead.
func (*CreateESSyncTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{141}
}

func (x *CreateESSyncTaskReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CreateESSyncTaskReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateESSyncTaskReq) GetEsEndpoint() string {
	if x != nil {
		return x.EsEndpoint
	}
	return ""
}

func (x *CreateESSyncTaskReq) GetEsIndexPattern() string {
	if x != nil {
		return x.EsIndexPattern
	}
	return ""
}

func (x *CreateESSyncTaskReq) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *CreateESSyncTaskReq) GetQueryTimeRange() string {
	if x != nil {
		return x.QueryTimeRange
	}
	return ""
}

func (x *CreateESSyncTaskReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type CreateESSyncTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	TaskId  int64  `protobuf:"varint,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *CreateESSyncTaskResp) Reset() {
	*x = CreateESSyncTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateESSyncTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateESSyncTaskResp) ProtoMessage() {}

func (x *CreateESSyncTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateESSyncTaskResp.ProtoReflect.Descriptor instead.
func (*CreateESSyncTaskResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{142}
}

func (x *CreateESSyncTaskResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateESSyncTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateESSyncTaskResp) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type UpdateESSyncTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                        // 任务ID
	TaskName       string `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`             // 任务名称
	Description    string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`       // 任务描述
	EsEndpoint     string `protobuf:"bytes,4,opt,name=EsEndpoint,proto3" json:"EsEndpoint,omitempty"`         // ES接口地址
	EsIndexPattern string `protobuf:"bytes,5,opt,name=EsIndexPattern,proto3" json:"EsIndexPattern,omitempty"` // ES索引模式
	CronExpression string `protobuf:"bytes,6,opt,name=CronExpression,proto3" json:"CronExpression,omitempty"` // Cron表达式
	QueryTimeRange string `protobuf:"bytes,7,opt,name=QueryTimeRange,proto3" json:"QueryTimeRange,omitempty"` // 查询时间范围
}

func (x *UpdateESSyncTaskReq) Reset() {
	*x = UpdateESSyncTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateESSyncTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateESSyncTaskReq) ProtoMessage() {}

func (x *UpdateESSyncTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateESSyncTaskReq.ProtoReflect.Descriptor instead.
func (*UpdateESSyncTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{143}
}

func (x *UpdateESSyncTaskReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateESSyncTaskReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpdateESSyncTaskReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateESSyncTaskReq) GetEsEndpoint() string {
	if x != nil {
		return x.EsEndpoint
	}
	return ""
}

func (x *UpdateESSyncTaskReq) GetEsIndexPattern() string {
	if x != nil {
		return x.EsIndexPattern
	}
	return ""
}

func (x *UpdateESSyncTaskReq) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *UpdateESSyncTaskReq) GetQueryTimeRange() string {
	if x != nil {
		return x.QueryTimeRange
	}
	return ""
}

type UpdateESSyncTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *UpdateESSyncTaskResp) Reset() {
	*x = UpdateESSyncTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateESSyncTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateESSyncTaskResp) ProtoMessage() {}

func (x *UpdateESSyncTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateESSyncTaskResp.ProtoReflect.Descriptor instead.
func (*UpdateESSyncTaskResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{144}
}

func (x *UpdateESSyncTaskResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateESSyncTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteESSyncTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"` // 任务ID
}

func (x *DeleteESSyncTaskReq) Reset() {
	*x = DeleteESSyncTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteESSyncTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteESSyncTaskReq) ProtoMessage() {}

func (x *DeleteESSyncTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteESSyncTaskReq.ProtoReflect.Descriptor instead.
func (*DeleteESSyncTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{145}
}

func (x *DeleteESSyncTaskReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteESSyncTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *DeleteESSyncTaskResp) Reset() {
	*x = DeleteESSyncTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteESSyncTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteESSyncTaskResp) ProtoMessage() {}

func (x *DeleteESSyncTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteESSyncTaskResp.ProtoReflect.Descriptor instead.
func (*DeleteESSyncTaskResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{146}
}

func (x *DeleteESSyncTaskResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteESSyncTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetESSyncTasksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnabledOnly bool `protobuf:"varint,1,opt,name=EnabledOnly,proto3" json:"EnabledOnly,omitempty"` // 是否只返回启用的任务
}

func (x *GetESSyncTasksReq) Reset() {
	*x = GetESSyncTasksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetESSyncTasksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetESSyncTasksReq) ProtoMessage() {}

func (x *GetESSyncTasksReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetESSyncTasksReq.ProtoReflect.Descriptor instead.
func (*GetESSyncTasksReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{147}
}

func (x *GetESSyncTasksReq) GetEnabledOnly() bool {
	if x != nil {
		return x.EnabledOnly
	}
	return false
}

type ESSyncTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TaskName          string `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	Description       string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	EsEndpoint        string `protobuf:"bytes,4,opt,name=EsEndpoint,proto3" json:"EsEndpoint,omitempty"`
	EsIndexPattern    string `protobuf:"bytes,5,opt,name=EsIndexPattern,proto3" json:"EsIndexPattern,omitempty"`
	CronExpression    string `protobuf:"bytes,6,opt,name=CronExpression,proto3" json:"CronExpression,omitempty"`
	QueryTimeRange    string `protobuf:"bytes,7,opt,name=QueryTimeRange,proto3" json:"QueryTimeRange,omitempty"`
	IsEnabled         bool   `protobuf:"varint,8,opt,name=IsEnabled,proto3" json:"IsEnabled,omitempty"`
	CreatedBy         string `protobuf:"bytes,9,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	CreatedAt         string `protobuf:"bytes,10,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         string `protobuf:"bytes,11,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	LastExecutionTime string `protobuf:"bytes,12,opt,name=LastExecutionTime,proto3" json:"LastExecutionTime,omitempty"`
	NextExecutionTime string `protobuf:"bytes,13,opt,name=NextExecutionTime,proto3" json:"NextExecutionTime,omitempty"`
}

func (x *ESSyncTask) Reset() {
	*x = ESSyncTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSyncTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSyncTask) ProtoMessage() {}

func (x *ESSyncTask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSyncTask.ProtoReflect.Descriptor instead.
func (*ESSyncTask) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{148}
}

func (x *ESSyncTask) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ESSyncTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ESSyncTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ESSyncTask) GetEsEndpoint() string {
	if x != nil {
		return x.EsEndpoint
	}
	return ""
}

func (x *ESSyncTask) GetEsIndexPattern() string {
	if x != nil {
		return x.EsIndexPattern
	}
	return ""
}

func (x *ESSyncTask) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *ESSyncTask) GetQueryTimeRange() string {
	if x != nil {
		return x.QueryTimeRange
	}
	return ""
}

func (x *ESSyncTask) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *ESSyncTask) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ESSyncTask) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ESSyncTask) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ESSyncTask) GetLastExecutionTime() string {
	if x != nil {
		return x.LastExecutionTime
	}
	return ""
}

func (x *ESSyncTask) GetNextExecutionTime() string {
	if x != nil {
		return x.NextExecutionTime
	}
	return ""
}

type GetESSyncTasksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool          `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Tasks   []*ESSyncTask `protobuf:"bytes,3,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *GetESSyncTasksResp) Reset() {
	*x = GetESSyncTasksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetESSyncTasksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetESSyncTasksResp) ProtoMessage() {}

func (x *GetESSyncTasksResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetESSyncTasksResp.ProtoReflect.Descriptor instead.
func (*GetESSyncTasksResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{149}
}

func (x *GetESSyncTasksResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetESSyncTasksResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetESSyncTasksResp) GetTasks() []*ESSyncTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type GetESSyncTaskDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"` // 任务ID
}

func (x *GetESSyncTaskDetailReq) Reset() {
	*x = GetESSyncTaskDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetESSyncTaskDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetESSyncTaskDetailReq) ProtoMessage() {}

func (x *GetESSyncTaskDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetESSyncTaskDetailReq.ProtoReflect.Descriptor instead.
func (*GetESSyncTaskDetailReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{150}
}

func (x *GetESSyncTaskDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetESSyncTaskDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool        `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Task    *ESSyncTask `protobuf:"bytes,3,opt,name=Task,proto3" json:"Task,omitempty"`
}

func (x *GetESSyncTaskDetailResp) Reset() {
	*x = GetESSyncTaskDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetESSyncTaskDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetESSyncTaskDetailResp) ProtoMessage() {}

func (x *GetESSyncTaskDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetESSyncTaskDetailResp.ProtoReflect.Descriptor instead.
func (*GetESSyncTaskDetailResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{151}
}

func (x *GetESSyncTaskDetailResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetESSyncTaskDetailResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetESSyncTaskDetailResp) GetTask() *ESSyncTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type EnableESSyncTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`               // 任务ID
	IsEnabled bool  `protobuf:"varint,2,opt,name=IsEnabled,proto3" json:"IsEnabled,omitempty"` // 是否启用
}

func (x *EnableESSyncTaskReq) Reset() {
	*x = EnableESSyncTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableESSyncTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableESSyncTaskReq) ProtoMessage() {}

func (x *EnableESSyncTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableESSyncTaskReq.ProtoReflect.Descriptor instead.
func (*EnableESSyncTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{152}
}

func (x *EnableESSyncTaskReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EnableESSyncTaskReq) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

type EnableESSyncTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *EnableESSyncTaskResp) Reset() {
	*x = EnableESSyncTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableESSyncTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableESSyncTaskResp) ProtoMessage() {}

func (x *EnableESSyncTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableESSyncTaskResp.ProtoReflect.Descriptor instead.
func (*EnableESSyncTaskResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{153}
}

func (x *EnableESSyncTaskResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EnableESSyncTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ES数据同步执行相关消息类型
type ExecuteESSyncByHostListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIpList     []string `protobuf:"bytes,1,rep,name=HostIpList,proto3" json:"HostIpList,omitempty"`         // 主机IP列表
	QueryTimeRange string   `protobuf:"bytes,2,opt,name=QueryTimeRange,proto3" json:"QueryTimeRange,omitempty"` // 查询时间范围
	EsEndpoint     string   `protobuf:"bytes,3,opt,name=EsEndpoint,proto3" json:"EsEndpoint,omitempty"`         // ES接口地址(可选,为空则使用默认配置)
	TaskName       string   `protobuf:"bytes,4,opt,name=TaskName,proto3" json:"TaskName,omitempty"`             // 任务名称(用于记录)
}

func (x *ExecuteESSyncByHostListReq) Reset() {
	*x = ExecuteESSyncByHostListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteESSyncByHostListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteESSyncByHostListReq) ProtoMessage() {}

func (x *ExecuteESSyncByHostListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteESSyncByHostListReq.ProtoReflect.Descriptor instead.
func (*ExecuteESSyncByHostListReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{154}
}

func (x *ExecuteESSyncByHostListReq) GetHostIpList() []string {
	if x != nil {
		return x.HostIpList
	}
	return nil
}

func (x *ExecuteESSyncByHostListReq) GetQueryTimeRange() string {
	if x != nil {
		return x.QueryTimeRange
	}
	return ""
}

func (x *ExecuteESSyncByHostListReq) GetEsEndpoint() string {
	if x != nil {
		return x.EsEndpoint
	}
	return ""
}

func (x *ExecuteESSyncByHostListReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type ExecuteESSyncByFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileContent    []byte `protobuf:"bytes,1,opt,name=FileContent,proto3" json:"FileContent,omitempty"`       // 文件内容
	Filename       string `protobuf:"bytes,2,opt,name=Filename,proto3" json:"Filename,omitempty"`             // 文件名
	QueryTimeRange string `protobuf:"bytes,3,opt,name=QueryTimeRange,proto3" json:"QueryTimeRange,omitempty"` // 查询时间范围
	EsEndpoint     string `protobuf:"bytes,4,opt,name=EsEndpoint,proto3" json:"EsEndpoint,omitempty"`         // ES接口地址(可选)
	TaskName       string `protobuf:"bytes,5,opt,name=TaskName,proto3" json:"TaskName,omitempty"`             // 任务名称
}

func (x *ExecuteESSyncByFileReq) Reset() {
	*x = ExecuteESSyncByFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteESSyncByFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteESSyncByFileReq) ProtoMessage() {}

func (x *ExecuteESSyncByFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteESSyncByFileReq.ProtoReflect.Descriptor instead.
func (*ExecuteESSyncByFileReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{155}
}

func (x *ExecuteESSyncByFileReq) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *ExecuteESSyncByFileReq) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ExecuteESSyncByFileReq) GetQueryTimeRange() string {
	if x != nil {
		return x.QueryTimeRange
	}
	return ""
}

func (x *ExecuteESSyncByFileReq) GetEsEndpoint() string {
	if x != nil {
		return x.EsEndpoint
	}
	return ""
}

func (x *ExecuteESSyncByFileReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

// ES全量同步请求(从ES查询group="DB组"的所有主机并同步到数据库)
type ExecuteESSyncFullSyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName      string `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`           // 组名,默认"DB组"
	QueryTimeRange string `protobuf:"bytes,2,opt,name=QueryTimeRange,proto3" json:"QueryTimeRange,omitempty"` // 查询时间范围,默认"30d"
	EsEndpoint     string `protobuf:"bytes,3,opt,name=EsEndpoint,proto3" json:"EsEndpoint,omitempty"`         // ES接口地址(可选,为空则使用默认配置)
	TaskName       string `protobuf:"bytes,4,opt,name=TaskName,proto3" json:"TaskName,omitempty"`             // 任务名称(用于记录)
}

func (x *ExecuteESSyncFullSyncReq) Reset() {
	*x = ExecuteESSyncFullSyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteESSyncFullSyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteESSyncFullSyncReq) ProtoMessage() {}

func (x *ExecuteESSyncFullSyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteESSyncFullSyncReq.ProtoReflect.Descriptor instead.
func (*ExecuteESSyncFullSyncReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{156}
}

func (x *ExecuteESSyncFullSyncReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ExecuteESSyncFullSyncReq) GetQueryTimeRange() string {
	if x != nil {
		return x.QueryTimeRange
	}
	return ""
}

func (x *ExecuteESSyncFullSyncReq) GetEsEndpoint() string {
	if x != nil {
		return x.EsEndpoint
	}
	return ""
}

func (x *ExecuteESSyncFullSyncReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

// ES全量同步响应
type ExecuteESSyncFullSyncResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success           bool     `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message           string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ExecutionId       int64    `protobuf:"varint,3,opt,name=ExecutionId,proto3" json:"ExecutionId,omitempty"`             // 执行记录ID
	TotalHosts        int32    `protobuf:"varint,4,opt,name=TotalHosts,proto3" json:"TotalHosts,omitempty"`               // ES中查询到的总主机数
	NewHostsCount     int32    `protobuf:"varint,5,opt,name=NewHostsCount,proto3" json:"NewHostsCount,omitempty"`         // 新增到hosts_pool的主机数
	UpdatedHostsCount int32    `protobuf:"varint,6,opt,name=UpdatedHostsCount,proto3" json:"UpdatedHostsCount,omitempty"` // 更新到server_resources的主机数
	FailedCount       int32    `protobuf:"varint,7,opt,name=FailedCount,proto3" json:"FailedCount,omitempty"`             // 失败数量
	NewHostIpList     []string `protobuf:"bytes,8,rep,name=NewHostIpList,proto3" json:"NewHostIpList,omitempty"`          // 新增的主机IP列表
	UpdatedHostIpList []string `protobuf:"bytes,9,rep,name=UpdatedHostIpList,proto3" json:"UpdatedHostIpList,omitempty"`  // 更新的主机IP列表
	FailedIpList      []string `protobuf:"bytes,10,rep,name=FailedIpList,proto3" json:"FailedIpList,omitempty"`           // 失败的主机IP列表
}

func (x *ExecuteESSyncFullSyncResp) Reset() {
	*x = ExecuteESSyncFullSyncResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteESSyncFullSyncResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteESSyncFullSyncResp) ProtoMessage() {}

func (x *ExecuteESSyncFullSyncResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteESSyncFullSyncResp.ProtoReflect.Descriptor instead.
func (*ExecuteESSyncFullSyncResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{157}
}

func (x *ExecuteESSyncFullSyncResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExecuteESSyncFullSyncResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExecuteESSyncFullSyncResp) GetExecutionId() int64 {
	if x != nil {
		return x.ExecutionId
	}
	return 0
}

func (x *ExecuteESSyncFullSyncResp) GetTotalHosts() int32 {
	if x != nil {
		return x.TotalHosts
	}
	return 0
}

func (x *ExecuteESSyncFullSyncResp) GetNewHostsCount() int32 {
	if x != nil {
		return x.NewHostsCount
	}
	return 0
}

func (x *ExecuteESSyncFullSyncResp) GetUpdatedHostsCount() int32 {
	if x != nil {
		return x.UpdatedHostsCount
	}
	return 0
}

func (x *ExecuteESSyncFullSyncResp) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *ExecuteESSyncFullSyncResp) GetNewHostIpList() []string {
	if x != nil {
		return x.NewHostIpList
	}
	return nil
}

func (x *ExecuteESSyncFullSyncResp) GetUpdatedHostIpList() []string {
	if x != nil {
		return x.UpdatedHostIpList
	}
	return nil
}

func (x *ExecuteESSyncFullSyncResp) GetFailedIpList() []string {
	if x != nil {
		return x.FailedIpList
	}
	return nil
}

// 统一响应结构（包含ES和CMSys的所有字段）
type ExecuteESSyncResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message      string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ExecutionId  int64  `protobuf:"varint,3,opt,name=ExecutionId,proto3" json:"ExecutionId,omitempty"`   // 执行记录ID
	TotalHosts   int32  `protobuf:"varint,4,opt,name=TotalHosts,proto3" json:"TotalHosts,omitempty"`     // 总主机数
	SuccessCount int32  `protobuf:"varint,5,opt,name=SuccessCount,proto3" json:"SuccessCount,omitempty"` // 成功数量
	FailedCount  int32  `protobuf:"varint,6,opt,name=FailedCount,proto3" json:"FailedCount,omitempty"`   // 失败数量
	// 原ES特有字段
	NotInPoolCount  int32    `protobuf:"varint,7,opt,name=NotInPoolCount,proto3" json:"NotInPoolCount,omitempty"`  // 不在池中数量
	NotInPoolIpList []string `protobuf:"bytes,8,rep,name=NotInPoolIpList,proto3" json:"NotInPoolIpList,omitempty"` // 不在池中的IP列表
	// 新增：为统一而添加的CMSys字段（ES时这些字段值为0/空）
	NotInDatasourceCount  int32    `protobuf:"varint,9,opt,name=NotInDatasourceCount,proto3" json:"NotInDatasourceCount,omitempty"`   // 数据源中不存在数量（CMSys专用，ES固定为0）
	NotInDatasourceIpList []string `protobuf:"bytes,10,rep,name=NotInDatasourceIpList,proto3" json:"NotInDatasourceIpList,omitempty"` // 数据源中不存在的IP列表（CMSys专用，ES固定为空）
	NewHostsCount         int32    `protobuf:"varint,11,opt,name=NewHostsCount,proto3" json:"NewHostsCount,omitempty"`                // 新增主机数（全量同步时有值）
	NewHostIpList         []string `protobuf:"bytes,12,rep,name=NewHostIpList,proto3" json:"NewHostIpList,omitempty"`                 // 新增主机IP列表（全量同步时有值）
	UpdatedHostsCount     int32    `protobuf:"varint,13,opt,name=UpdatedHostsCount,proto3" json:"UpdatedHostsCount,omitempty"`        // 更新主机数（全量同步时有值）
	UpdatedHostIpList     []string `protobuf:"bytes,14,rep,name=UpdatedHostIpList,proto3" json:"UpdatedHostIpList,omitempty"`         // 更新主机IP列表（全量同步时有值）
	// 通用字段
	SuccessIpList []string `protobuf:"bytes,15,rep,name=SuccessIpList,proto3" json:"SuccessIpList,omitempty"` // 成功的IP列表
	FailedIpList  []string `protobuf:"bytes,16,rep,name=FailedIpList,proto3" json:"FailedIpList,omitempty"`   // 失败的IP列表
}

func (x *ExecuteESSyncResp) Reset() {
	*x = ExecuteESSyncResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteESSyncResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteESSyncResp) ProtoMessage() {}

func (x *ExecuteESSyncResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteESSyncResp.ProtoReflect.Descriptor instead.
func (*ExecuteESSyncResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{158}
}

func (x *ExecuteESSyncResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExecuteESSyncResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExecuteESSyncResp) GetExecutionId() int64 {
	if x != nil {
		return x.ExecutionId
	}
	return 0
}

func (x *ExecuteESSyncResp) GetTotalHosts() int32 {
	if x != nil {
		return x.TotalHosts
	}
	return 0
}

func (x *ExecuteESSyncResp) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *ExecuteESSyncResp) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *ExecuteESSyncResp) GetNotInPoolCount() int32 {
	if x != nil {
		return x.NotInPoolCount
	}
	return 0
}

func (x *ExecuteESSyncResp) GetNotInPoolIpList() []string {
	if x != nil {
		return x.NotInPoolIpList
	}
	return nil
}

func (x *ExecuteESSyncResp) GetNotInDatasourceCount() int32 {
	if x != nil {
		return x.NotInDatasourceCount
	}
	return 0
}

func (x *ExecuteESSyncResp) GetNotInDatasourceIpList() []string {
	if x != nil {
		return x.NotInDatasourceIpList
	}
	return nil
}

func (x *ExecuteESSyncResp) GetNewHostsCount() int32 {
	if x != nil {
		return x.NewHostsCount
	}
	return 0
}

func (x *ExecuteESSyncResp) GetNewHostIpList() []string {
	if x != nil {
		return x.NewHostIpList
	}
	return nil
}

func (x *ExecuteESSyncResp) GetUpdatedHostsCount() int32 {
	if x != nil {
		return x.UpdatedHostsCount
	}
	return 0
}

func (x *ExecuteESSyncResp) GetUpdatedHostIpList() []string {
	if x != nil {
		return x.UpdatedHostIpList
	}
	return nil
}

func (x *ExecuteESSyncResp) GetSuccessIpList() []string {
	if x != nil {
		return x.SuccessIpList
	}
	return nil
}

func (x *ExecuteESSyncResp) GetFailedIpList() []string {
	if x != nil {
		return x.FailedIpList
	}
	return nil
}

type GetExternalSyncExecutionLogsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     int64  `protobuf:"varint,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`        // 任务ID(可选,为0则返回所有)
	Limit      int32  `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`          // 限制返回记录数，默认50
	DataSource string `protobuf:"bytes,3,opt,name=DataSource,proto3" json:"DataSource,omitempty"` // 数据源过滤(可选,为空则返回所有): elasticsearch, cmsys
}

func (x *GetExternalSyncExecutionLogsReq) Reset() {
	*x = GetExternalSyncExecutionLogsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalSyncExecutionLogsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalSyncExecutionLogsReq) ProtoMessage() {}

func (x *GetExternalSyncExecutionLogsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalSyncExecutionLogsReq.ProtoReflect.Descriptor instead.
func (*GetExternalSyncExecutionLogsReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{159}
}

func (x *GetExternalSyncExecutionLogsReq) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *GetExternalSyncExecutionLogsReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetExternalSyncExecutionLogsReq) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

type ExternalSyncExecutionLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TaskId          int64  `protobuf:"varint,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	TaskName        string `protobuf:"bytes,3,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	ExecutionTime   string `protobuf:"bytes,4,opt,name=ExecutionTime,proto3" json:"ExecutionTime,omitempty"`
	ExecutionStatus string `protobuf:"bytes,5,opt,name=ExecutionStatus,proto3" json:"ExecutionStatus,omitempty"` // success, failed, partial
	TotalHosts      int32  `protobuf:"varint,6,opt,name=TotalHosts,proto3" json:"TotalHosts,omitempty"`
	SuccessCount    int32  `protobuf:"varint,7,opt,name=SuccessCount,proto3" json:"SuccessCount,omitempty"`
	FailedCount     int32  `protobuf:"varint,8,opt,name=FailedCount,proto3" json:"FailedCount,omitempty"`
	NotInPoolCount  int32  `protobuf:"varint,9,opt,name=NotInPoolCount,proto3" json:"NotInPoolCount,omitempty"`
	ErrorMessage    string `protobuf:"bytes,10,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	DurationMs      int32  `protobuf:"varint,11,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"`
	QueryTimeRange  string `protobuf:"bytes,12,opt,name=QueryTimeRange,proto3" json:"QueryTimeRange,omitempty"`
	CreatedAt       string `protobuf:"bytes,13,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
}

func (x *ExternalSyncExecutionLog) Reset() {
	*x = ExternalSyncExecutionLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalSyncExecutionLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalSyncExecutionLog) ProtoMessage() {}

func (x *ExternalSyncExecutionLog) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalSyncExecutionLog.ProtoReflect.Descriptor instead.
func (*ExternalSyncExecutionLog) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{160}
}

func (x *ExternalSyncExecutionLog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExternalSyncExecutionLog) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ExternalSyncExecutionLog) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ExternalSyncExecutionLog) GetExecutionTime() string {
	if x != nil {
		return x.ExecutionTime
	}
	return ""
}

func (x *ExternalSyncExecutionLog) GetExecutionStatus() string {
	if x != nil {
		return x.ExecutionStatus
	}
	return ""
}

func (x *ExternalSyncExecutionLog) GetTotalHosts() int32 {
	if x != nil {
		return x.TotalHosts
	}
	return 0
}

func (x *ExternalSyncExecutionLog) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *ExternalSyncExecutionLog) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *ExternalSyncExecutionLog) GetNotInPoolCount() int32 {
	if x != nil {
		return x.NotInPoolCount
	}
	return 0
}

func (x *ExternalSyncExecutionLog) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ExternalSyncExecutionLog) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *ExternalSyncExecutionLog) GetQueryTimeRange() string {
	if x != nil {
		return x.QueryTimeRange
	}
	return ""
}

func (x *ExternalSyncExecutionLog) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type GetExternalSyncExecutionLogsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success       bool                        `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message       string                      `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ExecutionLogs []*ExternalSyncExecutionLog `protobuf:"bytes,3,rep,name=ExecutionLogs,proto3" json:"ExecutionLogs,omitempty"`
}

func (x *GetExternalSyncExecutionLogsResp) Reset() {
	*x = GetExternalSyncExecutionLogsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalSyncExecutionLogsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalSyncExecutionLogsResp) ProtoMessage() {}

func (x *GetExternalSyncExecutionLogsResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalSyncExecutionLogsResp.ProtoReflect.Descriptor instead.
func (*GetExternalSyncExecutionLogsResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{161}
}

func (x *GetExternalSyncExecutionLogsResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetExternalSyncExecutionLogsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetExternalSyncExecutionLogsResp) GetExecutionLogs() []*ExternalSyncExecutionLog {
	if x != nil {
		return x.ExecutionLogs
	}
	return nil
}

type GetExternalSyncExecutionDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId int64 `protobuf:"varint,1,opt,name=ExecutionId,proto3" json:"ExecutionId,omitempty"` // 执行记录ID
}

func (x *GetExternalSyncExecutionDetailReq) Reset() {
	*x = GetExternalSyncExecutionDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalSyncExecutionDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalSyncExecutionDetailReq) ProtoMessage() {}

func (x *GetExternalSyncExecutionDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalSyncExecutionDetailReq.ProtoReflect.Descriptor instead.
func (*GetExternalSyncExecutionDetailReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{162}
}

func (x *GetExternalSyncExecutionDetailReq) GetExecutionId() int64 {
	if x != nil {
		return x.ExecutionId
	}
	return 0
}

type ExternalSyncExecutionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIp         string  `protobuf:"bytes,1,opt,name=HostIp,proto3" json:"HostIp,omitempty"`
	HostName       string  `protobuf:"bytes,2,opt,name=HostName,proto3" json:"HostName,omitempty"`
	SyncStatus     string  `protobuf:"bytes,3,opt,name=SyncStatus,proto3" json:"SyncStatus,omitempty"` // success, failed, not_in_pool
	ErrorMessage   string  `protobuf:"bytes,4,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	MaxCpu         float64 `protobuf:"fixed64,5,opt,name=MaxCpu,proto3" json:"MaxCpu,omitempty"`
	AvgCpu         float64 `protobuf:"fixed64,6,opt,name=AvgCpu,proto3" json:"AvgCpu,omitempty"`
	MaxMemory      float64 `protobuf:"fixed64,7,opt,name=MaxMemory,proto3" json:"MaxMemory,omitempty"`
	AvgMemory      float64 `protobuf:"fixed64,8,opt,name=AvgMemory,proto3" json:"AvgMemory,omitempty"`
	MaxDisk        float64 `protobuf:"fixed64,9,opt,name=MaxDisk,proto3" json:"MaxDisk,omitempty"`
	AvgDisk        float64 `protobuf:"fixed64,10,opt,name=AvgDisk,proto3" json:"AvgDisk,omitempty"`
	DataPointCount int32   `protobuf:"varint,11,opt,name=DataPointCount,proto3" json:"DataPointCount,omitempty"`
	CreatedAt      string  `protobuf:"bytes,12,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
}

func (x *ExternalSyncExecutionDetail) Reset() {
	*x = ExternalSyncExecutionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalSyncExecutionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalSyncExecutionDetail) ProtoMessage() {}

func (x *ExternalSyncExecutionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalSyncExecutionDetail.ProtoReflect.Descriptor instead.
func (*ExternalSyncExecutionDetail) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{163}
}

func (x *ExternalSyncExecutionDetail) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *ExternalSyncExecutionDetail) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ExternalSyncExecutionDetail) GetSyncStatus() string {
	if x != nil {
		return x.SyncStatus
	}
	return ""
}

func (x *ExternalSyncExecutionDetail) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ExternalSyncExecutionDetail) GetMaxCpu() float64 {
	if x != nil {
		return x.MaxCpu
	}
	return 0
}

func (x *ExternalSyncExecutionDetail) GetAvgCpu() float64 {
	if x != nil {
		return x.AvgCpu
	}
	return 0
}

func (x *ExternalSyncExecutionDetail) GetMaxMemory() float64 {
	if x != nil {
		return x.MaxMemory
	}
	return 0
}

func (x *ExternalSyncExecutionDetail) GetAvgMemory() float64 {
	if x != nil {
		return x.AvgMemory
	}
	return 0
}

func (x *ExternalSyncExecutionDetail) GetMaxDisk() float64 {
	if x != nil {
		return x.MaxDisk
	}
	return 0
}

func (x *ExternalSyncExecutionDetail) GetAvgDisk() float64 {
	if x != nil {
		return x.AvgDisk
	}
	return 0
}

func (x *ExternalSyncExecutionDetail) GetDataPointCount() int32 {
	if x != nil {
		return x.DataPointCount
	}
	return 0
}

func (x *ExternalSyncExecutionDetail) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type ExternalSyncExecutionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionLog *ExternalSyncExecutionLog      `protobuf:"bytes,1,opt,name=ExecutionLog,proto3" json:"ExecutionLog,omitempty"`
	Details      []*ExternalSyncExecutionDetail `protobuf:"bytes,2,rep,name=Details,proto3" json:"Details,omitempty"`
}

func (x *ExternalSyncExecutionInfo) Reset() {
	*x = ExternalSyncExecutionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalSyncExecutionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalSyncExecutionInfo) ProtoMessage() {}

func (x *ExternalSyncExecutionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalSyncExecutionInfo.ProtoReflect.Descriptor instead.
func (*ExternalSyncExecutionInfo) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{164}
}

func (x *ExternalSyncExecutionInfo) GetExecutionLog() *ExternalSyncExecutionLog {
	if x != nil {
		return x.ExecutionLog
	}
	return nil
}

func (x *ExternalSyncExecutionInfo) GetDetails() []*ExternalSyncExecutionDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetExternalSyncExecutionDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                       `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string                     `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Data    *ExternalSyncExecutionInfo `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetExternalSyncExecutionDetailResp) Reset() {
	*x = GetExternalSyncExecutionDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalSyncExecutionDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalSyncExecutionDetailResp) ProtoMessage() {}

func (x *GetExternalSyncExecutionDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalSyncExecutionDetailResp.ProtoReflect.Descriptor instead.
func (*GetExternalSyncExecutionDetailResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{165}
}

func (x *GetExternalSyncExecutionDetailResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetExternalSyncExecutionDetailResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetExternalSyncExecutionDetailResp) GetData() *ExternalSyncExecutionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// CMSys数据同步执行相关消息类型
type ExecuteCMSysSyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    string `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`       // 查询参数
	TaskName string `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"` // 任务名称(用于记录)
}

func (x *ExecuteCMSysSyncReq) Reset() {
	*x = ExecuteCMSysSyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCMSysSyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCMSysSyncReq) ProtoMessage() {}

func (x *ExecuteCMSysSyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCMSysSyncReq.ProtoReflect.Descriptor instead.
func (*ExecuteCMSysSyncReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{166}
}

func (x *ExecuteCMSysSyncReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ExecuteCMSysSyncReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

// CMSys按文件执行同步请求
type ExecuteCMSysSyncByFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName    string `protobuf:"bytes,1,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	FileContent []byte `protobuf:"bytes,2,opt,name=FileContent,proto3" json:"FileContent,omitempty"` // 文件内容（IP列表，每行一个IP）
	Query       string `protobuf:"bytes,3,opt,name=Query,proto3" json:"Query,omitempty"`             // CMSys查询参数
}

func (x *ExecuteCMSysSyncByFileReq) Reset() {
	*x = ExecuteCMSysSyncByFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCMSysSyncByFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCMSysSyncByFileReq) ProtoMessage() {}

func (x *ExecuteCMSysSyncByFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCMSysSyncByFileReq.ProtoReflect.Descriptor instead.
func (*ExecuteCMSysSyncByFileReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{167}
}

func (x *ExecuteCMSysSyncByFileReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ExecuteCMSysSyncByFileReq) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *ExecuteCMSysSyncByFileReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// CMSys全量同步请求
type ExecuteCMSysSyncFullSyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string `protobuf:"bytes,1,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	Query    string `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"` // CMSys查询参数（如 "department=DB"）
}

func (x *ExecuteCMSysSyncFullSyncReq) Reset() {
	*x = ExecuteCMSysSyncFullSyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCMSysSyncFullSyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCMSysSyncFullSyncReq) ProtoMessage() {}

func (x *ExecuteCMSysSyncFullSyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCMSysSyncFullSyncReq.ProtoReflect.Descriptor instead.
func (*ExecuteCMSysSyncFullSyncReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{168}
}

func (x *ExecuteCMSysSyncFullSyncReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ExecuteCMSysSyncFullSyncReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// 统一响应结构（包含ES和CMSys的所有字段）
type ExecuteCMSysSyncResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message      string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ExecutionId  int64  `protobuf:"varint,3,opt,name=ExecutionId,proto3" json:"ExecutionId,omitempty"`   // 执行记录ID
	TotalHosts   int32  `protobuf:"varint,4,opt,name=TotalHosts,proto3" json:"TotalHosts,omitempty"`     // 总主机数
	SuccessCount int32  `protobuf:"varint,5,opt,name=SuccessCount,proto3" json:"SuccessCount,omitempty"` // 成功数量
	FailedCount  int32  `protobuf:"varint,6,opt,name=FailedCount,proto3" json:"FailedCount,omitempty"`   // 失败数量
	// 原CMSys特有字段
	NotInDatasourceCount  int32    `protobuf:"varint,7,opt,name=NotInDatasourceCount,proto3" json:"NotInDatasourceCount,omitempty"`  // 数据源中不存在数量
	NotInDatasourceIpList []string `protobuf:"bytes,8,rep,name=NotInDatasourceIpList,proto3" json:"NotInDatasourceIpList,omitempty"` // 数据源中不存在的IP列表
	// 新增：为统一而添加的ES字段（CMSys时这些字段值为0/空）
	NotInPoolCount    int32    `protobuf:"varint,9,opt,name=NotInPoolCount,proto3" json:"NotInPoolCount,omitempty"`        // 不在池中数量（ES专用，CMSys固定为0）
	NotInPoolIpList   []string `protobuf:"bytes,10,rep,name=NotInPoolIpList,proto3" json:"NotInPoolIpList,omitempty"`      // 不在池中IP列表（ES专用，CMSys固定为空）
	NewHostsCount     int32    `protobuf:"varint,11,opt,name=NewHostsCount,proto3" json:"NewHostsCount,omitempty"`         // 新增主机数（全量同步时有值）
	NewHostIpList     []string `protobuf:"bytes,12,rep,name=NewHostIpList,proto3" json:"NewHostIpList,omitempty"`          // 新增主机IP列表（全量同步时有值）
	UpdatedHostsCount int32    `protobuf:"varint,13,opt,name=UpdatedHostsCount,proto3" json:"UpdatedHostsCount,omitempty"` // 更新主机数（全量同步时有值）
	UpdatedHostIpList []string `protobuf:"bytes,14,rep,name=UpdatedHostIpList,proto3" json:"UpdatedHostIpList,omitempty"`  // 更新主机IP列表（全量同步时有值）
	// 通用字段
	SuccessIpList []string `protobuf:"bytes,15,rep,name=SuccessIpList,proto3" json:"SuccessIpList,omitempty"` // 成功的IP列表
	FailedIpList  []string `protobuf:"bytes,16,rep,name=FailedIpList,proto3" json:"FailedIpList,omitempty"`   // 失败的IP列表
}

func (x *ExecuteCMSysSyncResp) Reset() {
	*x = ExecuteCMSysSyncResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCMSysSyncResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCMSysSyncResp) ProtoMessage() {}

func (x *ExecuteCMSysSyncResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCMSysSyncResp.ProtoReflect.Descriptor instead.
func (*ExecuteCMSysSyncResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{169}
}

func (x *ExecuteCMSysSyncResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExecuteCMSysSyncResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExecuteCMSysSyncResp) GetExecutionId() int64 {
	if x != nil {
		return x.ExecutionId
	}
	return 0
}

func (x *ExecuteCMSysSyncResp) GetTotalHosts() int32 {
	if x != nil {
		return x.TotalHosts
	}
	return 0
}

func (x *ExecuteCMSysSyncResp) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *ExecuteCMSysSyncResp) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *ExecuteCMSysSyncResp) GetNotInDatasourceCount() int32 {
	if x != nil {
		return x.NotInDatasourceCount
	}
	return 0
}

func (x *ExecuteCMSysSyncResp) GetNotInDatasourceIpList() []string {
	if x != nil {
		return x.NotInDatasourceIpList
	}
	return nil
}

func (x *ExecuteCMSysSyncResp) GetNotInPoolCount() int32 {
	if x != nil {
		return x.NotInPoolCount
	}
	return 0
}

func (x *ExecuteCMSysSyncResp) GetNotInPoolIpList() []string {
	if x != nil {
		return x.NotInPoolIpList
	}
	return nil
}

func (x *ExecuteCMSysSyncResp) GetNewHostsCount() int32 {
	if x != nil {
		return x.NewHostsCount
	}
	return 0
}

func (x *ExecuteCMSysSyncResp) GetNewHostIpList() []string {
	if x != nil {
		return x.NewHostIpList
	}
	return nil
}

func (x *ExecuteCMSysSyncResp) GetUpdatedHostsCount() int32 {
	if x != nil {
		return x.UpdatedHostsCount
	}
	return 0
}

func (x *ExecuteCMSysSyncResp) GetUpdatedHostIpList() []string {
	if x != nil {
		return x.UpdatedHostIpList
	}
	return nil
}

func (x *ExecuteCMSysSyncResp) GetSuccessIpList() []string {
	if x != nil {
		return x.SuccessIpList
	}
	return nil
}

func (x *ExecuteCMSysSyncResp) GetFailedIpList() []string {
	if x != nil {
		return x.FailedIpList
	}
	return nil
}

// 创建外部同步任务请求
type CreateExternalSyncTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSource     string `protobuf:"bytes,1,opt,name=DataSource,proto3" json:"DataSource,omitempty"`         // 数据源类型: elasticsearch, cmsys
	TaskName       string `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`             // 任务名称
	Description    string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`       // 任务描述
	CronExpression string `protobuf:"bytes,4,opt,name=CronExpression,proto3" json:"CronExpression,omitempty"` // Cron表达式
	QueryTimeRange string `protobuf:"bytes,5,opt,name=QueryTimeRange,proto3" json:"QueryTimeRange,omitempty"` // 查询时间范围(如7d,30d) - ES专用
	CreatedBy      string `protobuf:"bytes,6,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`           // 创建者
	// ES专用字段
	EsEndpoint     string `protobuf:"bytes,7,opt,name=EsEndpoint,proto3" json:"EsEndpoint,omitempty"`         // ES接口地址
	EsIndexPattern string `protobuf:"bytes,8,opt,name=EsIndexPattern,proto3" json:"EsIndexPattern,omitempty"` // ES索引模式
	// CMSys专用字段（未来扩展）
	CmsysEndpoint string `protobuf:"bytes,9,opt,name=CmsysEndpoint,proto3" json:"CmsysEndpoint,omitempty"` // CMSys接口地址
	CmsysQuery    string `protobuf:"bytes,10,opt,name=CmsysQuery,proto3" json:"CmsysQuery,omitempty"`      // CMSys查询参数
}

func (x *CreateExternalSyncTaskReq) Reset() {
	*x = CreateExternalSyncTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExternalSyncTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExternalSyncTaskReq) ProtoMessage() {}

func (x *CreateExternalSyncTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExternalSyncTaskReq.ProtoReflect.Descriptor instead.
func (*CreateExternalSyncTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{170}
}

func (x *CreateExternalSyncTaskReq) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *CreateExternalSyncTaskReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CreateExternalSyncTaskReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateExternalSyncTaskReq) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *CreateExternalSyncTaskReq) GetQueryTimeRange() string {
	if x != nil {
		return x.QueryTimeRange
	}
	return ""
}

func (x *CreateExternalSyncTaskReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateExternalSyncTaskReq) GetEsEndpoint() string {
	if x != nil {
		return x.EsEndpoint
	}
	return ""
}

func (x *CreateExternalSyncTaskReq) GetEsIndexPattern() string {
	if x != nil {
		return x.EsIndexPattern
	}
	return ""
}

func (x *CreateExternalSyncTaskReq) GetCmsysEndpoint() string {
	if x != nil {
		return x.CmsysEndpoint
	}
	return ""
}

func (x *CreateExternalSyncTaskReq) GetCmsysQuery() string {
	if x != nil {
		return x.CmsysQuery
	}
	return ""
}

type CreateExternalSyncTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	TaskId  int64  `protobuf:"varint,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *CreateExternalSyncTaskResp) Reset() {
	*x = CreateExternalSyncTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExternalSyncTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExternalSyncTaskResp) ProtoMessage() {}

func (x *CreateExternalSyncTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExternalSyncTaskResp.ProtoReflect.Descriptor instead.
func (*CreateExternalSyncTaskResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{171}
}

func (x *CreateExternalSyncTaskResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateExternalSyncTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateExternalSyncTaskResp) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

// 更新外部同步任务请求
type UpdateExternalSyncTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                        // 任务ID
	DataSource     string `protobuf:"bytes,2,opt,name=DataSource,proto3" json:"DataSource,omitempty"`         // 数据源类型: elasticsearch, cmsys
	TaskName       string `protobuf:"bytes,3,opt,name=TaskName,proto3" json:"TaskName,omitempty"`             // 任务名称
	Description    string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`       // 任务描述
	CronExpression string `protobuf:"bytes,5,opt,name=CronExpression,proto3" json:"CronExpression,omitempty"` // Cron表达式
	QueryTimeRange string `protobuf:"bytes,6,opt,name=QueryTimeRange,proto3" json:"QueryTimeRange,omitempty"` // 查询时间范围 - ES专用
	// ES专用字段
	EsEndpoint     string `protobuf:"bytes,7,opt,name=EsEndpoint,proto3" json:"EsEndpoint,omitempty"`         // ES接口地址
	EsIndexPattern string `protobuf:"bytes,8,opt,name=EsIndexPattern,proto3" json:"EsIndexPattern,omitempty"` // ES索引模式
	// CMSys专用字段（未来扩展）
	CmsysEndpoint string `protobuf:"bytes,9,opt,name=CmsysEndpoint,proto3" json:"CmsysEndpoint,omitempty"` // CMSys接口地址
	CmsysQuery    string `protobuf:"bytes,10,opt,name=CmsysQuery,proto3" json:"CmsysQuery,omitempty"`      // CMSys查询参数
}

func (x *UpdateExternalSyncTaskReq) Reset() {
	*x = UpdateExternalSyncTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExternalSyncTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExternalSyncTaskReq) ProtoMessage() {}

func (x *UpdateExternalSyncTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExternalSyncTaskReq.ProtoReflect.Descriptor instead.
func (*UpdateExternalSyncTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{172}
}

func (x *UpdateExternalSyncTaskReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateExternalSyncTaskReq) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *UpdateExternalSyncTaskReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpdateExternalSyncTaskReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateExternalSyncTaskReq) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *UpdateExternalSyncTaskReq) GetQueryTimeRange() string {
	if x != nil {
		return x.QueryTimeRange
	}
	return ""
}

func (x *UpdateExternalSyncTaskReq) GetEsEndpoint() string {
	if x != nil {
		return x.EsEndpoint
	}
	return ""
}

func (x *UpdateExternalSyncTaskReq) GetEsIndexPattern() string {
	if x != nil {
		return x.EsIndexPattern
	}
	return ""
}

func (x *UpdateExternalSyncTaskReq) GetCmsysEndpoint() string {
	if x != nil {
		return x.CmsysEndpoint
	}
	return ""
}

func (x *UpdateExternalSyncTaskReq) GetCmsysQuery() string {
	if x != nil {
		return x.CmsysQuery
	}
	return ""
}

type UpdateExternalSyncTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *UpdateExternalSyncTaskResp) Reset() {
	*x = UpdateExternalSyncTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExternalSyncTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExternalSyncTaskResp) ProtoMessage() {}

func (x *UpdateExternalSyncTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExternalSyncTaskResp.ProtoReflect.Descriptor instead.
func (*UpdateExternalSyncTaskResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{173}
}

func (x *UpdateExternalSyncTaskResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateExternalSyncTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 删除外部同步任务请求
type DeleteExternalSyncTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                // 任务ID
	DataSource string `protobuf:"bytes,2,opt,name=DataSource,proto3" json:"DataSource,omitempty"` // 数据源类型: elasticsearch, cmsys
}

func (x *DeleteExternalSyncTaskReq) Reset() {
	*x = DeleteExternalSyncTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExternalSyncTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExternalSyncTaskReq) ProtoMessage() {}

func (x *DeleteExternalSyncTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExternalSyncTaskReq.ProtoReflect.Descriptor instead.
func (*DeleteExternalSyncTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{174}
}

func (x *DeleteExternalSyncTaskReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteExternalSyncTaskReq) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

type DeleteExternalSyncTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *DeleteExternalSyncTaskResp) Reset() {
	*x = DeleteExternalSyncTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExternalSyncTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExternalSyncTaskResp) ProtoMessage() {}

func (x *DeleteExternalSyncTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExternalSyncTaskResp.ProtoReflect.Descriptor instead.
func (*DeleteExternalSyncTaskResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{175}
}

func (x *DeleteExternalSyncTaskResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteExternalSyncTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 获取外部同步任务列表请求
type GetExternalSyncTasksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSource  string `protobuf:"bytes,1,opt,name=DataSource,proto3" json:"DataSource,omitempty"`    // 数据源类型: elasticsearch, cmsys
	EnabledOnly bool   `protobuf:"varint,2,opt,name=EnabledOnly,proto3" json:"EnabledOnly,omitempty"` // 是否只返回启用的任务
}

func (x *GetExternalSyncTasksReq) Reset() {
	*x = GetExternalSyncTasksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalSyncTasksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalSyncTasksReq) ProtoMessage() {}

func (x *GetExternalSyncTasksReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalSyncTasksReq.ProtoReflect.Descriptor instead.
func (*GetExternalSyncTasksReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{176}
}

func (x *GetExternalSyncTasksReq) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *GetExternalSyncTasksReq) GetEnabledOnly() bool {
	if x != nil {
		return x.EnabledOnly
	}
	return false
}

// 统一的外部同步任务信息（包含ES和CMSys的所有字段）
type ExternalSyncTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DataSource        string `protobuf:"bytes,2,opt,name=DataSource,proto3" json:"DataSource,omitempty"` // 数据源类型
	TaskName          string `protobuf:"bytes,3,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	Description       string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	CronExpression    string `protobuf:"bytes,5,opt,name=CronExpression,proto3" json:"CronExpression,omitempty"`
	QueryTimeRange    string `protobuf:"bytes,6,opt,name=QueryTimeRange,proto3" json:"QueryTimeRange,omitempty"`
	IsEnabled         bool   `protobuf:"varint,7,opt,name=IsEnabled,proto3" json:"IsEnabled,omitempty"`
	CreatedBy         string `protobuf:"bytes,8,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	CreatedAt         string `protobuf:"bytes,9,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         string `protobuf:"bytes,10,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	LastExecutionTime string `protobuf:"bytes,11,opt,name=LastExecutionTime,proto3" json:"LastExecutionTime,omitempty"`
	NextExecutionTime string `protobuf:"bytes,12,opt,name=NextExecutionTime,proto3" json:"NextExecutionTime,omitempty"`
	// ES专用字段
	EsEndpoint     string `protobuf:"bytes,13,opt,name=EsEndpoint,proto3" json:"EsEndpoint,omitempty"`
	EsIndexPattern string `protobuf:"bytes,14,opt,name=EsIndexPattern,proto3" json:"EsIndexPattern,omitempty"`
	// CMSys专用字段（未来扩展）
	CmsysEndpoint string `protobuf:"bytes,15,opt,name=CmsysEndpoint,proto3" json:"CmsysEndpoint,omitempty"`
	CmsysQuery    string `protobuf:"bytes,16,opt,name=CmsysQuery,proto3" json:"CmsysQuery,omitempty"`
}

func (x *ExternalSyncTask) Reset() {
	*x = ExternalSyncTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalSyncTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalSyncTask) ProtoMessage() {}

func (x *ExternalSyncTask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalSyncTask.ProtoReflect.Descriptor instead.
func (*ExternalSyncTask) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{177}
}

func (x *ExternalSyncTask) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExternalSyncTask) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *ExternalSyncTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ExternalSyncTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExternalSyncTask) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *ExternalSyncTask) GetQueryTimeRange() string {
	if x != nil {
		return x.QueryTimeRange
	}
	return ""
}

func (x *ExternalSyncTask) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *ExternalSyncTask) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ExternalSyncTask) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ExternalSyncTask) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ExternalSyncTask) GetLastExecutionTime() string {
	if x != nil {
		return x.LastExecutionTime
	}
	return ""
}

func (x *ExternalSyncTask) GetNextExecutionTime() string {
	if x != nil {
		return x.NextExecutionTime
	}
	return ""
}

func (x *ExternalSyncTask) GetEsEndpoint() string {
	if x != nil {
		return x.EsEndpoint
	}
	return ""
}

func (x *ExternalSyncTask) GetEsIndexPattern() string {
	if x != nil {
		return x.EsIndexPattern
	}
	return ""
}

func (x *ExternalSyncTask) GetCmsysEndpoint() string {
	if x != nil {
		return x.CmsysEndpoint
	}
	return ""
}

func (x *ExternalSyncTask) GetCmsysQuery() string {
	if x != nil {
		return x.CmsysQuery
	}
	return ""
}

type GetExternalSyncTasksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Tasks   []*ExternalSyncTask `protobuf:"bytes,3,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *GetExternalSyncTasksResp) Reset() {
	*x = GetExternalSyncTasksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalSyncTasksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalSyncTasksResp) ProtoMessage() {}

func (x *GetExternalSyncTasksResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalSyncTasksResp.ProtoReflect.Descriptor instead.
func (*GetExternalSyncTasksResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{178}
}

func (x *GetExternalSyncTasksResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetExternalSyncTasksResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetExternalSyncTasksResp) GetTasks() []*ExternalSyncTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// 获取外部同步任务详情请求
type GetExternalSyncTaskDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                // 任务ID
	DataSource string `protobuf:"bytes,2,opt,name=DataSource,proto3" json:"DataSource,omitempty"` // 数据源类型: elasticsearch, cmsys
}

func (x *GetExternalSyncTaskDetailReq) Reset() {
	*x = GetExternalSyncTaskDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalSyncTaskDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalSyncTaskDetailReq) ProtoMessage() {}

func (x *GetExternalSyncTaskDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalSyncTaskDetailReq.ProtoReflect.Descriptor instead.
func (*GetExternalSyncTaskDetailReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{179}
}

func (x *GetExternalSyncTaskDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetExternalSyncTaskDetailReq) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

type GetExternalSyncTaskDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool              `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Task    *ExternalSyncTask `protobuf:"bytes,3,opt,name=Task,proto3" json:"Task,omitempty"`
}

func (x *GetExternalSyncTaskDetailResp) Reset() {
	*x = GetExternalSyncTaskDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalSyncTaskDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalSyncTaskDetailResp) ProtoMessage() {}

func (x *GetExternalSyncTaskDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalSyncTaskDetailResp.ProtoReflect.Descriptor instead.
func (*GetExternalSyncTaskDetailResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{180}
}

func (x *GetExternalSyncTaskDetailResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetExternalSyncTaskDetailResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetExternalSyncTaskDetailResp) GetTask() *ExternalSyncTask {
	if x != nil {
		return x.Task
	}
	return nil
}

// 启用/禁用外部同步任务请求
type EnableExternalSyncTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                // 任务ID
	DataSource string `protobuf:"bytes,2,opt,name=DataSource,proto3" json:"DataSource,omitempty"` // 数据源类型: elasticsearch, cmsys
	IsEnabled  bool   `protobuf:"varint,3,opt,name=IsEnabled,proto3" json:"IsEnabled,omitempty"`  // 是否启用
}

func (x *EnableExternalSyncTaskReq) Reset() {
	*x = EnableExternalSyncTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableExternalSyncTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableExternalSyncTaskReq) ProtoMessage() {}

func (x *EnableExternalSyncTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableExternalSyncTaskReq.ProtoReflect.Descriptor instead.
func (*EnableExternalSyncTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{181}
}

func (x *EnableExternalSyncTaskReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EnableExternalSyncTaskReq) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *EnableExternalSyncTaskReq) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

type EnableExternalSyncTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *EnableExternalSyncTaskResp) Reset() {
	*x = EnableExternalSyncTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableExternalSyncTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableExternalSyncTaskResp) ProtoMessage() {}

func (x *EnableExternalSyncTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableExternalSyncTaskResp.ProtoReflect.Descriptor instead.
func (*EnableExternalSyncTaskResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{182}
}

func (x *EnableExternalSyncTaskResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EnableExternalSyncTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 按主机列表执行外部同步请求
type ExecuteExternalSyncByHostListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSource string   `protobuf:"bytes,1,opt,name=DataSource,proto3" json:"DataSource,omitempty"` // 数据源类型: elasticsearch, cmsys
	HostIpList []string `protobuf:"bytes,2,rep,name=HostIpList,proto3" json:"HostIpList,omitempty"` // 主机IP列表
	TaskName   string   `protobuf:"bytes,3,opt,name=TaskName,proto3" json:"TaskName,omitempty"`     // 任务名称(用于记录)
	// ES专用字段
	QueryTimeRange string `protobuf:"bytes,4,opt,name=QueryTimeRange,proto3" json:"QueryTimeRange,omitempty"` // 查询时间范围
	EsEndpoint     string `protobuf:"bytes,5,opt,name=EsEndpoint,proto3" json:"EsEndpoint,omitempty"`         // ES接口地址(可选)
	// CMSys专用字段
	CmsysQuery string `protobuf:"bytes,6,opt,name=CmsysQuery,proto3" json:"CmsysQuery,omitempty"` // CMSys查询参数(可选)
}

func (x *ExecuteExternalSyncByHostListReq) Reset() {
	*x = ExecuteExternalSyncByHostListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteExternalSyncByHostListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteExternalSyncByHostListReq) ProtoMessage() {}

func (x *ExecuteExternalSyncByHostListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteExternalSyncByHostListReq.ProtoReflect.Descriptor instead.
func (*ExecuteExternalSyncByHostListReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{183}
}

func (x *ExecuteExternalSyncByHostListReq) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *ExecuteExternalSyncByHostListReq) GetHostIpList() []string {
	if x != nil {
		return x.HostIpList
	}
	return nil
}

func (x *ExecuteExternalSyncByHostListReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ExecuteExternalSyncByHostListReq) GetQueryTimeRange() string {
	if x != nil {
		return x.QueryTimeRange
	}
	return ""
}

func (x *ExecuteExternalSyncByHostListReq) GetEsEndpoint() string {
	if x != nil {
		return x.EsEndpoint
	}
	return ""
}

func (x *ExecuteExternalSyncByHostListReq) GetCmsysQuery() string {
	if x != nil {
		return x.CmsysQuery
	}
	return ""
}

// 按文件执行外部同步请求
type ExecuteExternalSyncByFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSource  string `protobuf:"bytes,1,opt,name=DataSource,proto3" json:"DataSource,omitempty"`   // 数据源类型: elasticsearch, cmsys
	FileContent []byte `protobuf:"bytes,2,opt,name=FileContent,proto3" json:"FileContent,omitempty"` // 文件内容（IP列表，每行一个IP）
	Filename    string `protobuf:"bytes,3,opt,name=Filename,proto3" json:"Filename,omitempty"`       // 文件名
	TaskName    string `protobuf:"bytes,4,opt,name=TaskName,proto3" json:"TaskName,omitempty"`       // 任务名称(用于记录)
	// ES专用字段
	QueryTimeRange string `protobuf:"bytes,5,opt,name=QueryTimeRange,proto3" json:"QueryTimeRange,omitempty"` // 查询时间范围
	EsEndpoint     string `protobuf:"bytes,6,opt,name=EsEndpoint,proto3" json:"EsEndpoint,omitempty"`         // ES接口地址(可选)
	// CMSys专用字段
	CmsysQuery string `protobuf:"bytes,7,opt,name=CmsysQuery,proto3" json:"CmsysQuery,omitempty"` // CMSys查询参数(可选)
}

func (x *ExecuteExternalSyncByFileReq) Reset() {
	*x = ExecuteExternalSyncByFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteExternalSyncByFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteExternalSyncByFileReq) ProtoMessage() {}

func (x *ExecuteExternalSyncByFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteExternalSyncByFileReq.ProtoReflect.Descriptor instead.
func (*ExecuteExternalSyncByFileReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{184}
}

func (x *ExecuteExternalSyncByFileReq) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *ExecuteExternalSyncByFileReq) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *ExecuteExternalSyncByFileReq) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ExecuteExternalSyncByFileReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ExecuteExternalSyncByFileReq) GetQueryTimeRange() string {
	if x != nil {
		return x.QueryTimeRange
	}
	return ""
}

func (x *ExecuteExternalSyncByFileReq) GetEsEndpoint() string {
	if x != nil {
		return x.EsEndpoint
	}
	return ""
}

func (x *ExecuteExternalSyncByFileReq) GetCmsysQuery() string {
	if x != nil {
		return x.CmsysQuery
	}
	return ""
}

// 全量同步请求
type ExecuteExternalSyncFullSyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSource string `protobuf:"bytes,1,opt,name=DataSource,proto3" json:"DataSource,omitempty"` // 数据源类型: elasticsearch, cmsys
	TaskName   string `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`     // 任务名称(用于记录)
	// ES专用字段
	GroupName      string `protobuf:"bytes,3,opt,name=GroupName,proto3" json:"GroupName,omitempty"`           // 组名,默认"DB组"
	QueryTimeRange string `protobuf:"bytes,4,opt,name=QueryTimeRange,proto3" json:"QueryTimeRange,omitempty"` // 查询时间范围,默认"30d"
	EsEndpoint     string `protobuf:"bytes,5,opt,name=EsEndpoint,proto3" json:"EsEndpoint,omitempty"`         // ES接口地址(可选)
	// CMSys专用字段
	CmsysQuery string `protobuf:"bytes,6,opt,name=CmsysQuery,proto3" json:"CmsysQuery,omitempty"` // CMSys查询参数(如 "department=DB")
}

func (x *ExecuteExternalSyncFullSyncReq) Reset() {
	*x = ExecuteExternalSyncFullSyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteExternalSyncFullSyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteExternalSyncFullSyncReq) ProtoMessage() {}

func (x *ExecuteExternalSyncFullSyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteExternalSyncFullSyncReq.ProtoReflect.Descriptor instead.
func (*ExecuteExternalSyncFullSyncReq) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{185}
}

func (x *ExecuteExternalSyncFullSyncReq) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *ExecuteExternalSyncFullSyncReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ExecuteExternalSyncFullSyncReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ExecuteExternalSyncFullSyncReq) GetQueryTimeRange() string {
	if x != nil {
		return x.QueryTimeRange
	}
	return ""
}

func (x *ExecuteExternalSyncFullSyncReq) GetEsEndpoint() string {
	if x != nil {
		return x.EsEndpoint
	}
	return ""
}

func (x *ExecuteExternalSyncFullSyncReq) GetCmsysQuery() string {
	if x != nil {
		return x.CmsysQuery
	}
	return ""
}

// 统一的执行响应（复用 ExecuteESSyncResp，它已包含所有字段）
type ExecuteExternalSyncResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message      string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ExecutionId  int64  `protobuf:"varint,3,opt,name=ExecutionId,proto3" json:"ExecutionId,omitempty"`   // 执行记录ID
	TotalHosts   int32  `protobuf:"varint,4,opt,name=TotalHosts,proto3" json:"TotalHosts,omitempty"`     // 总主机数
	SuccessCount int32  `protobuf:"varint,5,opt,name=SuccessCount,proto3" json:"SuccessCount,omitempty"` // 成功数量
	FailedCount  int32  `protobuf:"varint,6,opt,name=FailedCount,proto3" json:"FailedCount,omitempty"`   // 失败数量
	// ES特有字段
	NotInPoolCount  int32    `protobuf:"varint,7,opt,name=NotInPoolCount,proto3" json:"NotInPoolCount,omitempty"`  // 不在池中数量
	NotInPoolIpList []string `protobuf:"bytes,8,rep,name=NotInPoolIpList,proto3" json:"NotInPoolIpList,omitempty"` // 不在池中的IP列表
	// CMSys特有字段
	NotInDatasourceCount  int32    `protobuf:"varint,9,opt,name=NotInDatasourceCount,proto3" json:"NotInDatasourceCount,omitempty"`   // 数据源中不存在数量
	NotInDatasourceIpList []string `protobuf:"bytes,10,rep,name=NotInDatasourceIpList,proto3" json:"NotInDatasourceIpList,omitempty"` // 数据源中不存在的IP列表
	// 全量同步字段
	NewHostsCount     int32    `protobuf:"varint,11,opt,name=NewHostsCount,proto3" json:"NewHostsCount,omitempty"`         // 新增主机数
	NewHostIpList     []string `protobuf:"bytes,12,rep,name=NewHostIpList,proto3" json:"NewHostIpList,omitempty"`          // 新增主机IP列表
	UpdatedHostsCount int32    `protobuf:"varint,13,opt,name=UpdatedHostsCount,proto3" json:"UpdatedHostsCount,omitempty"` // 更新主机数
	UpdatedHostIpList []string `protobuf:"bytes,14,rep,name=UpdatedHostIpList,proto3" json:"UpdatedHostIpList,omitempty"`  // 更新主机IP列表
	// 通用字段
	SuccessIpList []string `protobuf:"bytes,15,rep,name=SuccessIpList,proto3" json:"SuccessIpList,omitempty"` // 成功的IP列表
	FailedIpList  []string `protobuf:"bytes,16,rep,name=FailedIpList,proto3" json:"FailedIpList,omitempty"`   // 失败的IP列表
}

func (x *ExecuteExternalSyncResp) Reset() {
	*x = ExecuteExternalSyncResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmpool_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteExternalSyncResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteExternalSyncResp) ProtoMessage() {}

func (x *ExecuteExternalSyncResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmpool_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteExternalSyncResp.ProtoReflect.Descriptor instead.
func (*ExecuteExternalSyncResp) Descriptor() ([]byte, []int) {
	return file_proto_cmpool_proto_rawDescGZIP(), []int{186}
}

func (x *ExecuteExternalSyncResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExecuteExternalSyncResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExecuteExternalSyncResp) GetExecutionId() int64 {
	if x != nil {
		return x.ExecutionId
	}
	return 0
}

func (x *ExecuteExternalSyncResp) GetTotalHosts() int32 {
	if x != nil {
		return x.TotalHosts
	}
	return 0
}

func (x *ExecuteExternalSyncResp) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *ExecuteExternalSyncResp) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *ExecuteExternalSyncResp) GetNotInPoolCount() int32 {
	if x != nil {
		return x.NotInPoolCount
	}
	return 0
}

func (x *ExecuteExternalSyncResp) GetNotInPoolIpList() []string {
	if x != nil {
		return x.NotInPoolIpList
	}
	return nil
}

func (x *ExecuteExternalSyncResp) GetNotInDatasourceCount() int32 {
	if x != nil {
		return x.NotInDatasourceCount
	}
	return 0
}

func (x *ExecuteExternalSyncResp) GetNotInDatasourceIpList() []string {
	if x != nil {
		return x.NotInDatasourceIpList
	}
	return nil
}

func (x *ExecuteExternalSyncResp) GetNewHostsCount() int32 {
	if x != nil {
		return x.NewHostsCount
	}
	return 0
}

func (x *ExecuteExternalSyncResp) GetNewHostIpList() []string {
	if x != nil {
		return x.NewHostIpList
	}
	return nil
}

func (x *ExecuteExternalSyncResp) GetUpdatedHostsCount() int32 {
	if x != nil {
		return x.UpdatedHostsCount
	}
	return 0
}

func (x *ExecuteExternalSyncResp) GetUpdatedHostIpList() []string {
	if x != nil {
		return x.UpdatedHostIpList
	}
	return nil
}

func (x *ExecuteExternalSyncResp) GetSuccessIpList() []string {
	if x != nil {
		return x.SuccessIpList
	}
	return nil
}

func (x *ExecuteExternalSyncResp) GetFailedIpList() []string {
	if x != nil {
		return x.FailedIpList
	}
	return nil
}

var File_proto_cmpool_proto protoreflect.FileDescriptor

var file_proto_cmpool_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x29, 0x0a, 0x11,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x2d, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x2c, 0x0a, 0x0c, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x43, 0x0a, 0x0d, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x12, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x79,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x44,
	0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x04, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x75,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x48, 0x33, 0x63, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x48, 0x33, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x33, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x33, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x48,
	0x6f, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x66,
	0x48, 0x33, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x66, 0x48, 0x33, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x33, 0x63, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x33,
	0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x33, 0x63, 0x48,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x33, 0x63,
	0x48, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x52, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x22, 0x49, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x63, 0x70, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x63, 0x70, 0x75,
	0x73, 0x22, 0x43, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x4c,
	0x6f, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x65, 0x61, 0x66, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x61, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x0f, 0x49, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x26, 0x0a, 0x0e, 0x43, 0x6d, 0x64, 0x62, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6f, 0x0a, 0x0f, 0x43, 0x6d, 0x64, 0x62, 0x4f,
	0x70, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x6d, 0x64, 0x62, 0x4f, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x6a, 0x0a, 0x0a, 0x43, 0x6d, 0x64, 0x62,
	0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x42, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x44, 0x42, 0x54, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x0d,
	0x53, 0x79, 0x6e, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x42, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xde, 0x05, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f,
	0x73, 0x74, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x48, 0x33, 0x63, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x48, 0x33, 0x63,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x33, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x33, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x44, 0x69, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x52, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x43, 0x70, 0x75, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x56, 0x43, 0x70, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x66,
	0x48, 0x33, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x66, 0x48, 0x33, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x33, 0x63, 0x49,
	0x6d, 0x67, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x33, 0x63, 0x49,
	0x6d, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x33, 0x63, 0x48, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x33, 0x63, 0x48, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x4c, 0x65, 0x61, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x46, 0x72,
	0x6f, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x64, 0x63, 0x49, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x64, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x64, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49,
	0x64, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x05, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x0f,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x0f, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x44, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x44, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x22, 0x46, 0x0a, 0x10, 0x53, 0x6f, 0x66, 0x74,
	0x44, 0x65, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x29, 0x0a, 0x0f, 0x48, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x10, 0x48,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x50, 0x6f, 0x6f, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xcb, 0x03, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x41, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x44, 0x42, 0x41, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x42, 0x41, 0x12,
	0x0e, 0x0a, 0x02, 0x51, 0x41, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x51, 0x41, 0x22,
	0x55, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x07, 0x41,
	0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa2, 0x06, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x73,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x6f,
	0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x33, 0x63, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x48, 0x33, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x48, 0x33, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x48, 0x33, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x69, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x52, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x61,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x43, 0x70, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x56, 0x43, 0x70, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x66, 0x48, 0x33, 0x63, 0x53, 0x79,
	0x6e, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x66, 0x48, 0x33, 0x63, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x33, 0x63, 0x49, 0x6d, 0x67, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x33, 0x63, 0x49, 0x6d, 0x67, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x48, 0x33, 0x63, 0x48, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x48, 0x33, 0x63, 0x48, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x61,
	0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c,
	0x65, 0x61, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x61, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52,
	0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x61, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52,
	0x61, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x61, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x52,
	0x07, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x49, 0x64, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x07, 0x49, 0x64, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x7c, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x48,
	0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x2e, 0x0a, 0x11, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x12, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x25, 0x0a,
	0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70,
	0x70, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41,
	0x70, 0x70, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x50,
	0x6f, 0x72, 0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41,
	0x70, 0x70, 0x50, 0x6f, 0x72, 0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70,
	0x70, 0x44, 0x65, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x70, 0x44,
	0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x44, 0x42, 0x41, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x70, 0x44, 0x42, 0x41, 0x22, 0x36, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x70, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x45, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x0e, 0x4d, 0x64, 0x66,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x70, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x45, 0x0a, 0x0f, 0x4d, 0x64, 0x66, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x73, 0x22, 0x45, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb2, 0x03, 0x0a, 0x08, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x41, 0x70, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x12,
	0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x22, 0xbe, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a,
	0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x7d, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xb2, 0x06, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x55,
	0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x64, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x55, 0x73, 0x65,
	0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x43, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x50, 0x55, 0x43, 0x6f, 0x72, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x50, 0x55, 0x4c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x43, 0x50, 0x55, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x08, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x49, 0x64, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49,
	0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x07, 0x49, 0x64, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x70,
	0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x69, 0x73,
	0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x44,
	0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x41, 0x76, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x69, 0x73,
	0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x12,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x87, 0x01, 0x0a, 0x0f, 0x48, 0x6f,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xdd, 0x06, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x4d,
	0x61, 0x78, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x64, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x50, 0x55, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x61, 0x78, 0x43, 0x50, 0x55, 0x4c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x43, 0x50, 0x55, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48,
	0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48,
	0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x07,
	0x49, 0x64, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x07,
	0x49, 0x64, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x41, 0x76, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x70, 0x75, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x6d,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12,
	0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x41, 0x76, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4d, 0x65,
	0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x44,
	0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x41, 0x76, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x69, 0x73,
	0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x44,
	0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x4d, 0x69, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x47, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd3, 0x06, 0x0a, 0x15, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x55, 0x73, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x69, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x64, 0x44, 0x69, 0x73,
	0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x55, 0x73, 0x65, 0x64, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x50, 0x55, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x50, 0x55, 0x4c, 0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x43, 0x50, 0x55, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x70, 0x75, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x70, 0x75,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4d, 0x65,
	0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x4d,
	0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76,
	0x67, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d,
	0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12,
	0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76,
	0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x22,
	0xa2, 0x07, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x50,
	0x55, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x50,
	0x55, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x76, 0x67, 0x43, 0x50, 0x55,
	0x4c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x41, 0x76, 0x67, 0x43,
	0x50, 0x55, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x76, 0x67, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x41, 0x76, 0x67, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x76, 0x67, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x41, 0x76, 0x67, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x43, 0x50, 0x55, 0x4c, 0x6f, 0x61, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x43, 0x50, 0x55, 0x4c, 0x6f,
	0x61, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61,
	0x78, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x24,
	0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x64, 0x44,
	0x69, 0x73, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x55, 0x73,
	0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x78,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x70, 0x75, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x41, 0x76, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x70, 0x75,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65,
	0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76,
	0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4d,
	0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e,
	0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x69,
	0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x12, 0x26, 0x0a, 0x0e,
	0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x49, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x16,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4d, 0x61,
	0x78, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x78, 0x52, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x44, 0x69, 0x73,
	0x6b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xda, 0x03, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x70, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x55,
	0x73, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x46, 0x75,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x44, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x46, 0x75, 0x6c, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x44, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x48, 0x69, 0x67, 0x68, 0x52,
	0x69, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x48, 0x69, 0x67,
	0x68, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x33, 0x0a,
	0x08, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x49, 0x64, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x64, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x52, 0x07, 0x49, 0x64, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x88, 0x01,
	0x0a, 0x12, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x19, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x16,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x62, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa8,
	0x01, 0x0a, 0x1a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x56, 0x0a, 0x16, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x16, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x18, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61, 0x79, 0x73, 0x22, 0x63, 0x0a, 0x15, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xa4,
	0x01, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x53, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x15,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x22, 0x80, 0x01,
	0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x22, 0xa3, 0x01, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x57, 0x0a, 0x17, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x53, 0x56, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xd6, 0x02, 0x0a, 0x20, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x53, 0x56, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x17, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x15,
	0x48, 0x6f, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x6f,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x6f,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x18, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x5d, 0x0a, 0x1a, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x1a, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xf3, 0x01, 0x0a, 0x1f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x20, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x22, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x53, 0x48, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x53, 0x48, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0x7d, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xe7, 0x03, 0x0a, 0x23, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x4c, 0x6f, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x53, 0x48, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x53, 0x48, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb5, 0x01, 0x0a, 0x2a,
	0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x53,
	0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x09, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xe8, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x22, 0x28, 0x0a, 0x10, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x71, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x40, 0x0a, 0x0a, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbb, 0x01, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x5c, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xee, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x65, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0xe0, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5c, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xab, 0x04, 0x0a, 0x0d, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4c,
	0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x65, 0x78,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x22, 0x2b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x7b,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x29, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x46, 0x0a, 0x16, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x4d, 0x0a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x65, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9c, 0x03, 0x0a, 0x1d, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x48, 0x6f, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x48, 0x6f, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xaf, 0x03, 0x0a, 0x13, 0x48, 0x6f, 0x73,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x64, 0x65, 0x72, 0x72, 0x4c, 0x6f, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x53, 0x48, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x53, 0x48, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x4f, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a,
	0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xb8, 0x03, 0x0a, 0x1c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x6f,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c,
	0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x4c, 0x6f, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x4c, 0x6f, 0x67,
	0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x53, 0x48, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x53, 0x48, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xf0, 0x03, 0x0a, 0x1a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x0b, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x19, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f,
	0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x44, 0x69, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x52, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x63, 0x70, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x56, 0x63, 0x70, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0xfc, 0x01, 0x0a, 0x1a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x71, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x6d, 0x64, 0x62, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0xea, 0x05, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x6d, 0x64, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6d, 0x64, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6d, 0x64, 0x62, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x48, 0x6f, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x4f,
	0x70, 0x73, 0x49, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4f, 0x70, 0x73, 0x49, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x48, 0x33, 0x63, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x48, 0x33, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x33, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x33, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x61, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x52, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x63, 0x70,
	0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x56, 0x63, 0x70, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x66, 0x48, 0x33, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x66, 0x48, 0x33, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x33, 0x63,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x48,
	0x33, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x33, 0x63,
	0x48, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x33,
	0x63, 0x48, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x69, 0x7a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x69, 0x7a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x73,
	0x42, 0x69, 0x7a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4f, 0x70, 0x73, 0x42, 0x69, 0x7a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0xd6, 0x02, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x43, 0x6d, 0x64, 0x62, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x65,
	0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0b,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x43, 0x6d, 0x64, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0b, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd2, 0x03, 0x0a, 0x16, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x52, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x61,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x63, 0x70, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x56, 0x63, 0x70, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x33, 0x63, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x48, 0x33, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x33, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x33,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x66, 0x48, 0x33, 0x63,
	0x53, 0x79, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x66, 0x48, 0x33,
	0x63, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x33, 0x63, 0x49, 0x6d, 0x67, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x33, 0x63, 0x49, 0x6d, 0x67, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x33, 0x63, 0x48, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x33, 0x63, 0x48, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x65, 0x61, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f,
	0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x46,
	0x72, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf9, 0x02,
	0x0a, 0x13, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x10, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6d, 0x64, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6d, 0x64, 0x62, 0x12, 0x34, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x64, 0x63, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x64, 0x63, 0x49,
	0x64, 0x22, 0xca, 0x01, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48,
	0x6f, 0x73, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a,
	0x0c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8a,
	0x01, 0x0a, 0x11, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x41, 0x75, 0x74, 0x6f,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x14,
	0x41, 0x75, 0x74, 0x6f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x24, 0x0a, 0x0d,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6d, 0x64, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6d,
	0x64, 0x62, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x22, 0xfb, 0x01, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x6f,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42,
	0x0a, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x49, 0x64, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x64,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x07, 0x49, 0x64, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xad,
	0x02, 0x0a, 0x07, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x64,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x64, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x64, 0x63, 0x49, 0x70, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x64, 0x63, 0x49, 0x70, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x49, 0x64, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x64, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x64, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x64, 0x63, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x33,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f,
	0x6e, 0x6c, 0x79, 0x22, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x0b, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x64, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x0b, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xce, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x64, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x64, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x64, 0x63,
	0x49, 0x70, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x49, 0x64, 0x63, 0x49, 0x70, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x64, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x49, 0x64, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x49, 0x64, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x64, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x5d, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x64,
	0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x64, 0x63, 0x49, 0x64,
	0x22, 0xfa, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x64, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x64, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x64, 0x63,
	0x49, 0x70, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x49, 0x64, 0x63, 0x49, 0x70, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x64, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x49, 0x64, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x49, 0x64, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x64, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x47, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x22, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x63, 0x42,
	0x79, 0x49, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x22, 0x71,
	0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x63, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x07, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x22, 0x33, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x49, 0x64, 0x63, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x49, 0x64, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x55,
	0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x89, 0x02,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x73, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x62, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xfb, 0x01,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x73, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x4a, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x4a,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x22, 0xc6, 0x03, 0x0a, 0x0a, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x45, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x4e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x53, 0x53,
	0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x28,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45,
	0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45,
	0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x22,
	0x43, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x4a, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x53,
	0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79,
	0x6e, 0x63, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x73, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45,
	0x53, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x9c, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79,
	0x6e, 0x63, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xff, 0x02, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e,
	0x63, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4e, 0x65, 0x77, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x65, 0x77,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x4e, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xfd, 0x04, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x53, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74,
	0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4e,
	0x6f, 0x74, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x49,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x4e, 0x6f, 0x74,
	0x49, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4e, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x65,
	0x77, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x6f, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0xc6, 0x03, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x79, 0x6e, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74,
	0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x0d, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x45, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xfb, 0x02, 0x0a, 0x1b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x48,
	0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48,
	0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x61, 0x78, 0x43, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x4d, 0x61, 0x78,
	0x43, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x67, 0x43, 0x70, 0x75, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x76, 0x67, 0x43, 0x70, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x4d,
	0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x76, 0x67,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x41, 0x76,
	0x67, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x44, 0x69,
	0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x76, 0x67, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x41, 0x76, 0x67, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79,
	0x6e, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x44, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x3d, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x79, 0x6e, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x43, 0x4d, 0x53, 0x79, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x6f, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x4d, 0x53, 0x79, 0x73, 0x53,
	0x79, 0x6e, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x4f, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x4d, 0x53, 0x79, 0x73,
	0x53, 0x79, 0x6e, 0x63, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x22, 0x80, 0x05, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x4d, 0x53,
	0x79, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x4e, 0x6f,
	0x74, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x4e, 0x6f, 0x74, 0x49, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4e, 0x65, 0x77, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x4e, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xf5, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x45, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x6d, 0x73, 0x79, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6d, 0x73, 0x79, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x68, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79,
	0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xe7, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6d,
	0x73, 0x79, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x50, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x4b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x50, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xb2,
	0x04, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x61, 0x73,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x65, 0x78, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45,
	0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x7e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x22, 0x4e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x54, 0x61, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x69, 0x0a, 0x19, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x50, 0x0a, 0x1a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x79, 0x48, 0x6f,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x80, 0x02,
	0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x22, 0xe2, 0x01, 0x0a, 0x1e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x73, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6d, 0x73, 0x79, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6d, 0x73, 0x79, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x83, 0x05, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x4e,
	0x6f, 0x74, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x15, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x65, 0x77,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x4e, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f,
	0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xc1, 0x34, 0x0a, 0x06,
	0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x4e, 0x0a, 0x15, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12,
	0x19, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x79, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x15, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x1b, 0x63, 0x6d, 0x64,
	0x62, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f,
	0x62, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3e, 0x0a, 0x0f, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61,
	0x6c, 0x6c, 0x12, 0x14, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x47, 0x0a, 0x14, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62,
	0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x17, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x6d, 0x64, 0x62,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x14, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x11, 0x63, 0x6d, 0x64, 0x62,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x16, 0x2e,
	0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48,
	0x0a, 0x13, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x13, 0x63, 0x6d, 0x64, 0x62,
	0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12,
	0x17, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x4e, 0x0a, 0x15, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x41, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x13, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x14, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x41, 0x70, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x17, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x15,
	0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e,
	0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41,
	0x64, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b,
	0x0a, 0x18, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x64, 0x66, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x64, 0x66, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x18, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x44, 0x65, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x17, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x18,
	0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x56, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x12, 0x1c, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x15, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x19, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x12, 0x1a, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x66, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x1b, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x63, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52,
	0x0a, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x57, 0x0a, 0x18, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c,
	0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x1c, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x73, 0x76, 0x12, 0x1f, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x53, 0x56, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x53, 0x56, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x16, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x73, 0x0a, 0x1e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x28, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x90, 0x01, 0x0a, 0x29, 0x67,
	0x65, 0x74, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x93, 0x01,
	0x0a, 0x2a, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x32, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a,
	0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x1e, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x52, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x15, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x81, 0x01, 0x0a, 0x24, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x63, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x81, 0x01, 0x0a, 0x24, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x2b, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e,
	0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x2e, 0x63, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45,
	0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x18, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x12, 0x11, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x19, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a,
	0x12, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x6d, 0x64, 0x62, 0x12, 0x1b, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6d, 0x64, 0x62, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6d, 0x64, 0x62, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46,
	0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x18, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x11, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x19, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x18, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x46, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x12, 0x18, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x18, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x63, 0x5f, 0x62, 0x79, 0x5f,
	0x69, 0x70, 0x12, 0x17, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x63, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x63, 0x42, 0x79, 0x49,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x63, 0x12, 0x19, 0x2e, 0x63, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x49, 0x64,
	0x63, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x49, 0x64, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x62, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e,
	0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x19, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x17,
	0x67, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x1d, 0x67, 0x65,
	0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6f, 0x0a, 0x22,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x62, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x28, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x42,
	0x79, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a,
	0x1d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x24,
	0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6a, 0x0a, 0x1f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x26, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x75, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7b, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29,
	0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x63, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79,
	0x6e, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x65, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79,
	0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x1b,
	0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x53,
	0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x13, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x65, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x1b, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x53, 0x53,
	0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x11, 0x67,
	0x65, 0x74, 0x5f, 0x65, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x19, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x53, 0x53,
	0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x65,
	0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1e, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x73,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x2e, 0x63, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x1c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x5f, 0x65, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x62, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x79, 0x48, 0x6f,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f,
	0x65, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x1e, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x19, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x20, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x75,
	0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x53, 0x53, 0x79, 0x6e, 0x63,
	0x46, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x12,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6d, 0x73, 0x79, 0x73, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x12, 0x1b, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x43, 0x4d, 0x53, 0x79, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x43, 0x4d, 0x53, 0x79, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a,
	0x1a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6d, 0x73, 0x79, 0x73, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x4d, 0x53, 0x79,
	0x73, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43,
	0x4d, 0x53, 0x79, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x1c,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6d, 0x73, 0x79, 0x73, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x23, 0x2e, 0x63,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x4d, 0x53,
	0x79, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x43, 0x4d, 0x53, 0x79, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x42,
	0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x63, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_cmpool_proto_rawDescOnce sync.Once
	file_proto_cmpool_proto_rawDescData = file_proto_cmpool_proto_rawDesc
)

func file_proto_cmpool_proto_rawDescGZIP() []byte {
	file_proto_cmpool_proto_rawDescOnce.Do(func() {
		file_proto_cmpool_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_cmpool_proto_rawDescData)
	})
	return file_proto_cmpool_proto_rawDescData
}

var file_proto_cmpool_proto_msgTypes = make([]protoimpl.MessageInfo, 187)
var file_proto_cmpool_proto_goTypes = []interface{}{
	(*ExtractByHostsReq)(nil),                          // 0: cmpool.ExtractByHostsReq
	(*ExtractAllReq)(nil),                              // 1: cmpool.ExtractAllReq
	(*InjectAllReq)(nil),                               // 2: cmpool.InjectAllReq
	(*InjectAllResp)(nil),                              // 3: cmpool.InjectAllResp
	(*ExtractByHostsResp)(nil),                         // 4: cmpool.ExtractByHostsResp
	(*ExtractByHostsSteamResp)(nil),                    // 5: cmpool.ExtractByHostsSteamResp
	(*ExtractAllResp)(nil),                             // 6: cmpool.ExtractAllResp
	(*HostResult)(nil),                                 // 7: cmpool.HostResult
	(*HostExtInfo)(nil),                                // 8: cmpool.HostExtInfo
	(*AppInfo)(nil),                                    // 9: cmpool.AppInfo
	(*HostLoc)(nil),                                    // 10: cmpool.HostLoc
	(*InjectHostsReq)(nil),                             // 11: cmpool.InjectHostsReq
	(*InjectHostsResp)(nil),                            // 12: cmpool.InjectHostsResp
	(*CmdbOpTasksReq)(nil),                             // 13: cmpool.CmdbOpTasksReq
	(*CmdbOpTasksResp)(nil),                            // 14: cmpool.CmdbOpTasksResp
	(*CmdbOpTask)(nil),                                 // 15: cmpool.CmdbOpTask
	(*SyncHostsReq)(nil),                               // 16: cmpool.SyncHostsReq
	(*SyncHostsResp)(nil),                              // 17: cmpool.SyncHostsResp
	(*AddHostsResp)(nil),                               // 18: cmpool.AddHostsResp
	(*Host)(nil),                                       // 19: cmpool.Host
	(*ModifyHostsReq)(nil),                             // 20: cmpool.ModifyHostsReq
	(*ModifyHostsResp)(nil),                            // 21: cmpool.ModifyHostsResp
	(*SoftDelHostsReq)(nil),                            // 22: cmpool.SoftDelHostsReq
	(*SoftDelHostsResp)(nil),                           // 23: cmpool.SoftDelHostsResp
	(*HardDelHostsReq)(nil),                            // 24: cmpool.HardDelHostsReq
	(*HardDelHostsResp)(nil),                           // 25: cmpool.HardDelHostsResp
	(*GetHostsDetailReq)(nil),                          // 26: cmpool.GetHostsDetailReq
	(*GetHostsPoolDetailReq)(nil),                      // 27: cmpool.GetHostsPoolDetailReq
	(*App)(nil),                                        // 28: cmpool.App
	(*HostDetail)(nil),                                 // 29: cmpool.HostDetail
	(*HostPoolDetail)(nil),                             // 30: cmpool.HostPoolDetail
	(*GetHostsDetailResp)(nil),                         // 31: cmpool.GetHostsDetailResp
	(*GetHostsPoolDetailResp)(nil),                     // 32: cmpool.GetHostsPoolDetailResp
	(*ExtractByOwnerReq)(nil),                          // 33: cmpool.ExtractByOwnerReq
	(*ExtractByOwnerResp)(nil),                         // 34: cmpool.ExtractByOwnerResp
	(*CollAppsReq)(nil),                                // 35: cmpool.CollAppsReq
	(*CollAppsResp)(nil),                               // 36: cmpool.CollAppsResp
	(*GetHostsPoolReq)(nil),                            // 37: cmpool.GetHostsPoolReq
	(*AddHostsAppReq)(nil),                             // 38: cmpool.AddHostsAppReq
	(*AddHostsAppResp)(nil),                            // 39: cmpool.AddHostsAppResp
	(*MdfHostsAppReq)(nil),                             // 40: cmpool.MdfHostsAppReq
	(*MdfHostsAppResp)(nil),                            // 41: cmpool.MdfHostsAppResp
	(*DelHostsAppReq)(nil),                             // 42: cmpool.DelHostsAppReq
	(*DelHostsAppResp)(nil),                            // 43: cmpool.DelHostsAppResp
	(*HostsApp)(nil),                                   // 44: cmpool.HostsApp
	(*ClusterGroupsReq)(nil),                           // 45: cmpool.ClusterGroupsReq
	(*ClusterGroup)(nil),                               // 46: cmpool.ClusterGroup
	(*ClusterGroupsResp)(nil),                          // 47: cmpool.ClusterGroupsResp
	(*ServerResourceReq)(nil),                          // 48: cmpool.ServerResourceReq
	(*ServerResource)(nil),                             // 49: cmpool.ServerResource
	(*ServerResourceResp)(nil),                         // 50: cmpool.ServerResourceResp
	(*ServerResourceMaxReq)(nil),                       // 51: cmpool.ServerResourceMaxReq
	(*HostClusterInfo)(nil),                            // 52: cmpool.HostClusterInfo
	(*ServerResourceMax)(nil),                          // 53: cmpool.ServerResourceMax
	(*ServerResourceMaxResp)(nil),                      // 54: cmpool.ServerResourceMaxResp
	(*ClusterResourceReq)(nil),                         // 55: cmpool.ClusterResourceReq
	(*ClusterMemberResource)(nil),                      // 56: cmpool.ClusterMemberResource
	(*ClusterResourceMax)(nil),                         // 57: cmpool.ClusterResourceMax
	(*ClusterResourceResp)(nil),                        // 58: cmpool.ClusterResourceResp
	(*ClusterResourceMaxResp)(nil),                     // 59: cmpool.ClusterResourceMaxResp
	(*DiskPredictionReq)(nil),                          // 60: cmpool.DiskPredictionReq
	(*DiskPrediction)(nil),                             // 61: cmpool.DiskPrediction
	(*DiskPredictionResp)(nil),                         // 62: cmpool.DiskPredictionResp
	(*BackupRestoreCheckInfoReq)(nil),                  // 63: cmpool.BackupRestoreCheckInfoReq
	(*BackupRestoreCheckInfo)(nil),                     // 64: cmpool.BackupRestoreCheckInfo
	(*BackupRestoreCheckInfoResp)(nil),                 // 65: cmpool.BackupRestoreCheckInfoResp
	(*ClusterConfirmSummaryReq)(nil),                   // 66: cmpool.ClusterConfirmSummaryReq
	(*ClusterConfirmSummary)(nil),                      // 67: cmpool.ClusterConfirmSummary
	(*ClusterConfirmSummaryResp)(nil),                  // 68: cmpool.ClusterConfirmSummaryResp
	(*SyncClusterGroupsReq)(nil),                       // 69: cmpool.SyncClusterGroupsReq
	(*DatabaseSyncDetail)(nil),                         // 70: cmpool.DatabaseSyncDetail
	(*SyncClusterGroupsResp)(nil),                      // 71: cmpool.SyncClusterGroupsResp
	(*LoadServerMetricsCSVReq)(nil),                    // 72: cmpool.LoadServerMetricsCSVReq
	(*LoadServerMetricsCSVProgressResp)(nil),           // 73: cmpool.LoadServerMetricsCSVProgressResp
	(*VerifyMonitoringDataReq)(nil),                    // 74: cmpool.VerifyMonitoringDataReq
	(*HostWithoutMonitoring)(nil),                      // 75: cmpool.HostWithoutMonitoring
	(*VerifyMonitoringDataResp)(nil),                   // 76: cmpool.VerifyMonitoringDataResp
	(*HardwareResourceVerificationReq)(nil),            // 77: cmpool.HardwareResourceVerificationReq
	(*HardwareResourceVerificationResp)(nil),           // 78: cmpool.HardwareResourceVerificationResp
	(*GetHardwareResourceVerificationStatusReq)(nil),   // 79: cmpool.GetHardwareResourceVerificationStatusReq
	(*HardwareResourceVerificationStatus)(nil),         // 80: cmpool.HardwareResourceVerificationStatus
	(*GetHardwareResourceVerificationStatusResp)(nil),  // 81: cmpool.GetHardwareResourceVerificationStatusResp
	(*GetHardwareResourceVerificationHistoryReq)(nil),  // 82: cmpool.GetHardwareResourceVerificationHistoryReq
	(*HardwareResourceVerificationHistory)(nil),        // 83: cmpool.HardwareResourceVerificationHistory
	(*GetHardwareResourceVerificationHistoryResp)(nil), // 84: cmpool.GetHardwareResourceVerificationHistoryResp
	(*LoginReq)(nil),                                   // 85: cmpool.LoginReq
	(*LoginResp)(nil),                                  // 86: cmpool.LoginResp
	(*UserInfo)(nil),                                   // 87: cmpool.UserInfo
	(*ValidateTokenReq)(nil),                           // 88: cmpool.ValidateTokenReq
	(*ValidateTokenResp)(nil),                          // 89: cmpool.ValidateTokenResp
	(*LogoutReq)(nil),                                  // 90: cmpool.LogoutReq
	(*LogoutResp)(nil),                                 // 91: cmpool.LogoutResp
	(*CreateUserReq)(nil),                              // 92: cmpool.CreateUserReq
	(*CreateUserResp)(nil),                             // 93: cmpool.CreateUserResp
	(*CreateScheduledTaskReq)(nil),                     // 94: cmpool.CreateScheduledTaskReq
	(*CreateScheduledTaskResp)(nil),                    // 95: cmpool.CreateScheduledTaskResp
	(*UpdateScheduledTaskReq)(nil),                     // 96: cmpool.UpdateScheduledTaskReq
	(*UpdateScheduledTaskResp)(nil),                    // 97: cmpool.UpdateScheduledTaskResp
	(*DeleteScheduledTaskReq)(nil),                     // 98: cmpool.DeleteScheduledTaskReq
	(*DeleteScheduledTaskResp)(nil),                    // 99: cmpool.DeleteScheduledTaskResp
	(*GetScheduledTasksReq)(nil),                       // 100: cmpool.GetScheduledTasksReq
	(*ScheduledTask)(nil),                              // 101: cmpool.ScheduledTask
	(*GetScheduledTasksResp)(nil),                      // 102: cmpool.GetScheduledTasksResp
	(*GetScheduledTaskDetailReq)(nil),                  // 103: cmpool.GetScheduledTaskDetailReq
	(*GetScheduledTaskDetailResp)(nil),                 // 104: cmpool.GetScheduledTaskDetailResp
	(*EnableScheduledTaskReq)(nil),                     // 105: cmpool.EnableScheduledTaskReq
	(*EnableScheduledTaskResp)(nil),                    // 106: cmpool.EnableScheduledTaskResp
	(*GetScheduledTaskExecutionHistoryReq)(nil),        // 107: cmpool.GetScheduledTaskExecutionHistoryReq
	(*ScheduledTaskExecutionHistory)(nil),              // 108: cmpool.ScheduledTaskExecutionHistory
	(*HostExecutionDetail)(nil),                        // 109: cmpool.HostExecutionDetail
	(*GetScheduledTaskExecutionHistoryResp)(nil),       // 110: cmpool.GetScheduledTaskExecutionHistoryResp
	(*GetScheduledTaskExecutionDetailsReq)(nil),        // 111: cmpool.GetScheduledTaskExecutionDetailsReq
	(*ScheduledTaskExecutionDetail)(nil),               // 112: cmpool.ScheduledTaskExecutionDetail
	(*ScheduledTaskExecutionInfo)(nil),                 // 113: cmpool.ScheduledTaskExecutionInfo
	(*GetScheduledTaskExecutionDetailsResp)(nil),       // 114: cmpool.GetScheduledTaskExecutionDetailsResp
	(*FetchHostsHardwareInfoReq)(nil),                  // 115: cmpool.FetchHostsHardwareInfoReq
	(*HostHardwareInfo)(nil),                           // 116: cmpool.HostHardwareInfo
	(*FetchHostsHardwareInfoResp)(nil),                 // 117: cmpool.FetchHostsHardwareInfoResp
	(*SyncExternalCmdbReq)(nil),                        // 118: cmpool.SyncExternalCmdbReq
	(*ExternalCmdbHost)(nil),                           // 119: cmpool.ExternalCmdbHost
	(*SyncExternalCmdbResp)(nil),                       // 120: cmpool.SyncExternalCmdbResp
	(*ManualHostHardwareInfo)(nil),                     // 121: cmpool.ManualHostHardwareInfo
	(*HostApplicationInfo)(nil),                        // 122: cmpool.HostApplicationInfo
	(*ManualAddHostReq)(nil),                           // 123: cmpool.ManualAddHostReq
	(*AutoFetchResult)(nil),                            // 124: cmpool.AutoFetchResult
	(*ManualAddHostResp)(nil),                          // 125: cmpool.ManualAddHostResp
	(*AutoFetchHostInfoReq)(nil),                       // 126: cmpool.AutoFetchHostInfoReq
	(*AutoFetchHostInfoResp)(nil),                      // 127: cmpool.AutoFetchHostInfoResp
	(*IdcConf)(nil),                                    // 128: cmpool.IdcConf
	(*GetIdcConfListReq)(nil),                          // 129: cmpool.GetIdcConfListReq
	(*GetIdcConfListResp)(nil),                         // 130: cmpool.GetIdcConfListResp
	(*CreateIdcConfReq)(nil),                           // 131: cmpool.CreateIdcConfReq
	(*CreateIdcConfResp)(nil),                          // 132: cmpool.CreateIdcConfResp
	(*UpdateIdcConfReq)(nil),                           // 133: cmpool.UpdateIdcConfReq
	(*UpdateIdcConfResp)(nil),                          // 134: cmpool.UpdateIdcConfResp
	(*DeleteIdcConfReq)(nil),                           // 135: cmpool.DeleteIdcConfReq
	(*DeleteIdcConfResp)(nil),                          // 136: cmpool.DeleteIdcConfResp
	(*MatchIdcByIpReq)(nil),                            // 137: cmpool.MatchIdcByIpReq
	(*MatchIdcByIpResp)(nil),                           // 138: cmpool.MatchIdcByIpResp
	(*UpdateHostsIdcReq)(nil),                          // 139: cmpool.UpdateHostsIdcReq
	(*UpdateHostsIdcResp)(nil),                         // 140: cmpool.UpdateHostsIdcResp
	(*CreateESSyncTaskReq)(nil),                        // 141: cmpool.CreateESSyncTaskReq
	(*CreateESSyncTaskResp)(nil),                       // 142: cmpool.CreateESSyncTaskResp
	(*UpdateESSyncTaskReq)(nil),                        // 143: cmpool.UpdateESSyncTaskReq
	(*UpdateESSyncTaskResp)(nil),                       // 144: cmpool.UpdateESSyncTaskResp
	(*DeleteESSyncTaskReq)(nil),                        // 145: cmpool.DeleteESSyncTaskReq
	(*DeleteESSyncTaskResp)(nil),                       // 146: cmpool.DeleteESSyncTaskResp
	(*GetESSyncTasksReq)(nil),                          // 147: cmpool.GetESSyncTasksReq
	(*ESSyncTask)(nil),                                 // 148: cmpool.ESSyncTask
	(*GetESSyncTasksResp)(nil),                         // 149: cmpool.GetESSyncTasksResp
	(*GetESSyncTaskDetailReq)(nil),                     // 150: cmpool.GetESSyncTaskDetailReq
	(*GetESSyncTaskDetailResp)(nil),                    // 151: cmpool.GetESSyncTaskDetailResp
	(*EnableESSyncTaskReq)(nil),                        // 152: cmpool.EnableESSyncTaskReq
	(*EnableESSyncTaskResp)(nil),                       // 153: cmpool.EnableESSyncTaskResp
	(*ExecuteESSyncByHostListReq)(nil),                 // 154: cmpool.ExecuteESSyncByHostListReq
	(*ExecuteESSyncByFileReq)(nil),                     // 155: cmpool.ExecuteESSyncByFileReq
	(*ExecuteESSyncFullSyncReq)(nil),                   // 156: cmpool.ExecuteESSyncFullSyncReq
	(*ExecuteESSyncFullSyncResp)(nil),                  // 157: cmpool.ExecuteESSyncFullSyncResp
	(*ExecuteESSyncResp)(nil),                          // 158: cmpool.ExecuteESSyncResp
	(*GetExternalSyncExecutionLogsReq)(nil),            // 159: cmpool.GetExternalSyncExecutionLogsReq
	(*ExternalSyncExecutionLog)(nil),                   // 160: cmpool.ExternalSyncExecutionLog
	(*GetExternalSyncExecutionLogsResp)(nil),           // 161: cmpool.GetExternalSyncExecutionLogsResp
	(*GetExternalSyncExecutionDetailReq)(nil),          // 162: cmpool.GetExternalSyncExecutionDetailReq
	(*ExternalSyncExecutionDetail)(nil),                // 163: cmpool.ExternalSyncExecutionDetail
	(*ExternalSyncExecutionInfo)(nil),                  // 164: cmpool.ExternalSyncExecutionInfo
	(*GetExternalSyncExecutionDetailResp)(nil),         // 165: cmpool.GetExternalSyncExecutionDetailResp
	(*ExecuteCMSysSyncReq)(nil),                        // 166: cmpool.ExecuteCMSysSyncReq
	(*ExecuteCMSysSyncByFileReq)(nil),                  // 167: cmpool.ExecuteCMSysSyncByFileReq
	(*ExecuteCMSysSyncFullSyncReq)(nil),                // 168: cmpool.ExecuteCMSysSyncFullSyncReq
	(*ExecuteCMSysSyncResp)(nil),                       // 169: cmpool.ExecuteCMSysSyncResp
	(*CreateExternalSyncTaskReq)(nil),                  // 170: cmpool.CreateExternalSyncTaskReq
	(*CreateExternalSyncTaskResp)(nil),                 // 171: cmpool.CreateExternalSyncTaskResp
	(*UpdateExternalSyncTaskReq)(nil),                  // 172: cmpool.UpdateExternalSyncTaskReq
	(*UpdateExternalSyncTaskResp)(nil),                 // 173: cmpool.UpdateExternalSyncTaskResp
	(*DeleteExternalSyncTaskReq)(nil),                  // 174: cmpool.DeleteExternalSyncTaskReq
	(*DeleteExternalSyncTaskResp)(nil),                 // 175: cmpool.DeleteExternalSyncTaskResp
	(*GetExternalSyncTasksReq)(nil),                    // 176: cmpool.GetExternalSyncTasksReq
	(*ExternalSyncTask)(nil),                           // 177: cmpool.ExternalSyncTask
	(*GetExternalSyncTasksResp)(nil),                   // 178: cmpool.GetExternalSyncTasksResp
	(*GetExternalSyncTaskDetailReq)(nil),               // 179: cmpool.GetExternalSyncTaskDetailReq
	(*GetExternalSyncTaskDetailResp)(nil),              // 180: cmpool.GetExternalSyncTaskDetailResp
	(*EnableExternalSyncTaskReq)(nil),                  // 181: cmpool.EnableExternalSyncTaskReq
	(*EnableExternalSyncTaskResp)(nil),                 // 182: cmpool.EnableExternalSyncTaskResp
	(*ExecuteExternalSyncByHostListReq)(nil),           // 183: cmpool.ExecuteExternalSyncByHostListReq
	(*ExecuteExternalSyncByFileReq)(nil),               // 184: cmpool.ExecuteExternalSyncByFileReq
	(*ExecuteExternalSyncFullSyncReq)(nil),             // 185: cmpool.ExecuteExternalSyncFullSyncReq
	(*ExecuteExternalSyncResp)(nil),                    // 186: cmpool.ExecuteExternalSyncResp
}
var file_proto_cmpool_proto_depIdxs = []int32{
	8,   // 0: cmpool.HostResult.HostExtInfo:type_name -> cmpool.HostExtInfo
	9,   // 1: cmpool.HostResult.DeployAppInfoList:type_name -> cmpool.AppInfo
	10,  // 2: cmpool.HostResult.HostLocInfo:type_name -> cmpool.HostLoc
	15,  // 3: cmpool.CmdbOpTasksResp.Tasks:type_name -> cmpool.CmdbOpTask
	19,  // 4: cmpool.ModifyHostsReq.Hosts:type_name -> cmpool.Host
	19,  // 5: cmpool.HostDetail.Host:type_name -> cmpool.Host
	28,  // 6: cmpool.HostDetail.AppList:type_name -> cmpool.App
	28,  // 7: cmpool.HostPoolDetail.AppList:type_name -> cmpool.App
	128, // 8: cmpool.HostPoolDetail.IdcInfo:type_name -> cmpool.IdcConf
	29,  // 9: cmpool.GetHostsDetailResp.HostDetail:type_name -> cmpool.HostDetail
	30,  // 10: cmpool.GetHostsPoolDetailResp.HostsPoolDetail:type_name -> cmpool.HostPoolDetail
	44,  // 11: cmpool.AddHostsAppReq.data:type_name -> cmpool.HostsApp
	44,  // 12: cmpool.MdfHostsAppReq.data:type_name -> cmpool.HostsApp
	46,  // 13: cmpool.ClusterGroupsResp.ClusterGroup:type_name -> cmpool.ClusterGroup
	52,  // 14: cmpool.ServerResource.Clusters:type_name -> cmpool.HostClusterInfo
	128, // 15: cmpool.ServerResource.IdcInfo:type_name -> cmpool.IdcConf
	49,  // 16: cmpool.ServerResourceResp.ServerResource:type_name -> cmpool.ServerResource
	52,  // 17: cmpool.ServerResourceMax.Clusters:type_name -> cmpool.HostClusterInfo
	128, // 18: cmpool.ServerResourceMax.IdcInfo:type_name -> cmpool.IdcConf
	53,  // 19: cmpool.ServerResourceMaxResp.ServerResourceMax:type_name -> cmpool.ServerResourceMax
	56,  // 20: cmpool.ClusterResourceResp.ClusterResources:type_name -> cmpool.ClusterMemberResource
	57,  // 21: cmpool.ClusterResourceMaxResp.ClusterResourcesMax:type_name -> cmpool.ClusterResourceMax
	52,  // 22: cmpool.DiskPrediction.Clusters:type_name -> cmpool.HostClusterInfo
	128, // 23: cmpool.DiskPrediction.IdcInfo:type_name -> cmpool.IdcConf
	61,  // 24: cmpool.DiskPredictionResp.DiskPrediction:type_name -> cmpool.DiskPrediction
	64,  // 25: cmpool.BackupRestoreCheckInfoResp.BackupRestoreCheckInfo:type_name -> cmpool.BackupRestoreCheckInfo
	67,  // 26: cmpool.ClusterConfirmSummaryResp.ClusterConfirmSummary:type_name -> cmpool.ClusterConfirmSummary
	70,  // 27: cmpool.SyncClusterGroupsResp.Details:type_name -> cmpool.DatabaseSyncDetail
	75,  // 28: cmpool.VerifyMonitoringDataResp.HostsWithoutMonitoringList:type_name -> cmpool.HostWithoutMonitoring
	80,  // 29: cmpool.GetHardwareResourceVerificationStatusResp.VerificationRecords:type_name -> cmpool.HardwareResourceVerificationStatus
	83,  // 30: cmpool.GetHardwareResourceVerificationHistoryResp.HistoryRecords:type_name -> cmpool.HardwareResourceVerificationHistory
	87,  // 31: cmpool.LoginResp.UserInfo:type_name -> cmpool.UserInfo
	87,  // 32: cmpool.ValidateTokenResp.UserInfo:type_name -> cmpool.UserInfo
	101, // 33: cmpool.GetScheduledTasksResp.Tasks:type_name -> cmpool.ScheduledTask
	101, // 34: cmpool.GetScheduledTaskDetailResp.Task:type_name -> cmpool.ScheduledTask
	109, // 35: cmpool.ScheduledTaskExecutionHistory.HostDetails:type_name -> cmpool.HostExecutionDetail
	108, // 36: cmpool.GetScheduledTaskExecutionHistoryResp.HistoryRecords:type_name -> cmpool.ScheduledTaskExecutionHistory
	112, // 37: cmpool.ScheduledTaskExecutionInfo.HostDetails:type_name -> cmpool.ScheduledTaskExecutionDetail
	113, // 38: cmpool.GetScheduledTaskExecutionDetailsResp.Data:type_name -> cmpool.ScheduledTaskExecutionInfo
	116, // 39: cmpool.FetchHostsHardwareInfoResp.HardwareInfoList:type_name -> cmpool.HostHardwareInfo
	119, // 40: cmpool.SyncExternalCmdbResp.SyncResults:type_name -> cmpool.ExternalCmdbHost
	121, // 41: cmpool.ManualAddHostReq.HardwareInfo:type_name -> cmpool.ManualHostHardwareInfo
	122, // 42: cmpool.ManualAddHostReq.Applications:type_name -> cmpool.HostApplicationInfo
	121, // 43: cmpool.AutoFetchResult.HardwareInfo:type_name -> cmpool.ManualHostHardwareInfo
	122, // 44: cmpool.AutoFetchResult.Applications:type_name -> cmpool.HostApplicationInfo
	124, // 45: cmpool.ManualAddHostResp.AutoFetchResult:type_name -> cmpool.AutoFetchResult
	121, // 46: cmpool.AutoFetchHostInfoResp.HardwareInfo:type_name -> cmpool.ManualHostHardwareInfo
	122, // 47: cmpool.AutoFetchHostInfoResp.Applications:type_name -> cmpool.HostApplicationInfo
	128, // 48: cmpool.AutoFetchHostInfoResp.IdcInfo:type_name -> cmpool.IdcConf
	128, // 49: cmpool.GetIdcConfListResp.IdcConfList:type_name -> cmpool.IdcConf
	128, // 50: cmpool.MatchIdcByIpResp.IdcConf:type_name -> cmpool.IdcConf
	148, // 51: cmpool.GetESSyncTasksResp.Tasks:type_name -> cmpool.ESSyncTask
	148, // 52: cmpool.GetESSyncTaskDetailResp.Task:type_name -> cmpool.ESSyncTask
	160, // 53: cmpool.GetExternalSyncExecutionLogsResp.ExecutionLogs:type_name -> cmpool.ExternalSyncExecutionLog
	160, // 54: cmpool.ExternalSyncExecutionInfo.ExecutionLog:type_name -> cmpool.ExternalSyncExecutionLog
	163, // 55: cmpool.ExternalSyncExecutionInfo.Details:type_name -> cmpool.ExternalSyncExecutionDetail
	164, // 56: cmpool.GetExternalSyncExecutionDetailResp.Data:type_name -> cmpool.ExternalSyncExecutionInfo
	177, // 57: cmpool.GetExternalSyncTasksResp.Tasks:type_name -> cmpool.ExternalSyncTask
	177, // 58: cmpool.GetExternalSyncTaskDetailResp.Task:type_name -> cmpool.ExternalSyncTask
	0,   // 59: cmpool.cmpool.cmdb_extract_by_hosts:input_type -> cmpool.ExtractByHostsReq
	1,   // 60: cmpool.cmpool.cmdb_extract_all:input_type -> cmpool.ExtractAllReq
	33,  // 61: cmpool.cmpool.cmdb_extract_hosts_by_owner:input_type -> cmpool.ExtractByOwnerReq
	2,   // 62: cmpool.cmpool.cmdb_inject_all:input_type -> cmpool.InjectAllReq
	11,  // 63: cmpool.cmpool.cmdb_inject_by_hosts:input_type -> cmpool.InjectHostsReq
	16,  // 64: cmpool.cmpool.cmdb_sync_hosts:input_type -> cmpool.SyncHostsReq
	20,  // 65: cmpool.cmpool.cmdb_modify_hosts:input_type -> cmpool.ModifyHostsReq
	22,  // 66: cmpool.cmpool.cmdb_soft_del_hosts:input_type -> cmpool.SoftDelHostsReq
	24,  // 67: cmpool.cmpool.cmdb_hard_del_hosts:input_type -> cmpool.HardDelHostsReq
	26,  // 68: cmpool.cmpool.cmdb_get_hosts_detail:input_type -> cmpool.GetHostsDetailReq
	35,  // 69: cmpool.cmpool.collect_applications:input_type -> cmpool.CollAppsReq
	37,  // 70: cmpool.cmpool.get_hosts_pool:input_type -> cmpool.GetHostsPoolReq
	27,  // 71: cmpool.cmpool.get_hosts_pool_detail:input_type -> cmpool.GetHostsPoolDetailReq
	38,  // 72: cmpool.cmpool.add_hosts_application:input_type -> cmpool.AddHostsAppReq
	40,  // 73: cmpool.cmpool.modify_hosts_application:input_type -> cmpool.MdfHostsAppReq
	42,  // 74: cmpool.cmpool.delete_hosts_application:input_type -> cmpool.DelHostsAppReq
	45,  // 75: cmpool.cmpool.get_cluster_groups:input_type -> cmpool.ClusterGroupsReq
	48,  // 76: cmpool.cmpool.get_server_resource:input_type -> cmpool.ServerResourceReq
	51,  // 77: cmpool.cmpool.get_server_resource_max:input_type -> cmpool.ServerResourceMaxReq
	55,  // 78: cmpool.cmpool.get_cluster_resources:input_type -> cmpool.ClusterResourceReq
	55,  // 79: cmpool.cmpool.get_cluster_resources_max:input_type -> cmpool.ClusterResourceReq
	60,  // 80: cmpool.cmpool.get_disk_prediction:input_type -> cmpool.DiskPredictionReq
	63,  // 81: cmpool.cmpool.get_backup_restore_check_info:input_type -> cmpool.BackupRestoreCheckInfoReq
	66,  // 82: cmpool.cmpool.get_cluster_confirm_summary:input_type -> cmpool.ClusterConfirmSummaryReq
	69,  // 83: cmpool.cmpool.sync_cluster_groups:input_type -> cmpool.SyncClusterGroupsReq
	69,  // 84: cmpool.cmpool.sync_hosts_from_clusters:input_type -> cmpool.SyncClusterGroupsReq
	72,  // 85: cmpool.cmpool.load_server_metrics_from_csv:input_type -> cmpool.LoadServerMetricsCSVReq
	74,  // 86: cmpool.cmpool.verify_monitoring_data:input_type -> cmpool.VerifyMonitoringDataReq
	77,  // 87: cmpool.cmpool.hardware_resource_verification:input_type -> cmpool.HardwareResourceVerificationReq
	79,  // 88: cmpool.cmpool.get_hardware_resource_verification_status:input_type -> cmpool.GetHardwareResourceVerificationStatusReq
	82,  // 89: cmpool.cmpool.get_hardware_resource_verification_history:input_type -> cmpool.GetHardwareResourceVerificationHistoryReq
	94,  // 90: cmpool.cmpool.create_scheduled_task:input_type -> cmpool.CreateScheduledTaskReq
	96,  // 91: cmpool.cmpool.update_scheduled_task:input_type -> cmpool.UpdateScheduledTaskReq
	98,  // 92: cmpool.cmpool.delete_scheduled_task:input_type -> cmpool.DeleteScheduledTaskReq
	100, // 93: cmpool.cmpool.get_scheduled_tasks:input_type -> cmpool.GetScheduledTasksReq
	103, // 94: cmpool.cmpool.get_scheduled_task_detail:input_type -> cmpool.GetScheduledTaskDetailReq
	105, // 95: cmpool.cmpool.enable_scheduled_task:input_type -> cmpool.EnableScheduledTaskReq
	107, // 96: cmpool.cmpool.get_scheduled_task_execution_history:input_type -> cmpool.GetScheduledTaskExecutionHistoryReq
	111, // 97: cmpool.cmpool.get_scheduled_task_execution_details:input_type -> cmpool.GetScheduledTaskExecutionDetailsReq
	85,  // 98: cmpool.cmpool.user_login:input_type -> cmpool.LoginReq
	88,  // 99: cmpool.cmpool.validate_token:input_type -> cmpool.ValidateTokenReq
	90,  // 100: cmpool.cmpool.user_logout:input_type -> cmpool.LogoutReq
	92,  // 101: cmpool.cmpool.create_user:input_type -> cmpool.CreateUserReq
	115, // 102: cmpool.cmpool.fetch_hosts_hardware_info:input_type -> cmpool.FetchHostsHardwareInfoReq
	118, // 103: cmpool.cmpool.sync_external_cmdb:input_type -> cmpool.SyncExternalCmdbReq
	123, // 104: cmpool.cmpool.manual_add_host:input_type -> cmpool.ManualAddHostReq
	126, // 105: cmpool.cmpool.auto_fetch_host_info:input_type -> cmpool.AutoFetchHostInfoReq
	129, // 106: cmpool.cmpool.get_idc_conf_list:input_type -> cmpool.GetIdcConfListReq
	131, // 107: cmpool.cmpool.create_idc_conf:input_type -> cmpool.CreateIdcConfReq
	133, // 108: cmpool.cmpool.update_idc_conf:input_type -> cmpool.UpdateIdcConfReq
	135, // 109: cmpool.cmpool.delete_idc_conf:input_type -> cmpool.DeleteIdcConfReq
	137, // 110: cmpool.cmpool.match_idc_by_ip:input_type -> cmpool.MatchIdcByIpReq
	139, // 111: cmpool.cmpool.update_hosts_idc:input_type -> cmpool.UpdateHostsIdcReq
	170, // 112: cmpool.cmpool.create_external_sync_task:input_type -> cmpool.CreateExternalSyncTaskReq
	172, // 113: cmpool.cmpool.update_external_sync_task:input_type -> cmpool.UpdateExternalSyncTaskReq
	174, // 114: cmpool.cmpool.delete_external_sync_task:input_type -> cmpool.DeleteExternalSyncTaskReq
	176, // 115: cmpool.cmpool.get_external_sync_tasks:input_type -> cmpool.GetExternalSyncTasksReq
	179, // 116: cmpool.cmpool.get_external_sync_task_detail:input_type -> cmpool.GetExternalSyncTaskDetailReq
	181, // 117: cmpool.cmpool.enable_external_sync_task:input_type -> cmpool.EnableExternalSyncTaskReq
	183, // 118: cmpool.cmpool.execute_external_sync_by_host_list:input_type -> cmpool.ExecuteExternalSyncByHostListReq
	184, // 119: cmpool.cmpool.execute_external_sync_by_file:input_type -> cmpool.ExecuteExternalSyncByFileReq
	185, // 120: cmpool.cmpool.execute_external_sync_full_sync:input_type -> cmpool.ExecuteExternalSyncFullSyncReq
	159, // 121: cmpool.cmpool.get_external_sync_execution_logs:input_type -> cmpool.GetExternalSyncExecutionLogsReq
	162, // 122: cmpool.cmpool.get_external_sync_execution_detail:input_type -> cmpool.GetExternalSyncExecutionDetailReq
	141, // 123: cmpool.cmpool.create_es_sync_task:input_type -> cmpool.CreateESSyncTaskReq
	143, // 124: cmpool.cmpool.update_es_sync_task:input_type -> cmpool.UpdateESSyncTaskReq
	145, // 125: cmpool.cmpool.delete_es_sync_task:input_type -> cmpool.DeleteESSyncTaskReq
	147, // 126: cmpool.cmpool.get_es_sync_tasks:input_type -> cmpool.GetESSyncTasksReq
	150, // 127: cmpool.cmpool.get_es_sync_task_detail:input_type -> cmpool.GetESSyncTaskDetailReq
	152, // 128: cmpool.cmpool.enable_es_sync_task:input_type -> cmpool.EnableESSyncTaskReq
	154, // 129: cmpool.cmpool.execute_es_sync_by_host_list:input_type -> cmpool.ExecuteESSyncByHostListReq
	155, // 130: cmpool.cmpool.execute_es_sync_by_file:input_type -> cmpool.ExecuteESSyncByFileReq
	156, // 131: cmpool.cmpool.execute_es_sync_full_sync:input_type -> cmpool.ExecuteESSyncFullSyncReq
	166, // 132: cmpool.cmpool.execute_cmsys_sync:input_type -> cmpool.ExecuteCMSysSyncReq
	167, // 133: cmpool.cmpool.execute_cmsys_sync_by_file:input_type -> cmpool.ExecuteCMSysSyncByFileReq
	168, // 134: cmpool.cmpool.execute_cmsys_sync_full_sync:input_type -> cmpool.ExecuteCMSysSyncFullSyncReq
	4,   // 135: cmpool.cmpool.cmdb_extract_by_hosts:output_type -> cmpool.ExtractByHostsResp
	6,   // 136: cmpool.cmpool.cmdb_extract_all:output_type -> cmpool.ExtractAllResp
	34,  // 137: cmpool.cmpool.cmdb_extract_hosts_by_owner:output_type -> cmpool.ExtractByOwnerResp
	3,   // 138: cmpool.cmpool.cmdb_inject_all:output_type -> cmpool.InjectAllResp
	12,  // 139: cmpool.cmpool.cmdb_inject_by_hosts:output_type -> cmpool.InjectHostsResp
	17,  // 140: cmpool.cmpool.cmdb_sync_hosts:output_type -> cmpool.SyncHostsResp
	21,  // 141: cmpool.cmpool.cmdb_modify_hosts:output_type -> cmpool.ModifyHostsResp
	23,  // 142: cmpool.cmpool.cmdb_soft_del_hosts:output_type -> cmpool.SoftDelHostsResp
	25,  // 143: cmpool.cmpool.cmdb_hard_del_hosts:output_type -> cmpool.HardDelHostsResp
	31,  // 144: cmpool.cmpool.cmdb_get_hosts_detail:output_type -> cmpool.GetHostsDetailResp
	36,  // 145: cmpool.cmpool.collect_applications:output_type -> cmpool.CollAppsResp
	31,  // 146: cmpool.cmpool.get_hosts_pool:output_type -> cmpool.GetHostsDetailResp
	32,  // 147: cmpool.cmpool.get_hosts_pool_detail:output_type -> cmpool.GetHostsPoolDetailResp
	39,  // 148: cmpool.cmpool.add_hosts_application:output_type -> cmpool.AddHostsAppResp
	41,  // 149: cmpool.cmpool.modify_hosts_application:output_type -> cmpool.MdfHostsAppResp
	43,  // 150: cmpool.cmpool.delete_hosts_application:output_type -> cmpool.DelHostsAppResp
	47,  // 151: cmpool.cmpool.get_cluster_groups:output_type -> cmpool.ClusterGroupsResp
	50,  // 152: cmpool.cmpool.get_server_resource:output_type -> cmpool.ServerResourceResp
	54,  // 153: cmpool.cmpool.get_server_resource_max:output_type -> cmpool.ServerResourceMaxResp
	58,  // 154: cmpool.cmpool.get_cluster_resources:output_type -> cmpool.ClusterResourceResp
	59,  // 155: cmpool.cmpool.get_cluster_resources_max:output_type -> cmpool.ClusterResourceMaxResp
	62,  // 156: cmpool.cmpool.get_disk_prediction:output_type -> cmpool.DiskPredictionResp
	65,  // 157: cmpool.cmpool.get_backup_restore_check_info:output_type -> cmpool.BackupRestoreCheckInfoResp
	68,  // 158: cmpool.cmpool.get_cluster_confirm_summary:output_type -> cmpool.ClusterConfirmSummaryResp
	71,  // 159: cmpool.cmpool.sync_cluster_groups:output_type -> cmpool.SyncClusterGroupsResp
	71,  // 160: cmpool.cmpool.sync_hosts_from_clusters:output_type -> cmpool.SyncClusterGroupsResp
	73,  // 161: cmpool.cmpool.load_server_metrics_from_csv:output_type -> cmpool.LoadServerMetricsCSVProgressResp
	76,  // 162: cmpool.cmpool.verify_monitoring_data:output_type -> cmpool.VerifyMonitoringDataResp
	78,  // 163: cmpool.cmpool.hardware_resource_verification:output_type -> cmpool.HardwareResourceVerificationResp
	81,  // 164: cmpool.cmpool.get_hardware_resource_verification_status:output_type -> cmpool.GetHardwareResourceVerificationStatusResp
	84,  // 165: cmpool.cmpool.get_hardware_resource_verification_history:output_type -> cmpool.GetHardwareResourceVerificationHistoryResp
	95,  // 166: cmpool.cmpool.create_scheduled_task:output_type -> cmpool.CreateScheduledTaskResp
	97,  // 167: cmpool.cmpool.update_scheduled_task:output_type -> cmpool.UpdateScheduledTaskResp
	99,  // 168: cmpool.cmpool.delete_scheduled_task:output_type -> cmpool.DeleteScheduledTaskResp
	102, // 169: cmpool.cmpool.get_scheduled_tasks:output_type -> cmpool.GetScheduledTasksResp
	104, // 170: cmpool.cmpool.get_scheduled_task_detail:output_type -> cmpool.GetScheduledTaskDetailResp
	106, // 171: cmpool.cmpool.enable_scheduled_task:output_type -> cmpool.EnableScheduledTaskResp
	110, // 172: cmpool.cmpool.get_scheduled_task_execution_history:output_type -> cmpool.GetScheduledTaskExecutionHistoryResp
	114, // 173: cmpool.cmpool.get_scheduled_task_execution_details:output_type -> cmpool.GetScheduledTaskExecutionDetailsResp
	86,  // 174: cmpool.cmpool.user_login:output_type -> cmpool.LoginResp
	89,  // 175: cmpool.cmpool.validate_token:output_type -> cmpool.ValidateTokenResp
	91,  // 176: cmpool.cmpool.user_logout:output_type -> cmpool.LogoutResp
	93,  // 177: cmpool.cmpool.create_user:output_type -> cmpool.CreateUserResp
	117, // 178: cmpool.cmpool.fetch_hosts_hardware_info:output_type -> cmpool.FetchHostsHardwareInfoResp
	120, // 179: cmpool.cmpool.sync_external_cmdb:output_type -> cmpool.SyncExternalCmdbResp
	125, // 180: cmpool.cmpool.manual_add_host:output_type -> cmpool.ManualAddHostResp
	127, // 181: cmpool.cmpool.auto_fetch_host_info:output_type -> cmpool.AutoFetchHostInfoResp
	130, // 182: cmpool.cmpool.get_idc_conf_list:output_type -> cmpool.GetIdcConfListResp
	132, // 183: cmpool.cmpool.create_idc_conf:output_type -> cmpool.CreateIdcConfResp
	134, // 184: cmpool.cmpool.update_idc_conf:output_type -> cmpool.UpdateIdcConfResp
	136, // 185: cmpool.cmpool.delete_idc_conf:output_type -> cmpool.DeleteIdcConfResp
	138, // 186: cmpool.cmpool.match_idc_by_ip:output_type -> cmpool.MatchIdcByIpResp
	140, // 187: cmpool.cmpool.update_hosts_idc:output_type -> cmpool.UpdateHostsIdcResp
	171, // 188: cmpool.cmpool.create_external_sync_task:output_type -> cmpool.CreateExternalSyncTaskResp
	173, // 189: cmpool.cmpool.update_external_sync_task:output_type -> cmpool.UpdateExternalSyncTaskResp
	175, // 190: cmpool.cmpool.delete_external_sync_task:output_type -> cmpool.DeleteExternalSyncTaskResp
	178, // 191: cmpool.cmpool.get_external_sync_tasks:output_type -> cmpool.GetExternalSyncTasksResp
	180, // 192: cmpool.cmpool.get_external_sync_task_detail:output_type -> cmpool.GetExternalSyncTaskDetailResp
	182, // 193: cmpool.cmpool.enable_external_sync_task:output_type -> cmpool.EnableExternalSyncTaskResp
	186, // 194: cmpool.cmpool.execute_external_sync_by_host_list:output_type -> cmpool.ExecuteExternalSyncResp
	186, // 195: cmpool.cmpool.execute_external_sync_by_file:output_type -> cmpool.ExecuteExternalSyncResp
	186, // 196: cmpool.cmpool.execute_external_sync_full_sync:output_type -> cmpool.ExecuteExternalSyncResp
	161, // 197: cmpool.cmpool.get_external_sync_execution_logs:output_type -> cmpool.GetExternalSyncExecutionLogsResp
	165, // 198: cmpool.cmpool.get_external_sync_execution_detail:output_type -> cmpool.GetExternalSyncExecutionDetailResp
	142, // 199: cmpool.cmpool.create_es_sync_task:output_type -> cmpool.CreateESSyncTaskResp
	144, // 200: cmpool.cmpool.update_es_sync_task:output_type -> cmpool.UpdateESSyncTaskResp
	146, // 201: cmpool.cmpool.delete_es_sync_task:output_type -> cmpool.DeleteESSyncTaskResp
	149, // 202: cmpool.cmpool.get_es_sync_tasks:output_type -> cmpool.GetESSyncTasksResp
	151, // 203: cmpool.cmpool.get_es_sync_task_detail:output_type -> cmpool.GetESSyncTaskDetailResp
	153, // 204: cmpool.cmpool.enable_es_sync_task:output_type -> cmpool.EnableESSyncTaskResp
	158, // 205: cmpool.cmpool.execute_es_sync_by_host_list:output_type -> cmpool.ExecuteESSyncResp
	158, // 206: cmpool.cmpool.execute_es_sync_by_file:output_type -> cmpool.ExecuteESSyncResp
	157, // 207: cmpool.cmpool.execute_es_sync_full_sync:output_type -> cmpool.ExecuteESSyncFullSyncResp
	169, // 208: cmpool.cmpool.execute_cmsys_sync:output_type -> cmpool.ExecuteCMSysSyncResp
	169, // 209: cmpool.cmpool.execute_cmsys_sync_by_file:output_type -> cmpool.ExecuteCMSysSyncResp
	169, // 210: cmpool.cmpool.execute_cmsys_sync_full_sync:output_type -> cmpool.ExecuteCMSysSyncResp
	135, // [135:211] is the sub-list for method output_type
	59,  // [59:135] is the sub-list for method input_type
	59,  // [59:59] is the sub-list for extension type_name
	59,  // [59:59] is the sub-list for extension extendee
	0,   // [0:59] is the sub-list for field type_name
}

func init() { file_proto_cmpool_proto_init() }
func file_proto_cmpool_proto_init() {
	if File_proto_cmpool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_cmpool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractByHostsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractAllReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InjectAllReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InjectAllResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractByHostsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractByHostsSteamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractAllResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostExtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostLoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InjectHostsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InjectHostsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdbOpTasksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdbOpTasksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdbOpTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncHostsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncHostsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHostsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyHostsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyHostsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftDelHostsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftDelHostsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardDelHostsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardDelHostsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostsDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostsPoolDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostPoolDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostsDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostsPoolDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractByOwnerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractByOwnerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollAppsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollAppsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostsPoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHostsAppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHostsAppResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdfHostsAppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdfHostsAppResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelHostsAppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelHostsAppResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostsApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterGroupsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerResourceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerResourceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerResourceMaxReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerResourceMax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerResourceMaxResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResourceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMemberResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResourceMax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResourceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResourceMaxResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskPredictionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskPrediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskPredictionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRestoreCheckInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRestoreCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRestoreCheckInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfirmSummaryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfirmSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfirmSummaryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncClusterGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseSyncDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncClusterGroupsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadServerMetricsCSVReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadServerMetricsCSVProgressResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMonitoringDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostWithoutMonitoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMonitoringDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareResourceVerificationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareResourceVerificationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHardwareResourceVerificationStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareResourceVerificationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHardwareResourceVerificationStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHardwareResourceVerificationHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareResourceVerificationHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHardwareResourceVerificationHistoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScheduledTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScheduledTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScheduledTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScheduledTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScheduledTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScheduledTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduledTasksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduledTasksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduledTaskDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduledTaskDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableScheduledTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableScheduledTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduledTaskExecutionHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledTaskExecutionHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostExecutionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduledTaskExecutionHistoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduledTaskExecutionDetailsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledTaskExecutionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledTaskExecutionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduledTaskExecutionDetailsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHostsHardwareInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostHardwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHostsHardwareInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncExternalCmdbReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalCmdbHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncExternalCmdbResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualHostHardwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostApplicationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualAddHostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoFetchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualAddHostResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoFetchHostInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoFetchHostInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdcConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdcConfListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdcConfListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIdcConfReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIdcConfResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIdcConfReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIdcConfResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIdcConfReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIdcConfResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchIdcByIpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchIdcByIpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHostsIdcReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHostsIdcResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateESSyncTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateESSyncTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateESSyncTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateESSyncTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteESSyncTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteESSyncTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetESSyncTasksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSyncTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetESSyncTasksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetESSyncTaskDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetESSyncTaskDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableESSyncTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableESSyncTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteESSyncByHostListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteESSyncByFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteESSyncFullSyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteESSyncFullSyncResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteESSyncResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalSyncExecutionLogsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalSyncExecutionLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalSyncExecutionLogsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalSyncExecutionDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalSyncExecutionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalSyncExecutionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalSyncExecutionDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteCMSysSyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteCMSysSyncByFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteCMSysSyncFullSyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteCMSysSyncResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExternalSyncTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExternalSyncTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExternalSyncTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExternalSyncTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExternalSyncTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExternalSyncTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalSyncTasksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalSyncTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalSyncTasksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalSyncTaskDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalSyncTaskDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableExternalSyncTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableExternalSyncTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteExternalSyncByHostListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteExternalSyncByFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteExternalSyncFullSyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmpool_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteExternalSyncResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cmpool_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   187,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_cmpool_proto_goTypes,
		DependencyIndexes: file_proto_cmpool_proto_depIdxs,
		MessageInfos:      file_proto_cmpool_proto_msgTypes,
	}.Build()
	File_proto_cmpool_proto = out.File
	file_proto_cmpool_proto_rawDesc = nil
	file_proto_cmpool_proto_goTypes = nil
	file_proto_cmpool_proto_depIdxs = nil
}
