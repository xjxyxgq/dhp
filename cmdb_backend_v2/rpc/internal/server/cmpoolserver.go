// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: cmpool.proto

package server

import (
	"context"

	"cmdb-rpc/cmpool"
	"cmdb-rpc/internal/logic"
	"cmdb-rpc/internal/svc"
)

type CmpoolServer struct {
	svcCtx *svc.ServiceContext
	cmpool.UnimplementedCmpoolServer
}

func NewCmpoolServer(svcCtx *svc.ServiceContext) *CmpoolServer {
	return &CmpoolServer{
		svcCtx: svcCtx,
	}
}

// 从CMDB抽取主机数据
func (s *CmpoolServer) CmdbExtractByHosts(ctx context.Context, in *cmpool.ExtractByHostsReq) (*cmpool.ExtractByHostsResp, error) {
	l := logic.NewCmdbExtractByHostsLogic(ctx, s.svcCtx)
	return l.CmdbExtractByHosts(in)
}

// <必要数据搜集>，全量抽取CMDB中数据库服务器的数据并刷新到数据库资源池
func (s *CmpoolServer) CmdbExtractAll(ctx context.Context, in *cmpool.ExtractAllReq) (*cmpool.ExtractAllResp, error) {
	l := logic.NewCmdbExtractAllLogic(ctx, s.svcCtx)
	return l.CmdbExtractAll(in)
}

// 数据搜集，按照cmdb中的ownerGroup抽取所有属于具体组的服务器并写入hosts_pool
func (s *CmpoolServer) CmdbExtractHostsByOwner(ctx context.Context, in *cmpool.ExtractByOwnerReq) (*cmpool.ExtractByOwnerResp, error) {
	l := logic.NewCmdbExtractHostsByOwnerLogic(ctx, s.svcCtx)
	return l.CmdbExtractHostsByOwner(in)
}

// 向CMDB回写数据
func (s *CmpoolServer) CmdbInjectAll(ctx context.Context, in *cmpool.InjectAllReq) (*cmpool.InjectAllResp, error) {
	l := logic.NewCmdbInjectAllLogic(ctx, s.svcCtx)
	return l.CmdbInjectAll(in)
}

// 向 cmdb 中注入维护后的数据库资源池中对象的数据
func (s *CmpoolServer) CmdbInjectByHosts(ctx context.Context, in *cmpool.InjectHostsReq) (*cmpool.InjectHostsResp, error) {
	l := logic.NewCmdbInjectByHostsLogic(ctx, s.svcCtx)
	return l.CmdbInjectByHosts(in)
}

// 数据库主机池数据维护
func (s *CmpoolServer) CmdbSyncHosts(ctx context.Context, in *cmpool.SyncHostsReq) (*cmpool.SyncHostsResp, error) {
	l := logic.NewCmdbSyncHostsLogic(ctx, s.svcCtx)
	return l.CmdbSyncHosts(in)
}

// 手动修改资源池主机信息，如果主机信息最终 isStatic 不为 True，那么这里的修改会被后续的任务以真实数据刷掉
func (s *CmpoolServer) CmdbModifyHosts(ctx context.Context, in *cmpool.ModifyHostsReq) (*cmpool.ModifyHostsResp, error) {
	l := logic.NewCmdbModifyHostsLogic(ctx, s.svcCtx)
	return l.CmdbModifyHosts(in)
}

// 软删除资源池主机
func (s *CmpoolServer) CmdbSoftDelHosts(ctx context.Context, in *cmpool.SoftDelHostsReq) (*cmpool.SoftDelHostsResp, error) {
	l := logic.NewCmdbSoftDelHostsLogic(ctx, s.svcCtx)
	return l.CmdbSoftDelHosts(in)
}

// 硬删除资源池主机
func (s *CmpoolServer) CmdbHardDelHosts(ctx context.Context, in *cmpool.HardDelHostsReq) (*cmpool.HardDelHostsResp, error) {
	l := logic.NewCmdbHardDelHostsLogic(ctx, s.svcCtx)
	return l.CmdbHardDelHosts(in)
}

// 获取资源池主机信息，包括cmdb信息，应用部署信息等所有相关数据（这里是根据hosts_pool实时检索，数据并不来自于hosts_application表）
func (s *CmpoolServer) CmdbGetHostsDetail(ctx context.Context, in *cmpool.GetHostsDetailReq) (*cmpool.GetHostsDetailResp, error) {
	l := logic.NewCmdbGetHostsDetailLogic(ctx, s.svcCtx)
	return l.CmdbGetHostsDetail(in)
}

// 内部数据加工和检索
func (s *CmpoolServer) CollectApplications(ctx context.Context, in *cmpool.CollAppsReq) (*cmpool.CollAppsResp, error) {
	l := logic.NewCollectApplicationsLogic(ctx, s.svcCtx)
	return l.CollectApplications(in)
}

// 查询主机信息，主页面数据展示，返回的数据实际上和detail接口一致，这里没有做区别实现，如果有需要可以添加
func (s *CmpoolServer) GetHostsPool(ctx context.Context, in *cmpool.GetHostsPoolReq) (*cmpool.GetHostsDetailResp, error) {
	l := logic.NewGetHostsPoolLogic(ctx, s.svcCtx)
	return l.GetHostsPool(in)
}

// 查询主机硬件信息详情，主机子页面显示
func (s *CmpoolServer) GetHostsPoolDetail(ctx context.Context, in *cmpool.GetHostsPoolDetailReq) (*cmpool.GetHostsPoolDetailResp, error) {
	l := logic.NewGetHostsPoolDetailLogic(ctx, s.svcCtx)
	return l.GetHostsPoolDetail(in)
}

// 手动添加资源池主机应用信息
func (s *CmpoolServer) AddHostsApplication(ctx context.Context, in *cmpool.AddHostsAppReq) (*cmpool.AddHostsAppResp, error) {
	l := logic.NewAddHostsApplicationLogic(ctx, s.svcCtx)
	return l.AddHostsApplication(in)
}

// 手动修改资源池主机应用信息
func (s *CmpoolServer) ModifyHostsApplication(ctx context.Context, in *cmpool.MdfHostsAppReq) (*cmpool.MdfHostsAppResp, error) {
	l := logic.NewModifyHostsApplicationLogic(ctx, s.svcCtx)
	return l.ModifyHostsApplication(in)
}

// 删除资源池主机应用信息
func (s *CmpoolServer) DeleteHostsApplication(ctx context.Context, in *cmpool.DelHostsAppReq) (*cmpool.DelHostsAppResp, error) {
	l := logic.NewDeleteHostsApplicationLogic(ctx, s.svcCtx)
	return l.DeleteHostsApplication(in)
}

// 查询所有集群组及对应业务线
func (s *CmpoolServer) GetClusterGroups(ctx context.Context, in *cmpool.ClusterGroupsReq) (*cmpool.ClusterGroupsResp, error) {
	l := logic.NewGetClusterGroupsLogic(ctx, s.svcCtx)
	return l.GetClusterGroups(in)
}

// 查询主机资源使用率数据
func (s *CmpoolServer) GetServerResource(ctx context.Context, in *cmpool.ServerResourceReq) (*cmpool.ServerResourceResp, error) {
	l := logic.NewGetServerResourceLogic(ctx, s.svcCtx)
	return l.GetServerResource(in)
}

// 查询主机资源最大利用率数据
func (s *CmpoolServer) GetServerResourceMax(ctx context.Context, in *cmpool.ServerResourceMaxReq) (*cmpool.ServerResourceMaxResp, error) {
	l := logic.NewGetServerResourceMaxLogic(ctx, s.svcCtx)
	return l.GetServerResourceMax(in)
}

// 查询主机资源最大利用率数据（支持集群数组）
func (s *CmpoolServer) GetClusterResources(ctx context.Context, in *cmpool.ClusterResourceReq) (*cmpool.ClusterResourceResp, error) {
	l := logic.NewGetClusterResourcesLogic(ctx, s.svcCtx)
	return l.GetClusterResources(in)
}

// 获取集群资源最大利用率信息
func (s *CmpoolServer) GetClusterResourcesMax(ctx context.Context, in *cmpool.ClusterResourceReq) (*cmpool.ClusterResourceMaxResp, error) {
	l := logic.NewGetClusterResourcesMaxLogic(ctx, s.svcCtx)
	return l.GetClusterResourcesMax(in)
}

// 获取磁盘预测数据
func (s *CmpoolServer) GetDiskPrediction(ctx context.Context, in *cmpool.DiskPredictionReq) (*cmpool.DiskPredictionResp, error) {
	l := logic.NewGetDiskPredictionLogic(ctx, s.svcCtx)
	return l.GetDiskPrediction(in)
}

// 获取备份恢复检查信息
func (s *CmpoolServer) GetBackupRestoreCheckInfo(ctx context.Context, in *cmpool.BackupRestoreCheckInfoReq) (*cmpool.BackupRestoreCheckInfoResp, error) {
	l := logic.NewGetBackupRestoreCheckInfoLogic(ctx, s.svcCtx)
	return l.GetBackupRestoreCheckInfo(in)
}

// 获取集群确认摘要
func (s *CmpoolServer) GetClusterConfirmSummary(ctx context.Context, in *cmpool.ClusterConfirmSummaryReq) (*cmpool.ClusterConfirmSummaryResp, error) {
	l := logic.NewGetClusterConfirmSummaryLogic(ctx, s.svcCtx)
	return l.GetClusterConfirmSummary(in)
}

// 同步集群组数据
func (s *CmpoolServer) SyncClusterGroups(ctx context.Context, in *cmpool.SyncClusterGroupsReq) (*cmpool.SyncClusterGroupsResp, error) {
	l := logic.NewSyncClusterGroupsLogic(ctx, s.svcCtx)
	return l.SyncClusterGroups(in)
}

// 从集群实例表同步主机到hosts_pool和hosts_applications表
func (s *CmpoolServer) SyncHostsFromClusters(ctx context.Context, in *cmpool.SyncClusterGroupsReq) (*cmpool.SyncClusterGroupsResp, error) {
	l := logic.NewSyncHostsFromClustersLogic(ctx, s.svcCtx)
	return l.SyncHostsFromClusters(in)
}

func (s *CmpoolServer) LoadServerMetricsFromCsv(in *cmpool.LoadServerMetricsCSVReq, stream cmpool.Cmpool_LoadServerMetricsFromCsvServer) error {
	l := logic.NewLoadServerMetricsFromCsvLogic(stream.Context(), s.svcCtx)
	return l.LoadServerMetricsFromCsv(in, stream)
}

// 监控数据核对
func (s *CmpoolServer) VerifyMonitoringData(ctx context.Context, in *cmpool.VerifyMonitoringDataReq) (*cmpool.VerifyMonitoringDataResp, error) {
	l := logic.NewVerifyMonitoringDataLogic(ctx, s.svcCtx)
	return l.VerifyMonitoringData(in)
}

// 硬件资源验证
func (s *CmpoolServer) HardwareResourceVerification(ctx context.Context, in *cmpool.HardwareResourceVerificationReq) (*cmpool.HardwareResourceVerificationResp, error) {
	l := logic.NewHardwareResourceVerificationLogic(ctx, s.svcCtx)
	return l.HardwareResourceVerification(in)
}

// 获取硬件资源验证状态
func (s *CmpoolServer) GetHardwareResourceVerificationStatus(ctx context.Context, in *cmpool.GetHardwareResourceVerificationStatusReq) (*cmpool.GetHardwareResourceVerificationStatusResp, error) {
	l := logic.NewGetHardwareResourceVerificationStatusLogic(ctx, s.svcCtx)
	return l.GetHardwareResourceVerificationStatus(in)
}

// 获取硬件资源验证历史记录
func (s *CmpoolServer) GetHardwareResourceVerificationHistory(ctx context.Context, in *cmpool.GetHardwareResourceVerificationHistoryReq) (*cmpool.GetHardwareResourceVerificationHistoryResp, error) {
	l := logic.NewGetHardwareResourceVerificationHistoryLogic(ctx, s.svcCtx)
	return l.GetHardwareResourceVerificationHistory(in)
}

// 定时任务相关方法
func (s *CmpoolServer) CreateScheduledTask(ctx context.Context, in *cmpool.CreateScheduledTaskReq) (*cmpool.CreateScheduledTaskResp, error) {
	l := logic.NewCreateScheduledTaskLogic(ctx, s.svcCtx)
	return l.CreateScheduledTask(in)
}

// 更新定时任务
func (s *CmpoolServer) UpdateScheduledTask(ctx context.Context, in *cmpool.UpdateScheduledTaskReq) (*cmpool.UpdateScheduledTaskResp, error) {
	l := logic.NewUpdateScheduledTaskLogic(ctx, s.svcCtx)
	return l.UpdateScheduledTask(in)
}

// 删除定时任务
func (s *CmpoolServer) DeleteScheduledTask(ctx context.Context, in *cmpool.DeleteScheduledTaskReq) (*cmpool.DeleteScheduledTaskResp, error) {
	l := logic.NewDeleteScheduledTaskLogic(ctx, s.svcCtx)
	return l.DeleteScheduledTask(in)
}

// 获取定时任务列表
func (s *CmpoolServer) GetScheduledTasks(ctx context.Context, in *cmpool.GetScheduledTasksReq) (*cmpool.GetScheduledTasksResp, error) {
	l := logic.NewGetScheduledTasksLogic(ctx, s.svcCtx)
	return l.GetScheduledTasks(in)
}

// 获取定时任务详情
func (s *CmpoolServer) GetScheduledTaskDetail(ctx context.Context, in *cmpool.GetScheduledTaskDetailReq) (*cmpool.GetScheduledTaskDetailResp, error) {
	l := logic.NewGetScheduledTaskDetailLogic(ctx, s.svcCtx)
	return l.GetScheduledTaskDetail(in)
}

// 启用/禁用定时任务
func (s *CmpoolServer) EnableScheduledTask(ctx context.Context, in *cmpool.EnableScheduledTaskReq) (*cmpool.EnableScheduledTaskResp, error) {
	l := logic.NewEnableScheduledTaskLogic(ctx, s.svcCtx)
	return l.EnableScheduledTask(in)
}

// 获取定时任务执行历史
func (s *CmpoolServer) GetScheduledTaskExecutionHistory(ctx context.Context, in *cmpool.GetScheduledTaskExecutionHistoryReq) (*cmpool.GetScheduledTaskExecutionHistoryResp, error) {
	l := logic.NewGetScheduledTaskExecutionHistoryLogic(ctx, s.svcCtx)
	return l.GetScheduledTaskExecutionHistory(in)
}

// 获取定时任务执行详情
func (s *CmpoolServer) GetScheduledTaskExecutionDetails(ctx context.Context, in *cmpool.GetScheduledTaskExecutionDetailsReq) (*cmpool.GetScheduledTaskExecutionDetailsResp, error) {
	l := logic.NewGetScheduledTaskExecutionDetailsLogic(ctx, s.svcCtx)
	return l.GetScheduledTaskExecutionDetails(in)
}

// 用户认证相关方法
func (s *CmpoolServer) UserLogin(ctx context.Context, in *cmpool.LoginReq) (*cmpool.LoginResp, error) {
	l := logic.NewUserLoginLogic(ctx, s.svcCtx)
	return l.UserLogin(in)
}

// 验证Token
func (s *CmpoolServer) ValidateToken(ctx context.Context, in *cmpool.ValidateTokenReq) (*cmpool.ValidateTokenResp, error) {
	l := logic.NewValidateTokenLogic(ctx, s.svcCtx)
	return l.ValidateToken(in)
}

// 用户登出
func (s *CmpoolServer) UserLogout(ctx context.Context, in *cmpool.LogoutReq) (*cmpool.LogoutResp, error) {
	l := logic.NewUserLogoutLogic(ctx, s.svcCtx)
	return l.UserLogout(in)
}

// 创建用户（CAS用户自动创建）
func (s *CmpoolServer) CreateUser(ctx context.Context, in *cmpool.CreateUserReq) (*cmpool.CreateUserResp, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

// 从外部CMDB获取主机硬件信息并更新hosts_pool表
func (s *CmpoolServer) FetchHostsHardwareInfo(ctx context.Context, in *cmpool.FetchHostsHardwareInfoReq) (*cmpool.FetchHostsHardwareInfoResp, error) {
	l := logic.NewFetchHostsHardwareInfoLogic(ctx, s.svcCtx)
	return l.FetchHostsHardwareInfo(in)
}

// 从外部CMDB同步完整主机信息到hosts_pool表
func (s *CmpoolServer) SyncExternalCmdb(ctx context.Context, in *cmpool.SyncExternalCmdbReq) (*cmpool.SyncExternalCmdbResp, error) {
	l := logic.NewSyncExternalCmdbLogic(ctx, s.svcCtx)
	return l.SyncExternalCmdb(in)
}

// 手动添加主机到hosts_pool表并同步相关信息
func (s *CmpoolServer) ManualAddHost(ctx context.Context, in *cmpool.ManualAddHostReq) (*cmpool.ManualAddHostResp, error) {
	l := logic.NewManualAddHostLogic(ctx, s.svcCtx)
	return l.ManualAddHost(in)
}

// 自动获取主机信息用于填充表单
func (s *CmpoolServer) AutoFetchHostInfo(ctx context.Context, in *cmpool.AutoFetchHostInfoReq) (*cmpool.AutoFetchHostInfoResp, error) {
	l := logic.NewAutoFetchHostInfoLogic(ctx, s.svcCtx)
	return l.AutoFetchHostInfo(in)
}

// IDC机房配置管理相关方法
func (s *CmpoolServer) GetIdcConfList(ctx context.Context, in *cmpool.GetIdcConfListReq) (*cmpool.GetIdcConfListResp, error) {
	l := logic.NewGetIdcConfListLogic(ctx, s.svcCtx)
	return l.GetIdcConfList(in)
}

// 创建IDC机房配置
func (s *CmpoolServer) CreateIdcConf(ctx context.Context, in *cmpool.CreateIdcConfReq) (*cmpool.CreateIdcConfResp, error) {
	l := logic.NewCreateIdcConfLogic(ctx, s.svcCtx)
	return l.CreateIdcConf(in)
}

// 更新IDC机房配置
func (s *CmpoolServer) UpdateIdcConf(ctx context.Context, in *cmpool.UpdateIdcConfReq) (*cmpool.UpdateIdcConfResp, error) {
	l := logic.NewUpdateIdcConfLogic(ctx, s.svcCtx)
	return l.UpdateIdcConf(in)
}

// 删除IDC机房配置
func (s *CmpoolServer) DeleteIdcConf(ctx context.Context, in *cmpool.DeleteIdcConfReq) (*cmpool.DeleteIdcConfResp, error) {
	l := logic.NewDeleteIdcConfLogic(ctx, s.svcCtx)
	return l.DeleteIdcConf(in)
}

// 根据IP匹配IDC机房
func (s *CmpoolServer) MatchIdcByIp(ctx context.Context, in *cmpool.MatchIdcByIpReq) (*cmpool.MatchIdcByIpResp, error) {
	l := logic.NewMatchIdcByIpLogic(ctx, s.svcCtx)
	return l.MatchIdcByIp(in)
}

// 批量更新主机IDC信息
func (s *CmpoolServer) UpdateHostsIdc(ctx context.Context, in *cmpool.UpdateHostsIdcReq) (*cmpool.UpdateHostsIdcResp, error) {
	l := logic.NewUpdateHostsIdcLogic(ctx, s.svcCtx)
	return l.UpdateHostsIdc(in)
}

// ========== 统一的外部资源同步接口（推荐使用） ==========
func (s *CmpoolServer) CreateExternalSyncTask(ctx context.Context, in *cmpool.CreateExternalSyncTaskReq) (*cmpool.CreateExternalSyncTaskResp, error) {
	l := logic.NewCreateExternalSyncTaskLogic(ctx, s.svcCtx)
	return l.CreateExternalSyncTask(in)
}

// 更新外部同步任务配置
func (s *CmpoolServer) UpdateExternalSyncTask(ctx context.Context, in *cmpool.UpdateExternalSyncTaskReq) (*cmpool.UpdateExternalSyncTaskResp, error) {
	l := logic.NewUpdateExternalSyncTaskLogic(ctx, s.svcCtx)
	return l.UpdateExternalSyncTask(in)
}

// 删除外部同步任务配置
func (s *CmpoolServer) DeleteExternalSyncTask(ctx context.Context, in *cmpool.DeleteExternalSyncTaskReq) (*cmpool.DeleteExternalSyncTaskResp, error) {
	l := logic.NewDeleteExternalSyncTaskLogic(ctx, s.svcCtx)
	return l.DeleteExternalSyncTask(in)
}

// 获取外部同步任务配置列表
func (s *CmpoolServer) GetExternalSyncTasks(ctx context.Context, in *cmpool.GetExternalSyncTasksReq) (*cmpool.GetExternalSyncTasksResp, error) {
	l := logic.NewGetExternalSyncTasksLogic(ctx, s.svcCtx)
	return l.GetExternalSyncTasks(in)
}

// 获取外部同步任务配置详情
func (s *CmpoolServer) GetExternalSyncTaskDetail(ctx context.Context, in *cmpool.GetExternalSyncTaskDetailReq) (*cmpool.GetExternalSyncTaskDetailResp, error) {
	l := logic.NewGetExternalSyncTaskDetailLogic(ctx, s.svcCtx)
	return l.GetExternalSyncTaskDetail(in)
}

// 启用/禁用外部同步任务
func (s *CmpoolServer) EnableExternalSyncTask(ctx context.Context, in *cmpool.EnableExternalSyncTaskReq) (*cmpool.EnableExternalSyncTaskResp, error) {
	l := logic.NewEnableExternalSyncTaskLogic(ctx, s.svcCtx)
	return l.EnableExternalSyncTask(in)
}

// 2. 同步执行接口
func (s *CmpoolServer) ExecuteExternalSyncByHostList(ctx context.Context, in *cmpool.ExecuteExternalSyncByHostListReq) (*cmpool.ExecuteExternalSyncResp, error) {
	l := logic.NewExecuteExternalSyncByHostListLogic(ctx, s.svcCtx)
	return l.ExecuteExternalSyncByHostList(in)
}

// 根据文件立即执行外部同步
func (s *CmpoolServer) ExecuteExternalSyncByFile(ctx context.Context, in *cmpool.ExecuteExternalSyncByFileReq) (*cmpool.ExecuteExternalSyncResp, error) {
	l := logic.NewExecuteExternalSyncByFileLogic(ctx, s.svcCtx)
	return l.ExecuteExternalSyncByFile(in)
}

// 外部同步全量同步
func (s *CmpoolServer) ExecuteExternalSyncFullSync(ctx context.Context, in *cmpool.ExecuteExternalSyncFullSyncReq) (*cmpool.ExecuteExternalSyncResp, error) {
	l := logic.NewExecuteExternalSyncFullSyncLogic(ctx, s.svcCtx)
	return l.ExecuteExternalSyncFullSync(in)
}

// 3. 执行记录查询接口（已统一，无需修改）
func (s *CmpoolServer) GetExternalSyncExecutionLogs(ctx context.Context, in *cmpool.GetExternalSyncExecutionLogsReq) (*cmpool.GetExternalSyncExecutionLogsResp, error) {
	l := logic.NewGetExternalSyncExecutionLogsLogic(ctx, s.svcCtx)
	return l.GetExternalSyncExecutionLogs(in)
}

// 获取外部数据同步执行详情
func (s *CmpoolServer) GetExternalSyncExecutionDetail(ctx context.Context, in *cmpool.GetExternalSyncExecutionDetailReq) (*cmpool.GetExternalSyncExecutionDetailResp, error) {
	l := logic.NewGetExternalSyncExecutionDetailLogic(ctx, s.svcCtx)
	return l.GetExternalSyncExecutionDetail(in)
}

// ========== 已废弃的ES专用接口（请使用统一接口 create_external_sync_task 等） ==========
func (s *CmpoolServer) CreateEsSyncTask(ctx context.Context, in *cmpool.CreateESSyncTaskReq) (*cmpool.CreateESSyncTaskResp, error) {
	l := logic.NewCreateEsSyncTaskLogic(ctx, s.svcCtx)
	return l.CreateEsSyncTask(in)
}

// [DEPRECATED] 更新ES数据同步任务配置 - 请使用 update_external_sync_task
func (s *CmpoolServer) UpdateEsSyncTask(ctx context.Context, in *cmpool.UpdateESSyncTaskReq) (*cmpool.UpdateESSyncTaskResp, error) {
	l := logic.NewUpdateEsSyncTaskLogic(ctx, s.svcCtx)
	return l.UpdateEsSyncTask(in)
}

// [DEPRECATED] 删除ES数据同步任务配置 - 请使用 delete_external_sync_task
func (s *CmpoolServer) DeleteEsSyncTask(ctx context.Context, in *cmpool.DeleteESSyncTaskReq) (*cmpool.DeleteESSyncTaskResp, error) {
	l := logic.NewDeleteEsSyncTaskLogic(ctx, s.svcCtx)
	return l.DeleteEsSyncTask(in)
}

// [DEPRECATED] 获取ES数据同步任务配置列表 - 请使用 get_external_sync_tasks
func (s *CmpoolServer) GetEsSyncTasks(ctx context.Context, in *cmpool.GetESSyncTasksReq) (*cmpool.GetESSyncTasksResp, error) {
	l := logic.NewGetEsSyncTasksLogic(ctx, s.svcCtx)
	return l.GetEsSyncTasks(in)
}

// [DEPRECATED] 获取ES数据同步任务配置详情 - 请使用 get_external_sync_task_detail
func (s *CmpoolServer) GetEsSyncTaskDetail(ctx context.Context, in *cmpool.GetESSyncTaskDetailReq) (*cmpool.GetESSyncTaskDetailResp, error) {
	l := logic.NewGetEsSyncTaskDetailLogic(ctx, s.svcCtx)
	return l.GetEsSyncTaskDetail(in)
}

// [DEPRECATED] 启用/禁用ES数据同步任务 - 请使用 enable_external_sync_task
func (s *CmpoolServer) EnableEsSyncTask(ctx context.Context, in *cmpool.EnableESSyncTaskReq) (*cmpool.EnableESSyncTaskResp, error) {
	l := logic.NewEnableEsSyncTaskLogic(ctx, s.svcCtx)
	return l.EnableEsSyncTask(in)
}

// ES数据同步执行相关方法
func (s *CmpoolServer) ExecuteEsSyncByHostList(ctx context.Context, in *cmpool.ExecuteESSyncByHostListReq) (*cmpool.ExecuteESSyncResp, error) {
	l := logic.NewExecuteEsSyncByHostListLogic(ctx, s.svcCtx)
	return l.ExecuteEsSyncByHostList(in)
}

// [DEPRECATED] 根据文件立即执行ES数据同步 - 请使用 execute_external_sync_by_file
func (s *CmpoolServer) ExecuteEsSyncByFile(ctx context.Context, in *cmpool.ExecuteESSyncByFileReq) (*cmpool.ExecuteESSyncResp, error) {
	l := logic.NewExecuteEsSyncByFileLogic(ctx, s.svcCtx)
	return l.ExecuteEsSyncByFile(in)
}

// [DEPRECATED] ES全量同步 - 请使用 execute_external_sync_full_sync
func (s *CmpoolServer) ExecuteEsSyncFullSync(ctx context.Context, in *cmpool.ExecuteESSyncFullSyncReq) (*cmpool.ExecuteESSyncFullSyncResp, error) {
	l := logic.NewExecuteEsSyncFullSyncLogic(ctx, s.svcCtx)
	return l.ExecuteEsSyncFullSync(in)
}

// ========== 已废弃的CMSys专用接口（请使用统一接口） ==========
func (s *CmpoolServer) ExecuteCmsysSync(ctx context.Context, in *cmpool.ExecuteCMSysSyncReq) (*cmpool.ExecuteCMSysSyncResp, error) {
	l := logic.NewExecuteCmsysSyncLogic(ctx, s.svcCtx)
	return l.ExecuteCmsysSync(in)
}

// [DEPRECATED] CMSys按文件执行同步 - 请使用 execute_external_sync_by_file
func (s *CmpoolServer) ExecuteCmsysSyncByFile(ctx context.Context, in *cmpool.ExecuteCMSysSyncByFileReq) (*cmpool.ExecuteCMSysSyncResp, error) {
	l := logic.NewExecuteCmsysSyncByFileLogic(ctx, s.svcCtx)
	return l.ExecuteCmsysSyncByFile(in)
}

// [DEPRECATED] CMSys全量同步 - 请使用 execute_external_sync_full_sync
func (s *CmpoolServer) ExecuteCmsysSyncFullSync(ctx context.Context, in *cmpool.ExecuteCMSysSyncFullSyncReq) (*cmpool.ExecuteCMSysSyncResp, error) {
	l := logic.NewExecuteCmsysSyncFullSyncLogic(ctx, s.svcCtx)
	return l.ExecuteCmsysSyncFullSync(in)
}
