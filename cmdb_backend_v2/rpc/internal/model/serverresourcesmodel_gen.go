// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	serverResourcesFieldNames          = builder.RawFieldNames(&ServerResources{})
	serverResourcesRows                = strings.Join(serverResourcesFieldNames, ",")
	serverResourcesRowsExpectAutoSet   = strings.Join(stringx.Remove(serverResourcesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	serverResourcesRowsWithPlaceHolder = strings.Join(stringx.Remove(serverResourcesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	serverResourcesModel interface {
		Insert(ctx context.Context, data *ServerResources) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ServerResources, error)
		FindOneByIpMonDate(ctx context.Context, ip sql.NullString, monDate sql.NullTime) (*ServerResources, error)
		Update(ctx context.Context, data *ServerResources) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultServerResourcesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ServerResources struct {
		Id             uint64          `db:"id"`
		CreateTime     time.Time       `db:"create_time"`
		UpdateTime     time.Time       `db:"update_time"`
		DeleteTime     sql.NullTime    `db:"delete_time"`
		IsDeleted      int64           `db:"is_deleted"`
		PoolId         uint64          `db:"pool_id"`          // 主机池ID
		Ip             sql.NullString  `db:"ip"`               // IP地址
		Port           sql.NullInt64   `db:"port"`             // 端口
		UsedMemory     sql.NullFloat64 `db:"used_memory"`      // 已用内存(GB)
		UsedDisk       sql.NullFloat64 `db:"used_disk"`        // 已用磁盘(GB)
		CpuLoad        sql.NullFloat64 `db:"cpu_load"`         // CPU负载(%)
		CpuPercentMax  sql.NullFloat64 `db:"cpu_percent_max"`  // CPU使用率最大值(%)
		CpuPercentAvg  sql.NullFloat64 `db:"cpu_percent_avg"`  // CPU使用率平均值(%)
		CpuPercentMin  sql.NullFloat64 `db:"cpu_percent_min"`  // CPU使用率最小值(%)
		MemPercentMax  sql.NullFloat64 `db:"mem_percent_max"`  // 内存使用率最大值(%)
		MemPercentAvg  sql.NullFloat64 `db:"mem_percent_avg"`  // 内存使用率平均值(%)
		MemPercentMin  sql.NullFloat64 `db:"mem_percent_min"`  // 内存使用率最小值(%)
		DiskPercentMax sql.NullFloat64 `db:"disk_percent_max"` // 磁盘使用率最大值(%)
		DiskPercentAvg sql.NullFloat64 `db:"disk_percent_avg"` // 磁盘使用率平均值(%)
		DiskPercentMin sql.NullFloat64 `db:"disk_percent_min"` // 磁盘使用率最小值(%)
		MonDate        sql.NullTime    `db:"mon_date"`         // 监控指标记录日期
	}
)

func newServerResourcesModel(conn sqlx.SqlConn) *defaultServerResourcesModel {
	return &defaultServerResourcesModel{
		conn:  conn,
		table: "`server_resources`",
	}
}

func (m *defaultServerResourcesModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultServerResourcesModel) FindOne(ctx context.Context, id uint64) (*ServerResources, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", serverResourcesRows, m.table)
	var resp ServerResources
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultServerResourcesModel) FindOneByIpMonDate(ctx context.Context, ip sql.NullString, monDate sql.NullTime) (*ServerResources, error) {
	var resp ServerResources
	query := fmt.Sprintf("select %s from %s where `ip` = ? and `mon_date` = ? limit 1", serverResourcesRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, ip, monDate)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultServerResourcesModel) Insert(ctx context.Context, data *ServerResources) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, serverResourcesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.IsDeleted, data.PoolId, data.Ip, data.Port, data.UsedMemory, data.UsedDisk, data.CpuLoad, data.CpuPercentMax, data.CpuPercentAvg, data.CpuPercentMin, data.MemPercentMax, data.MemPercentAvg, data.MemPercentMin, data.DiskPercentMax, data.DiskPercentAvg, data.DiskPercentMin, data.MonDate)
	return ret, err
}

func (m *defaultServerResourcesModel) Update(ctx context.Context, newData *ServerResources) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, serverResourcesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.IsDeleted, newData.PoolId, newData.Ip, newData.Port, newData.UsedMemory, newData.UsedDisk, newData.CpuLoad, newData.CpuPercentMax, newData.CpuPercentAvg, newData.CpuPercentMin, newData.MemPercentMax, newData.MemPercentAvg, newData.MemPercentMin, newData.DiskPercentMax, newData.DiskPercentAvg, newData.DiskPercentMin, newData.MonDate, newData.Id)
	return err
}

func (m *defaultServerResourcesModel) tableName() string {
	return m.table
}
