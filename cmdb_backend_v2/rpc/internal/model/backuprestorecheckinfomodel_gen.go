// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	backupRestoreCheckInfoFieldNames          = builder.RawFieldNames(&BackupRestoreCheckInfo{})
	backupRestoreCheckInfoRows                = strings.Join(backupRestoreCheckInfoFieldNames, ",")
	backupRestoreCheckInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(backupRestoreCheckInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	backupRestoreCheckInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(backupRestoreCheckInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	backupRestoreCheckInfoModel interface {
		Insert(ctx context.Context, data *BackupRestoreCheckInfo) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*BackupRestoreCheckInfo, error)
		Update(ctx context.Context, data *BackupRestoreCheckInfo) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultBackupRestoreCheckInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BackupRestoreCheckInfo struct {
		Id                 uint64    `db:"id"`
		CheckSeq           string    `db:"check_seq"`             // 检查轮次
		CheckDb            string    `db:"check_db"`              // 检查数据库集群
		CheckSrcIp         string    `db:"check_src_ip"`          // 备份IP
		DbBackupTime       time.Time `db:"db_backup_time"`        // 数据库备份时间
		DbBackupDate       string    `db:"db_backup_date"`        // 备份日期
		BackupName         string    `db:"backup_name"`           // 备份文件名
		DbRestoreBeginTime time.Time `db:"db_restore_begin_time"` // 恢复开始时间
		CheckDstIp         string    `db:"check_dst_ip"`          // 恢复IP
		CheckApp           string    `db:"check_app"`             // 恢复业务
		CheckDbType        string    `db:"check_db_type"`         // 数据库架构
		DbAppLine          string    `db:"db_app_line"`           // 数据库应用团队
		DbRestoreEndTime   time.Time `db:"db_restore_end_time"`   // 恢复结束时间
		BackupCheckResult  string    `db:"backup_check_result"`   // 备份检查结果
		CreatedAt          time.Time `db:"created_at"`
		UpdatedAt          time.Time `db:"updated_at"`
	}
)

func newBackupRestoreCheckInfoModel(conn sqlx.SqlConn) *defaultBackupRestoreCheckInfoModel {
	return &defaultBackupRestoreCheckInfoModel{
		conn:  conn,
		table: "`backup_restore_check_info`",
	}
}

func (m *defaultBackupRestoreCheckInfoModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBackupRestoreCheckInfoModel) FindOne(ctx context.Context, id uint64) (*BackupRestoreCheckInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", backupRestoreCheckInfoRows, m.table)
	var resp BackupRestoreCheckInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBackupRestoreCheckInfoModel) Insert(ctx context.Context, data *BackupRestoreCheckInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, backupRestoreCheckInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CheckSeq, data.CheckDb, data.CheckSrcIp, data.DbBackupTime, data.DbBackupDate, data.BackupName, data.DbRestoreBeginTime, data.CheckDstIp, data.CheckApp, data.CheckDbType, data.DbAppLine, data.DbRestoreEndTime, data.BackupCheckResult)
	return ret, err
}

func (m *defaultBackupRestoreCheckInfoModel) Update(ctx context.Context, data *BackupRestoreCheckInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, backupRestoreCheckInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CheckSeq, data.CheckDb, data.CheckSrcIp, data.DbBackupTime, data.DbBackupDate, data.BackupName, data.DbRestoreBeginTime, data.CheckDstIp, data.CheckApp, data.CheckDbType, data.DbAppLine, data.DbRestoreEndTime, data.BackupCheckResult, data.Id)
	return err
}

func (m *defaultBackupRestoreCheckInfoModel) tableName() string {
	return m.table
}
