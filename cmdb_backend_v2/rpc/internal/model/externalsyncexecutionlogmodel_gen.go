// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	externalSyncExecutionLogFieldNames          = builder.RawFieldNames(&ExternalSyncExecutionLog{})
	externalSyncExecutionLogRows                = strings.Join(externalSyncExecutionLogFieldNames, ",")
	externalSyncExecutionLogRowsExpectAutoSet   = strings.Join(stringx.Remove(externalSyncExecutionLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	externalSyncExecutionLogRowsWithPlaceHolder = strings.Join(stringx.Remove(externalSyncExecutionLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	externalSyncExecutionLogModel interface {
		Insert(ctx context.Context, data *ExternalSyncExecutionLog) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ExternalSyncExecutionLog, error)
		Update(ctx context.Context, data *ExternalSyncExecutionLog) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultExternalSyncExecutionLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ExternalSyncExecutionLog struct {
		Id              uint64         `db:"id"`
		TaskId          uint64         `db:"task_id"`           // 任务配置ID
		TaskName        string         `db:"task_name"`         // 任务名称
		DataSource      string         `db:"data_source"`       // 数据源类型：elasticsearch-ES数据源，cmsys-CMSys数据源
		ExecutionTime   time.Time      `db:"execution_time"`    // 执行时间
		ExecutionStatus string         `db:"execution_status"`  // 执行状态(success/failed/partial)
		TotalHosts      int64          `db:"total_hosts"`       // 总主机数
		SuccessCount    int64          `db:"success_count"`     // 成功同步数量
		FailedCount     int64          `db:"failed_count"`      // 失败同步数量
		NotInPoolCount  int64          `db:"not_in_pool_count"` // ES有但hosts_pool没有的数量
		ErrorMessage    sql.NullString `db:"error_message"`     // 错误信息
		DurationMs      sql.NullInt64  `db:"duration_ms"`       // 执行时长(毫秒)
		QueryTimeRange  sql.NullString `db:"query_time_range"`  // 查询时间范围
		CreatedAt       time.Time      `db:"created_at"`        // 创建时间
	}
)

func newExternalSyncExecutionLogModel(conn sqlx.SqlConn) *defaultExternalSyncExecutionLogModel {
	return &defaultExternalSyncExecutionLogModel{
		conn:  conn,
		table: "`external_sync_execution_log`",
	}
}

func (m *defaultExternalSyncExecutionLogModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultExternalSyncExecutionLogModel) FindOne(ctx context.Context, id uint64) (*ExternalSyncExecutionLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", externalSyncExecutionLogRows, m.table)
	var resp ExternalSyncExecutionLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultExternalSyncExecutionLogModel) Insert(ctx context.Context, data *ExternalSyncExecutionLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, externalSyncExecutionLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TaskId, data.TaskName, data.DataSource, data.ExecutionTime, data.ExecutionStatus, data.TotalHosts, data.SuccessCount, data.FailedCount, data.NotInPoolCount, data.ErrorMessage, data.DurationMs, data.QueryTimeRange)
	return ret, err
}

func (m *defaultExternalSyncExecutionLogModel) Update(ctx context.Context, data *ExternalSyncExecutionLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, externalSyncExecutionLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TaskId, data.TaskName, data.DataSource, data.ExecutionTime, data.ExecutionStatus, data.TotalHosts, data.SuccessCount, data.FailedCount, data.NotInPoolCount, data.ErrorMessage, data.DurationMs, data.QueryTimeRange, data.Id)
	return err
}

func (m *defaultExternalSyncExecutionLogModel) tableName() string {
	return m.table
}
