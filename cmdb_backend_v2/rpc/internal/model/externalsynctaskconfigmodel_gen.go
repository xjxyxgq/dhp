// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	externalSyncTaskConfigFieldNames          = builder.RawFieldNames(&ExternalSyncTaskConfig{})
	externalSyncTaskConfigRows                = strings.Join(externalSyncTaskConfigFieldNames, ",")
	externalSyncTaskConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(externalSyncTaskConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	externalSyncTaskConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(externalSyncTaskConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	externalSyncTaskConfigModel interface {
		Insert(ctx context.Context, data *ExternalSyncTaskConfig) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ExternalSyncTaskConfig, error)
		FindOneByTaskName(ctx context.Context, taskName string) (*ExternalSyncTaskConfig, error)
		Update(ctx context.Context, data *ExternalSyncTaskConfig) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultExternalSyncTaskConfigModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ExternalSyncTaskConfig struct {
		Id                uint64         `db:"id"`
		TaskName          string         `db:"task_name"`           // 任务名称
		Description       sql.NullString `db:"description"`         // 任务描述
		DataSource        string         `db:"data_source"`         // 数据源类型
		EsEndpoint        sql.NullString `db:"es_endpoint"`         // ES接口地址（可选，有默认值）
		EsIndexPattern    sql.NullString `db:"es_index_pattern"`    // ES索引模式（可选，有默认值）
		CmsysQuery        sql.NullString `db:"cmsys_query"`         // CMSys查询参数（可选）
		CronExpression    string         `db:"cron_expression"`     // Cron表达式
		QueryTimeRange    string         `db:"query_time_range"`    // 查询时间范围（如7d, 30d）
		IsEnabled         int64          `db:"is_enabled"`          // 是否启用：0-禁用，1-启用
		CreatedBy         sql.NullString `db:"created_by"`          // 创建人
		CreatedAt         time.Time      `db:"created_at"`          // 创建时间
		UpdatedAt         time.Time      `db:"updated_at"`          // 更新时间
		LastExecutionTime sql.NullTime   `db:"last_execution_time"` // 上次执行时间
		NextExecutionTime sql.NullTime   `db:"next_execution_time"` // 下次执行时间
		DeletedAt         sql.NullTime   `db:"deleted_at"`          // 删除时间（软删除）
	}
)

func newExternalSyncTaskConfigModel(conn sqlx.SqlConn) *defaultExternalSyncTaskConfigModel {
	return &defaultExternalSyncTaskConfigModel{
		conn:  conn,
		table: "`external_sync_task_config`",
	}
}

func (m *defaultExternalSyncTaskConfigModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultExternalSyncTaskConfigModel) FindOne(ctx context.Context, id uint64) (*ExternalSyncTaskConfig, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", externalSyncTaskConfigRows, m.table)
	var resp ExternalSyncTaskConfig
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultExternalSyncTaskConfigModel) FindOneByTaskName(ctx context.Context, taskName string) (*ExternalSyncTaskConfig, error) {
	var resp ExternalSyncTaskConfig
	query := fmt.Sprintf("select %s from %s where `task_name` = ? limit 1", externalSyncTaskConfigRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, taskName)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultExternalSyncTaskConfigModel) Insert(ctx context.Context, data *ExternalSyncTaskConfig) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, externalSyncTaskConfigRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TaskName, data.Description, data.DataSource, data.EsEndpoint, data.EsIndexPattern, data.CmsysQuery, data.CronExpression, data.QueryTimeRange, data.IsEnabled, data.CreatedBy, data.LastExecutionTime, data.NextExecutionTime, data.DeletedAt)
	return ret, err
}

func (m *defaultExternalSyncTaskConfigModel) Update(ctx context.Context, newData *ExternalSyncTaskConfig) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, externalSyncTaskConfigRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.TaskName, newData.Description, newData.DataSource, newData.EsEndpoint, newData.EsIndexPattern, newData.CmsysQuery, newData.CronExpression, newData.QueryTimeRange, newData.IsEnabled, newData.CreatedBy, newData.LastExecutionTime, newData.NextExecutionTime, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultExternalSyncTaskConfigModel) tableName() string {
	return m.table
}
