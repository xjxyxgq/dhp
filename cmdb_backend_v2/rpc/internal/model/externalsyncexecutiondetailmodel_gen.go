// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	externalSyncExecutionDetailFieldNames          = builder.RawFieldNames(&ExternalSyncExecutionDetail{})
	externalSyncExecutionDetailRows                = strings.Join(externalSyncExecutionDetailFieldNames, ",")
	externalSyncExecutionDetailRowsExpectAutoSet   = strings.Join(stringx.Remove(externalSyncExecutionDetailFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	externalSyncExecutionDetailRowsWithPlaceHolder = strings.Join(stringx.Remove(externalSyncExecutionDetailFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	externalSyncExecutionDetailModel interface {
		Insert(ctx context.Context, data *ExternalSyncExecutionDetail) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ExternalSyncExecutionDetail, error)
		Update(ctx context.Context, data *ExternalSyncExecutionDetail) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultExternalSyncExecutionDetailModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ExternalSyncExecutionDetail struct {
		Id             uint64          `db:"id"`
		ExecutionId    uint64          `db:"execution_id"`     // 执行记录ID
		HostIp         string          `db:"host_ip"`          // 主机IP
		HostName       sql.NullString  `db:"host_name"`        // 主机名
		SyncStatus     string          `db:"sync_status"`      // 同步状态(success/failed/not_in_pool)
		ErrorMessage   sql.NullString  `db:"error_message"`    // 错误信息
		MaxCpu         sql.NullFloat64 `db:"max_cpu"`          // CPU最大使用率
		AvgCpu         sql.NullFloat64 `db:"avg_cpu"`          // CPU平均使用率
		MaxMemory      sql.NullFloat64 `db:"max_memory"`       // 内存最大使用量(GB)
		AvgMemory      sql.NullFloat64 `db:"avg_memory"`       // 内存平均使用量(GB)
		MaxDisk        sql.NullFloat64 `db:"max_disk"`         // 磁盘最大使用量(GB)
		AvgDisk        sql.NullFloat64 `db:"avg_disk"`         // 磁盘平均使用量(GB)
		DataPointCount sql.NullInt64   `db:"data_point_count"` // 数据点数量
		CreatedAt      time.Time       `db:"created_at"`       // 创建时间
	}
)

func newExternalSyncExecutionDetailModel(conn sqlx.SqlConn) *defaultExternalSyncExecutionDetailModel {
	return &defaultExternalSyncExecutionDetailModel{
		conn:  conn,
		table: "`external_sync_execution_detail`",
	}
}

func (m *defaultExternalSyncExecutionDetailModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultExternalSyncExecutionDetailModel) FindOne(ctx context.Context, id uint64) (*ExternalSyncExecutionDetail, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", externalSyncExecutionDetailRows, m.table)
	var resp ExternalSyncExecutionDetail
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultExternalSyncExecutionDetailModel) Insert(ctx context.Context, data *ExternalSyncExecutionDetail) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, externalSyncExecutionDetailRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ExecutionId, data.HostIp, data.HostName, data.SyncStatus, data.ErrorMessage, data.MaxCpu, data.AvgCpu, data.MaxMemory, data.AvgMemory, data.MaxDisk, data.AvgDisk, data.DataPointCount)
	return ret, err
}

func (m *defaultExternalSyncExecutionDetailModel) Update(ctx context.Context, data *ExternalSyncExecutionDetail) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, externalSyncExecutionDetailRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ExecutionId, data.HostIp, data.HostName, data.SyncStatus, data.ErrorMessage, data.MaxCpu, data.AvgCpu, data.MaxMemory, data.AvgMemory, data.MaxDisk, data.AvgDisk, data.DataPointCount, data.Id)
	return err
}

func (m *defaultExternalSyncExecutionDetailModel) tableName() string {
	return m.table
}
