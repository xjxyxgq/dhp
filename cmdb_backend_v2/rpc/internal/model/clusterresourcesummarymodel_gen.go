// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	clusterResourceSummaryFieldNames          = builder.RawFieldNames(&ClusterResourceSummary{})
	clusterResourceSummaryRows                = strings.Join(clusterResourceSummaryFieldNames, ",")
	clusterResourceSummaryRowsExpectAutoSet   = strings.Join(stringx.Remove(clusterResourceSummaryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	clusterResourceSummaryRowsWithPlaceHolder = strings.Join(stringx.Remove(clusterResourceSummaryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	clusterResourceSummaryModel interface {
		Insert(ctx context.Context, data *ClusterResourceSummary) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ClusterResourceSummary, error)
		Update(ctx context.Context, data *ClusterResourceSummary) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultClusterResourceSummaryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ClusterResourceSummary struct {
		Id          uint64          `db:"id"`
		Department  sql.NullString  `db:"department"`   // 部门
		Team        sql.NullString  `db:"team"`         // 团队
		ClusterName sql.NullString  `db:"cluster_name"` // 集群名称
		ClusterIps  sql.NullString  `db:"cluster_ips"`  // 集群IP列表
		ServerType  sql.NullString  `db:"server_type"`  // 服务类型
		MaxCpu      sql.NullFloat64 `db:"max_cpu"`      // 最大CPU使用率
		AvgCpu      sql.NullFloat64 `db:"avg_cpu"`      // 平均CPU使用率
		MaxMemory   sql.NullFloat64 `db:"max_memory"`   // 最大内存使用率
		AvgMemory   sql.NullFloat64 `db:"avg_memory"`   // 平均内存使用率
		MaxDisk     sql.NullFloat64 `db:"max_disk"`     // 最大磁盘使用率
		AvgDisk     sql.NullFloat64 `db:"avg_disk"`     // 平均磁盘使用率
		CreatedAt   time.Time       `db:"created_at"`
		UpdatedAt   time.Time       `db:"updated_at"`
	}
)

func newClusterResourceSummaryModel(conn sqlx.SqlConn) *defaultClusterResourceSummaryModel {
	return &defaultClusterResourceSummaryModel{
		conn:  conn,
		table: "`cluster_resource_summary`",
	}
}

func (m *defaultClusterResourceSummaryModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultClusterResourceSummaryModel) FindOne(ctx context.Context, id uint64) (*ClusterResourceSummary, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", clusterResourceSummaryRows, m.table)
	var resp ClusterResourceSummary
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClusterResourceSummaryModel) Insert(ctx context.Context, data *ClusterResourceSummary) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, clusterResourceSummaryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Department, data.Team, data.ClusterName, data.ClusterIps, data.ServerType, data.MaxCpu, data.AvgCpu, data.MaxMemory, data.AvgMemory, data.MaxDisk, data.AvgDisk)
	return ret, err
}

func (m *defaultClusterResourceSummaryModel) Update(ctx context.Context, data *ClusterResourceSummary) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, clusterResourceSummaryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Department, data.Team, data.ClusterName, data.ClusterIps, data.ServerType, data.MaxCpu, data.AvgCpu, data.MaxMemory, data.AvgMemory, data.MaxDisk, data.AvgDisk, data.Id)
	return err
}

func (m *defaultClusterResourceSummaryModel) tableName() string {
	return m.table
}
