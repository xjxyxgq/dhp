// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	mysqlClusterInstanceFieldNames          = builder.RawFieldNames(&MysqlClusterInstance{})
	mysqlClusterInstanceRows                = strings.Join(mysqlClusterInstanceFieldNames, ",")
	mysqlClusterInstanceRowsExpectAutoSet   = strings.Join(stringx.Remove(mysqlClusterInstanceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	mysqlClusterInstanceRowsWithPlaceHolder = strings.Join(stringx.Remove(mysqlClusterInstanceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	mysqlClusterInstanceModel interface {
		Insert(ctx context.Context, data *MysqlClusterInstance) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*MysqlClusterInstance, error)
		FindOneByClusterNameIpPort(ctx context.Context, clusterName string, ip string, port int64) (*MysqlClusterInstance, error)
		Update(ctx context.Context, data *MysqlClusterInstance) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultMysqlClusterInstanceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	MysqlClusterInstance struct {
		Id             uint64         `db:"id"`
		ClusterName    string         `db:"cluster_name"`    // 集群名称
		Ip             string         `db:"ip"`              // 实例IP
		Port           int64          `db:"port"`            // 实例端口
		InstanceRole   string         `db:"instance_role"`   // 实例角色(master/slave)
		Version        sql.NullString `db:"version"`         // MySQL版本
		InstanceStatus string         `db:"instance_status"` // 实例状态
		DataDir        sql.NullString `db:"data_dir"`        // 数据目录
		CreatedAt      time.Time      `db:"created_at"`
		UpdatedAt      time.Time      `db:"updated_at"`
		DeletedAt      sql.NullTime   `db:"deleted_at"`
	}
)

func newMysqlClusterInstanceModel(conn sqlx.SqlConn) *defaultMysqlClusterInstanceModel {
	return &defaultMysqlClusterInstanceModel{
		conn:  conn,
		table: "`mysql_cluster_instance`",
	}
}

func (m *defaultMysqlClusterInstanceModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMysqlClusterInstanceModel) FindOne(ctx context.Context, id uint64) (*MysqlClusterInstance, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", mysqlClusterInstanceRows, m.table)
	var resp MysqlClusterInstance
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMysqlClusterInstanceModel) FindOneByClusterNameIpPort(ctx context.Context, clusterName string, ip string, port int64) (*MysqlClusterInstance, error) {
	var resp MysqlClusterInstance
	query := fmt.Sprintf("select %s from %s where `cluster_name` = ? and `ip` = ? and `port` = ? limit 1", mysqlClusterInstanceRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, clusterName, ip, port)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMysqlClusterInstanceModel) Insert(ctx context.Context, data *MysqlClusterInstance) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, mysqlClusterInstanceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ClusterName, data.Ip, data.Port, data.InstanceRole, data.Version, data.InstanceStatus, data.DataDir, data.DeletedAt)
	return ret, err
}

func (m *defaultMysqlClusterInstanceModel) Update(ctx context.Context, newData *MysqlClusterInstance) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, mysqlClusterInstanceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ClusterName, newData.Ip, newData.Port, newData.InstanceRole, newData.Version, newData.InstanceStatus, newData.DataDir, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultMysqlClusterInstanceModel) tableName() string {
	return m.table
}
