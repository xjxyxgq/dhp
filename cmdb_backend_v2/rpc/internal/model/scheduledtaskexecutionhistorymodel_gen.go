// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	scheduledTaskExecutionHistoryFieldNames          = builder.RawFieldNames(&ScheduledTaskExecutionHistory{})
	scheduledTaskExecutionHistoryRows                = strings.Join(scheduledTaskExecutionHistoryFieldNames, ",")
	scheduledTaskExecutionHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(scheduledTaskExecutionHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	scheduledTaskExecutionHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(scheduledTaskExecutionHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	scheduledTaskExecutionHistoryModel interface {
		Insert(ctx context.Context, data *ScheduledTaskExecutionHistory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ScheduledTaskExecutionHistory, error)
		Update(ctx context.Context, data *ScheduledTaskExecutionHistory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultScheduledTaskExecutionHistoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ScheduledTaskExecutionHistory struct {
		Id              int64          `db:"id"`
		ScheduledTaskId int64          `db:"scheduled_task_id"` // 定时任务ID
		ExecutionTaskId string         `db:"execution_task_id"` // 执行任务ID（对应hardware_resource_verification.task_id）
		ExecutionTime   time.Time      `db:"execution_time"`    // 执行时间
		ExecutionStatus string         `db:"execution_status"`  // 执行状态
		TotalHosts      int64          `db:"total_hosts"`       // 总主机数
		SuccessHosts    int64          `db:"success_hosts"`     // 成功主机数
		FailedHosts     int64          `db:"failed_hosts"`      // 失败主机数
		ErrorMessage    sql.NullString `db:"error_message"`     // 错误信息
		CreateTime      time.Time      `db:"create_time"`
		UpdateTime      time.Time      `db:"update_time"`
		DeleteTime      sql.NullTime   `db:"delete_time"`
		IsDeleted       int64          `db:"is_deleted"`
	}
)

func newScheduledTaskExecutionHistoryModel(conn sqlx.SqlConn) *defaultScheduledTaskExecutionHistoryModel {
	return &defaultScheduledTaskExecutionHistoryModel{
		conn:  conn,
		table: "`scheduled_task_execution_history`",
	}
}

func (m *defaultScheduledTaskExecutionHistoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultScheduledTaskExecutionHistoryModel) FindOne(ctx context.Context, id int64) (*ScheduledTaskExecutionHistory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", scheduledTaskExecutionHistoryRows, m.table)
	var resp ScheduledTaskExecutionHistory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultScheduledTaskExecutionHistoryModel) Insert(ctx context.Context, data *ScheduledTaskExecutionHistory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, scheduledTaskExecutionHistoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ScheduledTaskId, data.ExecutionTaskId, data.ExecutionTime, data.ExecutionStatus, data.TotalHosts, data.SuccessHosts, data.FailedHosts, data.ErrorMessage, data.DeleteTime, data.IsDeleted)
	return ret, err
}

func (m *defaultScheduledTaskExecutionHistoryModel) Update(ctx context.Context, data *ScheduledTaskExecutionHistory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, scheduledTaskExecutionHistoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ScheduledTaskId, data.ExecutionTaskId, data.ExecutionTime, data.ExecutionStatus, data.TotalHosts, data.SuccessHosts, data.FailedHosts, data.ErrorMessage, data.DeleteTime, data.IsDeleted, data.Id)
	return err
}

func (m *defaultScheduledTaskExecutionHistoryModel) tableName() string {
	return m.table
}
