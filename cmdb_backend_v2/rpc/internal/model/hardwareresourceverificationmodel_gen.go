// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	hardwareResourceVerificationFieldNames          = builder.RawFieldNames(&HardwareResourceVerification{})
	hardwareResourceVerificationRows                = strings.Join(hardwareResourceVerificationFieldNames, ",")
	hardwareResourceVerificationRowsExpectAutoSet   = strings.Join(stringx.Remove(hardwareResourceVerificationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	hardwareResourceVerificationRowsWithPlaceHolder = strings.Join(stringx.Remove(hardwareResourceVerificationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	hardwareResourceVerificationModel interface {
		Insert(ctx context.Context, data *HardwareResourceVerification) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*HardwareResourceVerification, error)
		Update(ctx context.Context, data *HardwareResourceVerification) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultHardwareResourceVerificationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HardwareResourceVerification struct {
		Id              uint64         `db:"id"`
		CreateTime      time.Time      `db:"create_time"`
		UpdateTime      time.Time      `db:"update_time"`
		DeleteTime      sql.NullTime   `db:"delete_time"`
		IsDeleted       int64          `db:"is_deleted"`
		TaskId          string         `db:"task_id"`          // 任务ID，用于关联同一批次的多个主机验证
		HostIp          string         `db:"host_ip"`          // 目标主机IP
		ResourceType    string         `db:"resource_type"`    // 资源类型
		TargetPercent   uint64         `db:"target_percent"`   // 目标资源占用百分比
		Duration        uint64         `db:"duration"`         // 执行持续时间（秒）
		ScriptParams    sql.NullString `db:"script_params"`    // 脚本执行参数（JSON格式）
		ExecutionStatus string         `db:"execution_status"` // 执行状态
		StartTime       sql.NullTime   `db:"start_time"`       // 执行开始时间
		EndTime         sql.NullTime   `db:"end_time"`         // 执行结束时间
		ExitCode        sql.NullInt64  `db:"exit_code"`        // 脚本退出代码
		StdoutLog       sql.NullString `db:"stdout_log"`       // 标准输出日志
		StderrLog       sql.NullString `db:"stderr_log"`       // 错误输出日志
		ResultSummary   sql.NullString `db:"result_summary"`   // 执行结果摘要（JSON格式）
		SshError        sql.NullString `db:"ssh_error"`        // SSH连接错误信息
	}
)

func newHardwareResourceVerificationModel(conn sqlx.SqlConn) *defaultHardwareResourceVerificationModel {
	return &defaultHardwareResourceVerificationModel{
		conn:  conn,
		table: "`hardware_resource_verification`",
	}
}

func (m *defaultHardwareResourceVerificationModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultHardwareResourceVerificationModel) FindOne(ctx context.Context, id uint64) (*HardwareResourceVerification, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", hardwareResourceVerificationRows, m.table)
	var resp HardwareResourceVerification
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHardwareResourceVerificationModel) Insert(ctx context.Context, data *HardwareResourceVerification) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, hardwareResourceVerificationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.IsDeleted, data.TaskId, data.HostIp, data.ResourceType, data.TargetPercent, data.Duration, data.ScriptParams, data.ExecutionStatus, data.StartTime, data.EndTime, data.ExitCode, data.StdoutLog, data.StderrLog, data.ResultSummary, data.SshError)
	return ret, err
}

func (m *defaultHardwareResourceVerificationModel) Update(ctx context.Context, data *HardwareResourceVerification) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, hardwareResourceVerificationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.IsDeleted, data.TaskId, data.HostIp, data.ResourceType, data.TargetPercent, data.Duration, data.ScriptParams, data.ExecutionStatus, data.StartTime, data.EndTime, data.ExitCode, data.StdoutLog, data.StderrLog, data.ResultSummary, data.SshError, data.Id)
	return err
}

func (m *defaultHardwareResourceVerificationModel) tableName() string {
	return m.table
}
