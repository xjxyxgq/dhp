// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	hostsPoolFieldNames          = builder.RawFieldNames(&HostsPool{})
	hostsPoolRows                = strings.Join(hostsPoolFieldNames, ",")
	hostsPoolRowsExpectAutoSet   = strings.Join(stringx.Remove(hostsPoolFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	hostsPoolRowsWithPlaceHolder = strings.Join(stringx.Remove(hostsPoolFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	hostsPoolModel interface {
		Insert(ctx context.Context, data *HostsPool) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*HostsPool, error)
		FindOneByHostIp(ctx context.Context, hostIp string) (*HostsPool, error)
		Update(ctx context.Context, data *HostsPool) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultHostsPoolModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HostsPool struct {
		Id              uint64         `db:"id"`
		HostName        string         `db:"host_name"`         // 主机名
		HostIp          string         `db:"host_ip"`           // 主机IP
		HostType        sql.NullString `db:"host_type"`         // 主机类型
		H3cId           sql.NullString `db:"h3c_id"`            // H3C ID
		H3cStatus       sql.NullString `db:"h3c_status"`        // H3C状态
		DiskSize        sql.NullInt64  `db:"disk_size"`         // 磁盘大小(GB)
		Ram             sql.NullInt64  `db:"ram"`               // 内存大小(GB)
		Vcpus           sql.NullInt64  `db:"vcpus"`             // CPU核数
		IfH3cSync       sql.NullString `db:"if_h3c_sync"`       // 是否H3C同步
		H3cImgId        sql.NullString `db:"h3c_img_id"`        // H3C镜像ID
		H3cHmName       sql.NullString `db:"h3c_hm_name"`       // H3C主机名
		LeafNumber      sql.NullString `db:"leaf_number"`       // 叶子节点编号
		RackNumber      sql.NullString `db:"rack_number"`       // 机架号
		RackHeight      sql.NullInt64  `db:"rack_height"`       // 机架高度
		RackStartNumber sql.NullInt64  `db:"rack_start_number"` // 机架起始位置
		FromFactor      sql.NullInt64  `db:"from_factor"`       // 规格因子
		SerialNumber    sql.NullString `db:"serial_number"`     // 序列号
		IsDeleted       int64          `db:"is_deleted"`        // 是否删除
		IsStatic        int64          `db:"is_static"`         // 是否静态
		CreateTime      time.Time      `db:"create_time"`       // 创建时间
		UpdateTime      time.Time      `db:"update_time"`       // 更新时间
		DeleteTime      sql.NullTime   `db:"delete_time"`
		IdcId           sql.NullInt64  `db:"idc_id"` // IDC机房ID
		Remark          sql.NullString `db:"remark"` // 机器备注说明
	}
)

func newHostsPoolModel(conn sqlx.SqlConn) *defaultHostsPoolModel {
	return &defaultHostsPoolModel{
		conn:  conn,
		table: "`hosts_pool`",
	}
}

func (m *defaultHostsPoolModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultHostsPoolModel) FindOne(ctx context.Context, id uint64) (*HostsPool, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", hostsPoolRows, m.table)
	var resp HostsPool
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHostsPoolModel) FindOneByHostIp(ctx context.Context, hostIp string) (*HostsPool, error) {
	var resp HostsPool
	query := fmt.Sprintf("select %s from %s where `host_ip` = ? limit 1", hostsPoolRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, hostIp)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHostsPoolModel) Insert(ctx context.Context, data *HostsPool) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, hostsPoolRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.HostName, data.HostIp, data.HostType, data.H3cId, data.H3cStatus, data.DiskSize, data.Ram, data.Vcpus, data.IfH3cSync, data.H3cImgId, data.H3cHmName, data.LeafNumber, data.RackNumber, data.RackHeight, data.RackStartNumber, data.FromFactor, data.SerialNumber, data.IsDeleted, data.IsStatic, data.DeleteTime, data.IdcId, data.Remark)
	return ret, err
}

func (m *defaultHostsPoolModel) Update(ctx context.Context, newData *HostsPool) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, hostsPoolRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.HostName, newData.HostIp, newData.HostType, newData.H3cId, newData.H3cStatus, newData.DiskSize, newData.Ram, newData.Vcpus, newData.IfH3cSync, newData.H3cImgId, newData.H3cHmName, newData.LeafNumber, newData.RackNumber, newData.RackHeight, newData.RackStartNumber, newData.FromFactor, newData.SerialNumber, newData.IsDeleted, newData.IsStatic, newData.DeleteTime, newData.IdcId, newData.Remark, newData.Id)
	return err
}

func (m *defaultHostsPoolModel) tableName() string {
	return m.table
}
