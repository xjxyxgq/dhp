// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dbLineFieldNames          = builder.RawFieldNames(&DbLine{})
	dbLineRows                = strings.Join(dbLineFieldNames, ",")
	dbLineRowsExpectAutoSet   = strings.Join(stringx.Remove(dbLineFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dbLineRowsWithPlaceHolder = strings.Join(stringx.Remove(dbLineFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	dbLineModel interface {
		Insert(ctx context.Context, data *DbLine) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*DbLine, error)
		FindOneByClusterGroupNameDepartmentLineName(ctx context.Context, clusterGroupName string, departmentLineName string) (*DbLine, error)
		Update(ctx context.Context, data *DbLine) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultDbLineModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DbLine struct {
		Id                 uint64         `db:"id"`
		ClusterGroupName   string         `db:"cluster_group_name"`   // 集群组名称
		DepartmentLineName string         `db:"department_line_name"` // 部门业务线名称
		BusinessDomain     sql.NullString `db:"business_domain"`      // 业务域
		ContactPerson      sql.NullString `db:"contact_person"`       // 联系人
		ContactEmail       sql.NullString `db:"contact_email"`        // 联系邮箱
		Description        sql.NullString `db:"description"`          // 描述
		CreatedAt          time.Time      `db:"created_at"`
		UpdatedAt          time.Time      `db:"updated_at"`
		DeletedAt          sql.NullTime   `db:"deleted_at"`
	}
)

func newDbLineModel(conn sqlx.SqlConn) *defaultDbLineModel {
	return &defaultDbLineModel{
		conn:  conn,
		table: "`db_line`",
	}
}

func (m *defaultDbLineModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDbLineModel) FindOne(ctx context.Context, id uint64) (*DbLine, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dbLineRows, m.table)
	var resp DbLine
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDbLineModel) FindOneByClusterGroupNameDepartmentLineName(ctx context.Context, clusterGroupName string, departmentLineName string) (*DbLine, error) {
	var resp DbLine
	query := fmt.Sprintf("select %s from %s where `cluster_group_name` = ? and `department_line_name` = ? limit 1", dbLineRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, clusterGroupName, departmentLineName)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDbLineModel) Insert(ctx context.Context, data *DbLine) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, dbLineRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ClusterGroupName, data.DepartmentLineName, data.BusinessDomain, data.ContactPerson, data.ContactEmail, data.Description, data.DeletedAt)
	return ret, err
}

func (m *defaultDbLineModel) Update(ctx context.Context, newData *DbLine) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dbLineRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ClusterGroupName, newData.DepartmentLineName, newData.BusinessDomain, newData.ContactPerson, newData.ContactEmail, newData.Description, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultDbLineModel) tableName() string {
	return m.table
}
