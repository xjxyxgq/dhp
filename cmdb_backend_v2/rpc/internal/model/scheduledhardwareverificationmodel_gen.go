// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	scheduledHardwareVerificationFieldNames          = builder.RawFieldNames(&ScheduledHardwareVerification{})
	scheduledHardwareVerificationRows                = strings.Join(scheduledHardwareVerificationFieldNames, ",")
	scheduledHardwareVerificationRowsExpectAutoSet   = strings.Join(stringx.Remove(scheduledHardwareVerificationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	scheduledHardwareVerificationRowsWithPlaceHolder = strings.Join(stringx.Remove(scheduledHardwareVerificationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	scheduledHardwareVerificationModel interface {
		Insert(ctx context.Context, data *ScheduledHardwareVerification) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ScheduledHardwareVerification, error)
		FindOneByTaskName(ctx context.Context, taskName string) (*ScheduledHardwareVerification, error)
		Update(ctx context.Context, data *ScheduledHardwareVerification) error
		Delete(ctx context.Context, id int64) error
	}

	defaultScheduledHardwareVerificationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ScheduledHardwareVerification struct {
		Id                int64          `db:"id"`
		TaskName          string         `db:"task_name"`       // 任务名称
		Description       sql.NullString `db:"description"`     // 任务描述
		CronExpression    string         `db:"cron_expression"` // Cron表达式
		HostIpList        string         `db:"host_ip_list"`    // 主机IP列表（JSON格式）
		ResourceType      string         `db:"resource_type"`   // 资源类型
		TargetPercent     int64          `db:"target_percent"`  // 目标百分比
		Duration          int64          `db:"duration"`        // 执行持续时间（秒）
		ScriptParams      sql.NullString `db:"script_params"`   // 脚本参数（JSON格式）
		ForceExecution    int64          `db:"force_execution"` // 是否强制执行
		IsEnabled         int64          `db:"is_enabled"`      // 是否启用
		CreatedBy         sql.NullString `db:"created_by"`      // 创建者
		CreateTime        time.Time      `db:"create_time"`
		UpdateTime        time.Time      `db:"update_time"`
		DeleteTime        sql.NullTime   `db:"delete_time"`
		IsDeleted         int64          `db:"is_deleted"`
		LastExecutionTime sql.NullTime   `db:"last_execution_time"` // 上次执行时间
		NextExecutionTime sql.NullTime   `db:"next_execution_time"` // 下次执行时间
	}
)

func newScheduledHardwareVerificationModel(conn sqlx.SqlConn) *defaultScheduledHardwareVerificationModel {
	return &defaultScheduledHardwareVerificationModel{
		conn:  conn,
		table: "`scheduled_hardware_verification`",
	}
}

func (m *defaultScheduledHardwareVerificationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultScheduledHardwareVerificationModel) FindOne(ctx context.Context, id int64) (*ScheduledHardwareVerification, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", scheduledHardwareVerificationRows, m.table)
	var resp ScheduledHardwareVerification
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultScheduledHardwareVerificationModel) FindOneByTaskName(ctx context.Context, taskName string) (*ScheduledHardwareVerification, error) {
	var resp ScheduledHardwareVerification
	query := fmt.Sprintf("select %s from %s where `task_name` = ? limit 1", scheduledHardwareVerificationRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, taskName)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultScheduledHardwareVerificationModel) Insert(ctx context.Context, data *ScheduledHardwareVerification) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, scheduledHardwareVerificationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TaskName, data.Description, data.CronExpression, data.HostIpList, data.ResourceType, data.TargetPercent, data.Duration, data.ScriptParams, data.ForceExecution, data.IsEnabled, data.CreatedBy, data.DeleteTime, data.IsDeleted, data.LastExecutionTime, data.NextExecutionTime)
	return ret, err
}

func (m *defaultScheduledHardwareVerificationModel) Update(ctx context.Context, newData *ScheduledHardwareVerification) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, scheduledHardwareVerificationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.TaskName, newData.Description, newData.CronExpression, newData.HostIpList, newData.ResourceType, newData.TargetPercent, newData.Duration, newData.ScriptParams, newData.ForceExecution, newData.IsEnabled, newData.CreatedBy, newData.DeleteTime, newData.IsDeleted, newData.LastExecutionTime, newData.NextExecutionTime, newData.Id)
	return err
}

func (m *defaultScheduledHardwareVerificationModel) tableName() string {
	return m.table
}
