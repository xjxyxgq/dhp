// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pluginExecutionRecordsFieldNames          = builder.RawFieldNames(&PluginExecutionRecords{})
	pluginExecutionRecordsRows                = strings.Join(pluginExecutionRecordsFieldNames, ",")
	pluginExecutionRecordsRowsExpectAutoSet   = strings.Join(stringx.Remove(pluginExecutionRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pluginExecutionRecordsRowsWithPlaceHolder = strings.Join(stringx.Remove(pluginExecutionRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	pluginExecutionRecordsModel interface {
		Insert(ctx context.Context, data *PluginExecutionRecords) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*PluginExecutionRecords, error)
		Update(ctx context.Context, data *PluginExecutionRecords) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultPluginExecutionRecordsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PluginExecutionRecords struct {
		Id           uint64         `db:"id"`
		CreatedAt    time.Time      `db:"created_at"`
		UpdatedAt    time.Time      `db:"updated_at"`
		DeletedAt    sql.NullTime   `db:"deleted_at"`
		CheckSeq     string         `db:"check_seq"`     // 检查轮次
		PluginName   string         `db:"plugin_name"`   // 插件名称
		ExecutionLog sql.NullString `db:"execution_log"` // 执行日志
		Result       sql.NullString `db:"result"`        // 执行结果
	}
)

func newPluginExecutionRecordsModel(conn sqlx.SqlConn) *defaultPluginExecutionRecordsModel {
	return &defaultPluginExecutionRecordsModel{
		conn:  conn,
		table: "`plugin_execution_records`",
	}
}

func (m *defaultPluginExecutionRecordsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPluginExecutionRecordsModel) FindOne(ctx context.Context, id uint64) (*PluginExecutionRecords, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pluginExecutionRecordsRows, m.table)
	var resp PluginExecutionRecords
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPluginExecutionRecordsModel) Insert(ctx context.Context, data *PluginExecutionRecords) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, pluginExecutionRecordsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.CheckSeq, data.PluginName, data.ExecutionLog, data.Result)
	return ret, err
}

func (m *defaultPluginExecutionRecordsModel) Update(ctx context.Context, data *PluginExecutionRecords) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pluginExecutionRecordsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.CheckSeq, data.PluginName, data.ExecutionLog, data.Result, data.Id)
	return err
}

func (m *defaultPluginExecutionRecordsModel) tableName() string {
	return m.table
}
