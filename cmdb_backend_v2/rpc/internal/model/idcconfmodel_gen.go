// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	idcConfFieldNames          = builder.RawFieldNames(&IdcConf{})
	idcConfRows                = strings.Join(idcConfFieldNames, ",")
	idcConfRowsExpectAutoSet   = strings.Join(stringx.Remove(idcConfFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	idcConfRowsWithPlaceHolder = strings.Join(stringx.Remove(idcConfFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	idcConfModel interface {
		Insert(ctx context.Context, data *IdcConf) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*IdcConf, error)
		FindOneByIdcCode(ctx context.Context, idcCode string) (*IdcConf, error)
		Update(ctx context.Context, data *IdcConf) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultIdcConfModel struct {
		conn  sqlx.SqlConn
		table string
	}

	IdcConf struct {
		Id             uint64         `db:"id"`
		IdcName        string         `db:"idc_name"`        // IDC机房显示名称
		IdcCode        string         `db:"idc_code"`        // IDC机房代码
		IdcIpRegexp    string         `db:"idc_ip_regexp"`   // IP正则表达式匹配规则
		IdcLocation    sql.NullString `db:"idc_location"`    // IDC机房地理位置
		IdcDescription sql.NullString `db:"idc_description"` // IDC机房描述
		IsActive       int64          `db:"is_active"`       // 是否启用
		Priority       uint64         `db:"priority"`        // 匹配优先级(数值越小优先级越高)
		CreatedAt      time.Time      `db:"created_at"`      // 创建时间
		UpdatedAt      time.Time      `db:"updated_at"`      // 更新时间
		DeletedAt      sql.NullTime   `db:"deleted_at"`      // 删除时间
	}
)

func newIdcConfModel(conn sqlx.SqlConn) *defaultIdcConfModel {
	return &defaultIdcConfModel{
		conn:  conn,
		table: "`idc_conf`",
	}
}

func (m *defaultIdcConfModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultIdcConfModel) FindOne(ctx context.Context, id uint64) (*IdcConf, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", idcConfRows, m.table)
	var resp IdcConf
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultIdcConfModel) FindOneByIdcCode(ctx context.Context, idcCode string) (*IdcConf, error) {
	var resp IdcConf
	query := fmt.Sprintf("select %s from %s where `idc_code` = ? limit 1", idcConfRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, idcCode)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultIdcConfModel) Insert(ctx context.Context, data *IdcConf) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, idcConfRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.IdcName, data.IdcCode, data.IdcIpRegexp, data.IdcLocation, data.IdcDescription, data.IsActive, data.Priority, data.DeletedAt)
	return ret, err
}

func (m *defaultIdcConfModel) Update(ctx context.Context, newData *IdcConf) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, idcConfRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.IdcName, newData.IdcCode, newData.IdcIpRegexp, newData.IdcLocation, newData.IdcDescription, newData.IsActive, newData.Priority, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultIdcConfModel) tableName() string {
	return m.table
}
