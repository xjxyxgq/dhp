// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goldendbClusterFieldNames          = builder.RawFieldNames(&GoldendbCluster{})
	goldendbClusterRows                = strings.Join(goldendbClusterFieldNames, ",")
	goldendbClusterRowsExpectAutoSet   = strings.Join(stringx.Remove(goldendbClusterFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	goldendbClusterRowsWithPlaceHolder = strings.Join(stringx.Remove(goldendbClusterFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	goldendbClusterModel interface {
		Insert(ctx context.Context, data *GoldendbCluster) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*GoldendbCluster, error)
		FindOneByClusterName(ctx context.Context, clusterName string) (*GoldendbCluster, error)
		Update(ctx context.Context, data *GoldendbCluster) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultGoldendbClusterModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GoldendbCluster struct {
		Id               uint64         `db:"id"`
		ClusterName      string         `db:"cluster_name"`       // 集群名称
		ClusterGroupName string         `db:"cluster_group_name"` // 集群组名称
		ClusterType      string         `db:"cluster_type"`       // 集群类型
		ClusterStatus    string         `db:"cluster_status"`     // 集群状态
		Description      sql.NullString `db:"description"`        // 集群描述
		CreatedAt        time.Time      `db:"created_at"`
		UpdatedAt        time.Time      `db:"updated_at"`
		DeletedAt        sql.NullTime   `db:"deleted_at"`
	}
)

func newGoldendbClusterModel(conn sqlx.SqlConn) *defaultGoldendbClusterModel {
	return &defaultGoldendbClusterModel{
		conn:  conn,
		table: "`goldendb_cluster`",
	}
}

func (m *defaultGoldendbClusterModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGoldendbClusterModel) FindOne(ctx context.Context, id uint64) (*GoldendbCluster, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goldendbClusterRows, m.table)
	var resp GoldendbCluster
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoldendbClusterModel) FindOneByClusterName(ctx context.Context, clusterName string) (*GoldendbCluster, error) {
	var resp GoldendbCluster
	query := fmt.Sprintf("select %s from %s where `cluster_name` = ? limit 1", goldendbClusterRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, clusterName)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoldendbClusterModel) Insert(ctx context.Context, data *GoldendbCluster) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, goldendbClusterRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ClusterName, data.ClusterGroupName, data.ClusterType, data.ClusterStatus, data.Description, data.DeletedAt)
	return ret, err
}

func (m *defaultGoldendbClusterModel) Update(ctx context.Context, newData *GoldendbCluster) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, goldendbClusterRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ClusterName, newData.ClusterGroupName, newData.ClusterType, newData.ClusterStatus, newData.Description, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultGoldendbClusterModel) tableName() string {
	return m.table
}
