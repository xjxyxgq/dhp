// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	resourceUsageDataFieldNames          = builder.RawFieldNames(&ResourceUsageData{})
	resourceUsageDataRows                = strings.Join(resourceUsageDataFieldNames, ",")
	resourceUsageDataRowsExpectAutoSet   = strings.Join(stringx.Remove(resourceUsageDataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	resourceUsageDataRowsWithPlaceHolder = strings.Join(stringx.Remove(resourceUsageDataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	resourceUsageDataModel interface {
		Insert(ctx context.Context, data *ResourceUsageData) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ResourceUsageData, error)
		Update(ctx context.Context, data *ResourceUsageData) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultResourceUsageDataModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ResourceUsageData struct {
		Id                uint64          `db:"id"`
		CreatedAt         time.Time       `db:"created_at"`
		UpdatedAt         time.Time       `db:"updated_at"`
		DeletedAt         sql.NullTime    `db:"deleted_at"`
		GroupName         string          `db:"group_name"`          // 组名称
		ClusterName       string          `db:"cluster_name"`        // 集群名称
		DepartmentName    string          `db:"department_name"`     // 部门名称
		CpuPeakUsage      sql.NullFloat64 `db:"cpu_peak_usage"`      // CPU峰值使用率
		MemoryPeakUsage   sql.NullFloat64 `db:"memory_peak_usage"`   // 内存峰值使用率
		DiskPeakUsage     sql.NullFloat64 `db:"disk_peak_usage"`     // 磁盘峰值使用率
		CpuThreshold      sql.NullFloat64 `db:"cpu_threshold"`       // CPU阈值
		MemoryThreshold   sql.NullFloat64 `db:"memory_threshold"`    // 内存阈值
		DiskThreshold     sql.NullFloat64 `db:"disk_threshold"`      // 磁盘阈值
		AnalysisRequestId sql.NullString  `db:"analysis_request_id"` // 分析请求ID
	}
)

func newResourceUsageDataModel(conn sqlx.SqlConn) *defaultResourceUsageDataModel {
	return &defaultResourceUsageDataModel{
		conn:  conn,
		table: "`resource_usage_data`",
	}
}

func (m *defaultResourceUsageDataModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultResourceUsageDataModel) FindOne(ctx context.Context, id uint64) (*ResourceUsageData, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", resourceUsageDataRows, m.table)
	var resp ResourceUsageData
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultResourceUsageDataModel) Insert(ctx context.Context, data *ResourceUsageData) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, resourceUsageDataRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.GroupName, data.ClusterName, data.DepartmentName, data.CpuPeakUsage, data.MemoryPeakUsage, data.DiskPeakUsage, data.CpuThreshold, data.MemoryThreshold, data.DiskThreshold, data.AnalysisRequestId)
	return ret, err
}

func (m *defaultResourceUsageDataModel) Update(ctx context.Context, data *ResourceUsageData) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, resourceUsageDataRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.GroupName, data.ClusterName, data.DepartmentName, data.CpuPeakUsage, data.MemoryPeakUsage, data.DiskPeakUsage, data.CpuThreshold, data.MemoryThreshold, data.DiskThreshold, data.AnalysisRequestId, data.Id)
	return err
}

func (m *defaultResourceUsageDataModel) tableName() string {
	return m.table
}
