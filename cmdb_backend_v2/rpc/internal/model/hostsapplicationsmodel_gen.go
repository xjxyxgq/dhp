// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	hostsApplicationsFieldNames          = builder.RawFieldNames(&HostsApplications{})
	hostsApplicationsRows                = strings.Join(hostsApplicationsFieldNames, ",")
	hostsApplicationsRowsExpectAutoSet   = strings.Join(stringx.Remove(hostsApplicationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	hostsApplicationsRowsWithPlaceHolder = strings.Join(stringx.Remove(hostsApplicationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	hostsApplicationsModel interface {
		Insert(ctx context.Context, data *HostsApplications) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*HostsApplications, error)
		Update(ctx context.Context, data *HostsApplications) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultHostsApplicationsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HostsApplications struct {
		Id             uint64         `db:"id"`
		CreatedAt      time.Time      `db:"created_at"`
		UpdatedAt      time.Time      `db:"updated_at"`
		DeletedAt      sql.NullTime   `db:"deleted_at"`
		PoolId         uint64         `db:"pool_id"`         // 主机池ID
		ServerType     sql.NullString `db:"server_type"`     // 服务类型(mysql/mssql/other)
		ServerVersion  sql.NullString `db:"server_version"`  // 服务版本
		ServerSubtitle sql.NullString `db:"server_subtitle"` // 服务子标题
		ClusterName    sql.NullString `db:"cluster_name"`    // 集群名称
		ServerProtocol sql.NullString `db:"server_protocol"` // 服务协议
		ServerAddr     sql.NullString `db:"server_addr"`     // 服务地址
		ServerPort     int64          `db:"server_port"`     // 服务端口
		ServerRole     sql.NullString `db:"server_role"`     // 服务角色
		ServerStatus   sql.NullString `db:"server_status"`   // 服务状态
		DepartmentName sql.NullString `db:"department_name"` // 部门名称
		CreateTime     time.Time      `db:"create_time"`     // 创建时间
		UpdateTime     time.Time      `db:"update_time"`     // 更新时间
	}
)

func newHostsApplicationsModel(conn sqlx.SqlConn) *defaultHostsApplicationsModel {
	return &defaultHostsApplicationsModel{
		conn:  conn,
		table: "`hosts_applications`",
	}
}

func (m *defaultHostsApplicationsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultHostsApplicationsModel) FindOne(ctx context.Context, id uint64) (*HostsApplications, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", hostsApplicationsRows, m.table)
	var resp HostsApplications
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHostsApplicationsModel) Insert(ctx context.Context, data *HostsApplications) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, hostsApplicationsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.PoolId, data.ServerType, data.ServerVersion, data.ServerSubtitle, data.ClusterName, data.ServerProtocol, data.ServerAddr, data.ServerPort, data.ServerRole, data.ServerStatus, data.DepartmentName)
	return ret, err
}

func (m *defaultHostsApplicationsModel) Update(ctx context.Context, data *HostsApplications) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, hostsApplicationsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.PoolId, data.ServerType, data.ServerVersion, data.ServerSubtitle, data.ClusterName, data.ServerProtocol, data.ServerAddr, data.ServerPort, data.ServerRole, data.ServerStatus, data.DepartmentName, data.Id)
	return err
}

func (m *defaultHostsApplicationsModel) tableName() string {
	return m.table
}
