// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	resourceAnalysisReportsFieldNames          = builder.RawFieldNames(&ResourceAnalysisReports{})
	resourceAnalysisReportsRows                = strings.Join(resourceAnalysisReportsFieldNames, ",")
	resourceAnalysisReportsRowsExpectAutoSet   = strings.Join(stringx.Remove(resourceAnalysisReportsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	resourceAnalysisReportsRowsWithPlaceHolder = strings.Join(stringx.Remove(resourceAnalysisReportsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	resourceAnalysisReportsModel interface {
		Insert(ctx context.Context, data *ResourceAnalysisReports) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ResourceAnalysisReports, error)
		Update(ctx context.Context, data *ResourceAnalysisReports) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultResourceAnalysisReportsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ResourceAnalysisReports struct {
		Id                uint64       `db:"id"`
		CreatedAt         time.Time    `db:"created_at"`
		UpdatedAt         time.Time    `db:"updated_at"`
		DeletedAt         sql.NullTime `db:"deleted_at"`
		ResourceUsageId   uint64       `db:"resource_usage_id"`   // 资源使用数据ID
		AnalysisRequestId string       `db:"analysis_request_id"` // 分析请求ID
		AnalysisReport    string       `db:"analysis_report"`     // 分析报告内容
	}
)

func newResourceAnalysisReportsModel(conn sqlx.SqlConn) *defaultResourceAnalysisReportsModel {
	return &defaultResourceAnalysisReportsModel{
		conn:  conn,
		table: "`resource_analysis_reports`",
	}
}

func (m *defaultResourceAnalysisReportsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultResourceAnalysisReportsModel) FindOne(ctx context.Context, id uint64) (*ResourceAnalysisReports, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", resourceAnalysisReportsRows, m.table)
	var resp ResourceAnalysisReports
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultResourceAnalysisReportsModel) Insert(ctx context.Context, data *ResourceAnalysisReports) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, resourceAnalysisReportsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.ResourceUsageId, data.AnalysisRequestId, data.AnalysisReport)
	return ret, err
}

func (m *defaultResourceAnalysisReportsModel) Update(ctx context.Context, data *ResourceAnalysisReports) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, resourceAnalysisReportsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.ResourceUsageId, data.AnalysisRequestId, data.AnalysisReport, data.Id)
	return err
}

func (m *defaultResourceAnalysisReportsModel) tableName() string {
	return m.table
}
