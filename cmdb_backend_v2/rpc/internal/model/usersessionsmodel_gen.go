// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userSessionsFieldNames          = builder.RawFieldNames(&UserSessions{})
	userSessionsRows                = strings.Join(userSessionsFieldNames, ",")
	userSessionsRowsExpectAutoSet   = strings.Join(stringx.Remove(userSessionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userSessionsRowsWithPlaceHolder = strings.Join(stringx.Remove(userSessionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userSessionsModel interface {
		Insert(ctx context.Context, data *UserSessions) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserSessions, error)
		FindOneBySessionToken(ctx context.Context, sessionToken string) (*UserSessions, error)
		Update(ctx context.Context, data *UserSessions) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserSessionsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserSessions struct {
		Id           uint64         `db:"id"`
		CreateTime   time.Time      `db:"create_time"`
		UpdateTime   time.Time      `db:"update_time"`
		DeleteTime   sql.NullTime   `db:"delete_time"`
		IsDeleted    int64          `db:"is_deleted"`
		UserId       uint64         `db:"user_id"`       // 用户ID
		SessionToken string         `db:"session_token"` // 会话令牌
		CasTicket    sql.NullString `db:"cas_ticket"`    // CAS票据
		ExpiresAt    time.Time      `db:"expires_at"`    // 过期时间
		IpAddress    sql.NullString `db:"ip_address"`    // IP地址
		UserAgent    sql.NullString `db:"user_agent"`    // 用户代理
		IsActive     int64          `db:"is_active"`     // 是否有效
	}
)

func newUserSessionsModel(conn sqlx.SqlConn) *defaultUserSessionsModel {
	return &defaultUserSessionsModel{
		conn:  conn,
		table: "`user_sessions`",
	}
}

func (m *defaultUserSessionsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserSessionsModel) FindOne(ctx context.Context, id uint64) (*UserSessions, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userSessionsRows, m.table)
	var resp UserSessions
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserSessionsModel) FindOneBySessionToken(ctx context.Context, sessionToken string) (*UserSessions, error) {
	var resp UserSessions
	query := fmt.Sprintf("select %s from %s where `session_token` = ? limit 1", userSessionsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, sessionToken)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserSessionsModel) Insert(ctx context.Context, data *UserSessions) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userSessionsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.IsDeleted, data.UserId, data.SessionToken, data.CasTicket, data.ExpiresAt, data.IpAddress, data.UserAgent, data.IsActive)
	return ret, err
}

func (m *defaultUserSessionsModel) Update(ctx context.Context, newData *UserSessions) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userSessionsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.IsDeleted, newData.UserId, newData.SessionToken, newData.CasTicket, newData.ExpiresAt, newData.IpAddress, newData.UserAgent, newData.IsActive, newData.Id)
	return err
}

func (m *defaultUserSessionsModel) tableName() string {
	return m.table
}
