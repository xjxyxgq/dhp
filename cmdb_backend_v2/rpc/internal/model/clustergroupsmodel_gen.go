// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	clusterGroupsFieldNames          = builder.RawFieldNames(&ClusterGroups{})
	clusterGroupsRows                = strings.Join(clusterGroupsFieldNames, ",")
	clusterGroupsRowsExpectAutoSet   = strings.Join(stringx.Remove(clusterGroupsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	clusterGroupsRowsWithPlaceHolder = strings.Join(stringx.Remove(clusterGroupsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	clusterGroupsModel interface {
		Insert(ctx context.Context, data *ClusterGroups) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ClusterGroups, error)
		FindOneByGroupNameClusterType(ctx context.Context, groupName string, clusterType string) (*ClusterGroups, error)
		Update(ctx context.Context, data *ClusterGroups) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultClusterGroupsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ClusterGroups struct {
		Id                 uint64       `db:"id"`
		CreatedAt          time.Time    `db:"created_at"`
		UpdatedAt          time.Time    `db:"updated_at"`
		DeletedAt          sql.NullTime `db:"deleted_at"`
		GroupName          string       `db:"group_name"`           // 组名称
		ClusterType        string       `db:"cluster_type"`         // 集群类型
		ClusterName        string       `db:"cluster_name"`         // 集群名称
		DepartmentLineName string       `db:"department_line_name"` // 部门业务线名称
	}
)

func newClusterGroupsModel(conn sqlx.SqlConn) *defaultClusterGroupsModel {
	return &defaultClusterGroupsModel{
		conn:  conn,
		table: "`cluster_groups`",
	}
}

func (m *defaultClusterGroupsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultClusterGroupsModel) FindOne(ctx context.Context, id uint64) (*ClusterGroups, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", clusterGroupsRows, m.table)
	var resp ClusterGroups
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClusterGroupsModel) FindOneByGroupNameClusterType(ctx context.Context, groupName string, clusterType string) (*ClusterGroups, error) {
	var resp ClusterGroups
	query := fmt.Sprintf("select %s from %s where `group_name` = ? and `cluster_type` = ? limit 1", clusterGroupsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, groupName, clusterType)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClusterGroupsModel) Insert(ctx context.Context, data *ClusterGroups) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, clusterGroupsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.GroupName, data.ClusterType, data.ClusterName, data.DepartmentLineName)
	return ret, err
}

func (m *defaultClusterGroupsModel) Update(ctx context.Context, newData *ClusterGroups) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, clusterGroupsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeletedAt, newData.GroupName, newData.ClusterType, newData.ClusterName, newData.DepartmentLineName, newData.Id)
	return err
}

func (m *defaultClusterGroupsModel) tableName() string {
	return m.table
}
