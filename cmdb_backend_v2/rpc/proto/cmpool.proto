syntax = "proto3";

package cmpool;

option go_package = "./cmpool";

message ExtractByHostsReq {
  repeated string Hosts = 1;
}

message ExtractAllReq {
  int32 BatchSize = 1;
}

message InjectAllReq {
  int32 BatchSize = 1;
}

message InjectAllResp {
  bool Success = 1;
  string Message = 2;
}

message ExtractByHostsResp {
  bool Success = 1;
  //repeated HostResult result = 2;
  string Message = 2;
}

message ExtractByHostsSteamResp {
  bool Success = 1;
  //repeated HostResult result = 2;
  string Message = 2;
  int32 Progress = 3;
}

message ExtractAllResp {
  bool Success = 1;
  string Message = 2;
}

message HostResult {
  string DomainNum = 1;
  string HostName = 2;
  string HostIp = 3;
  string HostType = 4;
  string HostOwner = 5;
  string H3cId = 6;
  string H3cStatus = 7;
  HostExtInfo HostExtInfo = 8;
  string IfH3cSync = 9;
  string H3cImageId = 10;
  string H3cHmName = 11;
  string IsDelete = 12;
  repeated AppInfo DeployAppInfoList = 13;
  HostLoc HostLocInfo = 14;
  string BusinessNum = 15;
}

message HostExtInfo {
  int32 Disk = 1;
  int32 Ram = 2;
  int32 Vcpus = 3;
}

message AppInfo {
  string AppName = 1;
  string DataSource = 2;
}

message HostLoc {
  string LeafNumber = 1;
  string RackNumber = 2;
  int32 RackHeight = 3;
  int32 RackStartNumber = 4;
  int32 FromFactor = 5;
  string SerialNumber = 6;
}

//message InjectHostsReq {
//  string AppName = 1;  // 应用编码
//  string UpdateBy = 2; // 业务组编号，DBA 组为 23
//  repeated string HostIpList = 3;
//}
message InjectHostsReq {
  repeated string Hosts = 1;
}

message InjectHostsResp {
  bool Success = 1;
  string Message = 2;
}

message CmdbOpTasksReq {
  int32 Limit = 1;  // 按时间倒序输出多少个任务，默认3
}

message CmdbOpTasksResp {
  bool Success = 1;
  string Message = 2;
  repeated CmdbOpTask Tasks = 3;
}

message CmdbOpTask {
  int64 TaskId = 1;
  string Type = 2; // extract/inject
  bool Status = 3;
  string Message = 4;
}

message SyncHostsReq {
  int32 DBType = 1; // 0: all, 1: mysql, 2: goldendb, 3: tidb 指定同步哪种数据库类型的主机
}

message SyncHostsResp {
    bool Success = 1;
    string Message = 2;
}

message AddHostsResp {
  bool Success = 1;
  string Message = 2;
}

message Host {
  int64 Id = 1;
  string Hostname = 2;
  string HostIp = 3;
  string HostType = 4;
  string HostOwner = 5;
  string H3cId = 6;
  string H3cStatus = 7;
  int32 Disk = 8;
  int32 Ram = 9;
  int32 VCpu = 10;
  string IfH3cSync = 11;
  string H3cImgId = 12;
  string H3cHmName = 13;
  string IsDelete = 14;  // 这是cmdb系统中记录的状态，不是主机资源池中标识是否已删除的标记
  string LeafNumber = 15;
  string RackNumber = 16;
  int32 RackHeight = 17;
  int32 RackStartNumber = 18;
  int32 FromFactor = 19;
  string SerialNumber = 20;
  bool IsDeleted = 21; // 这是主机资源池中标志是否已删除的状态
  bool IsStatic = 22;
  string CreateTime = 23;
  string UpdateTime = 24;
  int64 IdcId = 25;   // IDC机房ID
  string IdcName = 26; // IDC机房名称
}

message ModifyHostsReq {
  repeated Host Hosts = 1;
}

message ModifyHostsResp {
  bool Success = 1;
  string Message = 2;
}

message SoftDelHostsReq {
  repeated string IpList = 1;
  bool DelStat = 2; // true 删除, false 解除删除
}

message SoftDelHostsResp {
  bool Success = 1;
  string Message = 2;
}

message HardDelHostsReq {
  repeated string IpList = 1;
}

message HardDelHostsResp {
  bool Success = 1;
  string Message = 2;
}

message GetHostsDetailReq {
  repeated string IpList = 1;
}

message GetHostsPoolDetailReq {
  repeated string IpList = 1;
}

message App {
  int64 Aid = 1;
  string ServerType = 2;
  string ServerVersion = 3;
  string ServerSubtitle = 4;
  string ClusterGroupName = 5;
  string ClusterName = 6;
  string ServiceProtocol = 7;
  string ServiceAddr = 8;
  string ServiceRole = 9;
  string DepartmentName = 10;
  string ProjectName = 11;
  string Developer = 12;
  string DBA = 13;
  string QA = 14;
}

message HostDetail {
  Host Host = 1;
  repeated App AppList = 2;
}

message HostPoolDetail {
  int64 Id = 1;
  string Hostname = 2;
  string HostIp = 3;
  string HostType = 4;
  string HostOwner = 5;
  string H3cId = 6;
  string H3cStatus = 7;
  int32 Disk = 8;
  int32 Ram = 9;
  int32 VCpu = 10;
  string IfH3cSync = 11;
  string H3cImgId = 12;
  string H3cHmName = 13;
  string IsDelete = 14;  // 这是cmdb系统中记录的状态，不是主机资源池中标识是否已删除的标记
  string LeafNumber = 15;
  string RackNumber = 16;
  int32 RackHeight = 17;
  int32 RackStartNumber = 18;
  int32 FromFactor = 19;
  string SerialNumber = 20;
  bool IsDeleted = 21; // 这是主机资源池中标志是否已删除的状态
  bool IsStatic = 22;
  string CreateTime = 23;
  string UpdateTime = 24;
  repeated App AppList = 25;
  IdcConf IdcInfo = 26; // IDC机房信息
  string Remark = 27; // 备注信息
}

message GetHostsDetailResp {
  bool Success = 1;
  string Message = 2;
  repeated HostDetail HostDetail = 3;
}

message GetHostsPoolDetailResp {
  bool Success = 1;
  string Message = 2;
  repeated HostPoolDetail HostsPoolDetail = 3;
}

message ExtractByOwnerReq {
  string owner_id = 1;
}

message ExtractByOwnerResp {
  bool success = 1;
  string message = 2;
  repeated string ip_list = 3;
}

message CollAppsReq {
  repeated string IpList = 1;  // IpList 为空则搜集所有机器
}

message CollAppsResp {
  bool Success = 1;
  string Message = 2;
}

message GetHostsPoolReq {
  repeated string IpList = 1;  // IpList 为空则搜集所有机器
  repeated string HostType = 2;
  repeated string AppName = 3;
  string AppVer = 4;
  string AppSub = 5;
  string AppDepart = 6;
  string AppPorjName = 7;
  string AppDev = 8;
  string AppDBA = 9;
}

message AddHostsAppReq {
  repeated HostsApp data = 1;
}

message AddHostsAppResp {
  bool Success = 1;
  string Message = 2;
}

message MdfHostsAppReq {
  repeated HostsApp data = 1;
}

message MdfHostsAppResp {
  bool Success = 1;
  string Message = 2;
}

message DelHostsAppReq {
  repeated int64 AppIds = 1;  // 应用ID列表
}

message DelHostsAppResp {
  bool Success = 1;
  string Message = 2;
}

message HostsApp {
  int32 HostId = 1;
  string ServerType = 2;
  string ServerVersion = 3;
  string ServerSubtitle = 4;
  string ClusterGroupName = 5;
  string ClusterName = 6;
  string ServerProtocol = 7;
  string ServerAddr = 8;
  int32 ServerPort = 9;
  string ServerRole = 10;
  string ServerStatus = 11;
  string DepartmentName = 12;
}

message ClusterGroupsReq {

}

message ClusterGroup {
  int64 Id = 1;
  string CreateAt = 2;
  string UpdateAt = 3;
  string GroupName = 4;
  string ClusterName = 5;
  string DepartmentName = 6;
}

message ClusterGroupsResp {
  bool Success = 1;
  string Message = 2;
  repeated ClusterGroup ClusterGroup = 3;
}

message ServerResourceReq {
  string BeginTime = 1;
  string EndTime = 2;
  repeated string IpList = 3;
  string Cluster = 4;
}

message ServerResource {
  int64 Id = 1;
  string CreateAt = 2;
  string UpdateAt = 3;
  int64 PoolId = 4;
  string Ip = 5;
  float TotalMemory = 6;
  float UsedMemory = 7;
  float TotalDisk = 8;
  float UsedDisk = 9;
  int32 CPUCores = 10;
  float CPULoad = 11;
  string Datetime = 12;
  int64 SequenceNumber = 13;  // 序列号，用于确保数据唯一性和排序一致性
  repeated HostClusterInfo Clusters = 14;  // 新增：主机所属的集群列表
  IdcConf IdcInfo = 15;  // IDC机房信息
  // 百分比字段
  double CpuPercentMax = 16;   // CPU使用率最大值(%)
  double CpuPercentAvg = 17;   // CPU使用率平均值(%)
  double CpuPercentMin = 18;   // CPU使用率最小值(%)
  double MemPercentMax = 19;   // 内存使用率最大值(%)
  double MemPercentAvg = 20;   // 内存使用率平均值(%)
  double MemPercentMin = 21;   // 内存使用率最小值(%)
  double DiskPercentMax = 22;  // 磁盘使用率最大值(%)
  double DiskPercentAvg = 23;  // 磁盘使用率平均值(%)
  double DiskPercentMin = 24;  // 磁盘使用率最小值(%)
}

message ServerResourceResp {
  bool Success = 1;
  string Message = 2;
  repeated ServerResource ServerResource = 3;
}

// 主机资源最大利用率请求
message ServerResourceMaxReq {
  string BeginTime = 1;
  string EndTime = 2;
  repeated string IpList = 3;
  string Cluster = 4;
}

// 主机所属集群信息
message HostClusterInfo {
  string ClusterName = 1;
  string ClusterGroupName = 2;
  string DepartmentName = 3;
}


// 主机资源最大利用率数据
message ServerResourceMax {
  int64 Id = 1;
  string CreateAt = 2;
  string UpdateAt = 3;
  int64 PoolId = 4;
  string Ip = 5;
  float TotalMemory = 6;
  float MaxUsedMemory = 7;      // 最大内存使用量
  float TotalDisk = 8;
  float MaxUsedDisk = 9;        // 最大磁盘使用量
  int32 CPUCores = 10;
  float MaxCPULoad = 11;         // 最大CPU负载
  string MaxDateTime = 12;       // 产生最大值的时间点（修正字段名）
  string HostName = 13;          // 主机名
  string HostType = 14;          // 主机类型
  repeated HostClusterInfo Clusters = 15;  // 新增：主机所属的集群列表
  IdcConf IdcInfo = 16;  // IDC机房信息
  // 百分比字段
  double CpuPercentMax = 17;   // CPU使用率最大值(%)
  double CpuPercentAvg = 18;   // CPU使用率平均值(%)
  double CpuPercentMin = 19;   // CPU使用率最小值(%)
  double MemPercentMax = 20;   // 内存使用率最大值(%)
  double MemPercentAvg = 21;   // 内存使用率平均值(%)
  double MemPercentMin = 22;   // 内存使用率最小值(%)
  double DiskPercentMax = 23;  // 磁盘使用率最大值(%)
  double DiskPercentAvg = 24;  // 磁盘使用率平均值(%)
  double DiskPercentMin = 25;  // 磁盘使用率最小值(%)
}

message ServerResourceMaxResp {
  bool Success = 1;
  string Message = 2;
  repeated ServerResourceMax ServerResourceMax = 3;
}


// 集群资源请求
message ClusterResourceReq {
  string BeginTime = 1;
  string EndTime = 2;
  string ClusterName = 3;
  string GroupName = 4;
}

// 集群成员节点资源信息
message ClusterMemberResource {
  int64 Id = 1;
  string ClusterName = 2;
  string ClusterGroupName = 3;
  string Ip = 4;
  string HostName = 5;
  int32 Port = 6;
  string InstanceRole = 7;
  float TotalMemory = 8;
  float UsedMemory = 9;
  float TotalDisk = 10;
  float UsedDisk = 11;
  int32 CPUCores = 12;
  float CPULoad = 13;
  string DateTime = 14;
  repeated string DepartmentName = 15;
  int64 SequenceNumber = 16;  // 序列号，用于确保数据唯一性和排序一致性
  // 百分比字段
  double CpuPercentMax = 17;   // CPU使用率最大值(%)
  double CpuPercentAvg = 18;   // CPU使用率平均值(%)
  double CpuPercentMin = 19;   // CPU使用率最小值(%)
  double MemPercentMax = 20;   // 内存使用率最大值(%)
  double MemPercentAvg = 21;   // 内存使用率平均值(%)
  double MemPercentMin = 22;   // 内存使用率最小值(%)
  double DiskPercentMax = 23;  // 磁盘使用率最大值(%)
  double DiskPercentAvg = 24;  // 磁盘使用率平均值(%)
  double DiskPercentMin = 25;  // 磁盘使用率最小值(%)
}

// 集群最大资源利用率信息
message ClusterResourceMax {
  string ClusterName = 1;
  string ClusterGroupName = 2;
  string DepartmentName = 3;
  int32 NodeCount = 4;
  int32 CPUCores = 5;
  // 平均值字段
  float AvgCPULoad = 6;
  float AvgMemoryUsage = 7;
  float AvgDiskUsage = 8;
  // 最大值字段
  float MaxCPULoad = 9;
  float MaxMemoryUsage = 10;
  float MaxDiskUsage = 11;
  float TotalMemory = 12;
  float TotalDisk = 13;
  float MaxUsedMemory = 14;
  float MaxUsedDisk = 15;
  string MaxDateTime = 16;
  //repeated ClusterMemberResource MemberNodes = 17;
  // 百分比字段
  double CpuPercentMax = 18;   // CPU使用率最大值(%)
  double CpuPercentAvg = 19;   // CPU使用率平均值(%)
  double CpuPercentMin = 20;   // CPU使用率最小值(%)
  double MemPercentMax = 21;   // 内存使用率最大值(%)
  double MemPercentAvg = 22;   // 内存使用率平均值(%)
  double MemPercentMin = 23;   // 内存使用率最小值(%)
  double DiskPercentMax = 24;  // 磁盘使用率最大值(%)
  double DiskPercentAvg = 25;  // 磁盘使用率平均值(%)
  double DiskPercentMin = 26;  // 磁盘使用率最小值(%)
}

// 响应消息
message ClusterResourceResp {
  bool Success = 1;
  string Message = 2;
  repeated ClusterMemberResource ClusterResources = 3;
}

message ClusterResourceMaxResp {
  bool Success = 1;
  string Message = 2;
  repeated ClusterResourceMax ClusterResourcesMax = 3;
}

// 磁盘预测请求
message DiskPredictionReq {
  string BeginTime = 1;
  string EndTime = 2;
  repeated string IpList = 3;
  string Cluster = 4;
  string DepartmentName = 5; // 部门筛选条件
}

// 磁盘预测数据
message DiskPrediction {
  int64 Id = 1;
  string Ip = 2;
  float CurrentDiskUsagePercent = 6;
  float TotalDisk = 7;
  float UsedDisk = 8;
  float DailyGrowthRate = 9;  // 每日增长率(GB)
  string PredictedFullDate = 10;  // 预测磁盘满时间
  int32 DaysUntilFull = 11;  // 距离磁盘满的天数
  bool IsHighRisk = 12;  // 是否高风险(30天内磁盘满)
  string CreateAt = 13;
  string UpdateAt = 14;
  repeated HostClusterInfo Clusters = 15;  // 主机所属的集群信息数组
  IdcConf IdcInfo = 16;  // IDC 机房信息
}

// 磁盘预测响应
message DiskPredictionResp {
  bool Success = 1;
  string Message = 2;
  repeated DiskPrediction DiskPrediction = 3;
}

// 备份恢复检查信息相关消息
message BackupRestoreCheckInfoReq {
  int32 Limit = 1; // 限制返回记录数，默认100
}

message BackupRestoreCheckInfo {
  int64 Id = 1;
  string CheckSeq = 2;
  string CheckDb = 3;
  string CheckStatus = 4;
  string CheckResult = 5;
  string CheckTime = 6;
}

message BackupRestoreCheckInfoResp {
  bool Success = 1;
  string Message = 2;
  repeated BackupRestoreCheckInfo BackupRestoreCheckInfo = 3;
}

// 集群确认摘要相关消息
message ClusterConfirmSummaryReq {
  int32 Days = 1; // 查询最近多少天的数据，默认7天
}

message ClusterConfirmSummary {
  string ReportFileURL = 1;
  string PluginResults = 2; // JSON字符串格式的插件执行结果
}

message ClusterConfirmSummaryResp {
  bool Success = 1;
  string Message = 2;
  ClusterConfirmSummary ClusterConfirmSummary = 3;
}

// 同步集群组相关消息
message SyncClusterGroupsReq {
}

// 数据库类型同步详情
message DatabaseSyncDetail {
  string DatabaseType = 1;  // 数据库类型（mysql, mssql, tidb, goldendb）
  int32 SyncedCount = 2;     // 该类型同步的记录数
  repeated string ClusterGroups = 3; // 同步的集群组列表
}

message SyncClusterGroupsResp {
  bool Success = 1;
  string Message = 2;
  int32 SyncedCount = 3; // 总同步记录数
  repeated DatabaseSyncDetail Details = 4; // 各数据库类型的详细同步信息
}

message LoadServerMetricsCSVReq {
  bytes FileContent = 1;
  string Filename = 2;
}

message LoadServerMetricsCSVProgressResp {
  bool Success = 1;
  string Message = 2;
  int32 TotalRows = 3;
  int32 ProcessedRows = 4;
  float ProgressPercentage = 5;
  bool IsCompleted = 6;
  string ErrorDetail = 7;
  int32 ErrorLine = 8;
  string LastUpdatedTime = 9;
}

// 监控数据核对相关消息
message VerifyMonitoringDataReq {
  string StartTime = 1;
  string EndTime = 2;
}

message HostWithoutMonitoring {
  string HostIp = 1;
  string HostName = 2;
  string PoolName = 3;
  string CreateTime = 4;
}

message VerifyMonitoringDataResp {
  bool Success = 1;
  string Message = 2;
  int32 TotalHosts = 3;
  int32 HostsWithMonitoring = 4;
  int32 HostsWithoutMonitoring = 5;
  float MonitoringCoverage = 6;
  repeated HostWithoutMonitoring HostsWithoutMonitoringList = 7;
}

// 硬件资源验证相关消息
message HardwareResourceVerificationReq {
  repeated string HostIpList = 1;     // 目标主机IP列表
  string ResourceType = 2;            // 资源类型: cpu, memory, disk
  int32 TargetPercent = 3;           // 目标资源占用百分比
  int32 Duration = 4;                // 执行持续时间（秒），默认300秒
  string ScriptParams = 5;           // 额外的脚本参数（JSON格式）
  bool ForceExecution = 6;           // 强制执行：true=终止旧任务并执行新任务，false=跳过有冲突的主机
}

message HardwareResourceVerificationResp {
  bool Success = 1;
  string Message = 2;
  string TaskId = 3;                 // 任务ID，用于跟踪任务状态
}

message GetHardwareResourceVerificationStatusReq {
  repeated string HostIpList = 1;    // 主机IP列表，空则返回所有
  string ResourceType = 2;           // 资源类型过滤，空则返回所有类型
}

message HardwareResourceVerificationStatus {
  int64 Id = 1;
  string TaskId = 2;
  string HostIp = 3;
  string ResourceType = 4;
  int32 TargetPercent = 5;
  int32 Duration = 6;
  string ExecutionStatus = 7;        // pending, running, completed, failed
  string StartTime = 8;
  string EndTime = 9;
  int32 ExitCode = 10;
  string ResultSummary = 11;         // JSON格式的结果摘要
  string CreateTime = 12;
  string SSHError = 13;
}

message GetHardwareResourceVerificationStatusResp {
  bool Success = 1;
  string Message = 2;
  repeated HardwareResourceVerificationStatus VerificationRecords = 3;
}

message GetHardwareResourceVerificationHistoryReq {
  string HostIp = 1;                 // 指定主机IP
  string ResourceType = 2;           // 资源类型过滤，空则返回所有类型
  int32 Limit = 3;                   // 限制返回记录数，默认50
}

message HardwareResourceVerificationHistory {
  int64 Id = 1;
  string TaskId = 2;
  string HostIp = 3;
  string ResourceType = 4;
  int32 TargetPercent = 5;
  int32 Duration = 6;
  string ExecutionStatus = 7;
  string StartTime = 8;
  string EndTime = 9;
  int32 ExitCode = 10;
  string StdoutLog = 11;
  string StderrLog = 12;
  string ResultSummary = 13;
  string CreateTime = 14;
  string SSHError = 15;
}

message GetHardwareResourceVerificationHistoryResp {
  bool Success = 1;
  string Message = 2;
  repeated HardwareResourceVerificationHistory HistoryRecords = 3;
}

// 用户认证相关消息类型
message LoginReq {
  string Username = 1;
  string Password = 2;
  string LoginSource = 3;  // "local" 或 "cas"
}

message LoginResp {
  bool Success = 1;
  string Message = 2;
  string Token = 3;
  UserInfo UserInfo = 4;
}

message UserInfo {
  int64 Id = 1;
  string Username = 2;
  string Email = 3;
  string DisplayName = 4;
  bool IsActive = 5;
  bool IsAdmin = 6;
  string LoginSource = 7;
  string LastLoginAt = 8;
}

message ValidateTokenReq {
  string Token = 1;
}

message ValidateTokenResp {
  bool Valid = 1;
  UserInfo UserInfo = 2;
  string Message = 3;
}

message LogoutReq {
  string Token = 1;
}

message LogoutResp {
  bool Success = 1;
  string Message = 2;
}

message CreateUserReq {
  string Username = 1;
  string Password = 2;
  string Email = 3;
  string DisplayName = 4;
  bool IsAdmin = 5;
  string LoginSource = 6;
}

message CreateUserResp {
  bool Success = 1;
  string Message = 2;
  int64 UserId = 3;
}

// 定时任务相关消息类型
message CreateScheduledTaskReq {
  string TaskName = 1;              // 任务名称
  string Description = 2;           // 任务描述
  string CronExpression = 3;        // Cron表达式
  repeated string HostIpList = 4;   // 主机IP列表
  string ResourceType = 5;          // 资源类型: cpu, memory, disk
  int32 TargetPercent = 6;         // 目标百分比
  int32 Duration = 7;              // 执行持续时间（秒）
  string ScriptParams = 8;         // 脚本参数（JSON格式）
  bool ForceExecution = 9;         // 是否强制执行
  string CreatedBy = 10;           // 创建者
}

message CreateScheduledTaskResp {
  bool Success = 1;
  string Message = 2;
  int64 TaskId = 3;
}

message UpdateScheduledTaskReq {
  int64 Id = 1;                    // 任务ID
  string TaskName = 2;             // 任务名称
  string Description = 3;          // 任务描述
  string CronExpression = 4;       // Cron表达式
  repeated string HostIpList = 5;  // 主机IP列表
  string ResourceType = 6;         // 资源类型
  int32 TargetPercent = 7;        // 目标百分比
  int32 Duration = 8;             // 执行持续时间（秒）
  string ScriptParams = 9;        // 脚本参数（JSON格式）
  bool ForceExecution = 10;       // 是否强制执行
}

message UpdateScheduledTaskResp {
  bool Success = 1;
  string Message = 2;
}

message DeleteScheduledTaskReq {
  int64 Id = 1;                   // 任务ID
}

message DeleteScheduledTaskResp {
  bool Success = 1;
  string Message = 2;
}

message GetScheduledTasksReq {
  string ResourceType = 1;        // 资源类型过滤，空则返回所有
  bool EnabledOnly = 2;           // 是否只返回启用的任务
}

message ScheduledTask {
  int64 Id = 1;
  string TaskName = 2;
  string Description = 3;
  string CronExpression = 4;
  string HostIpList = 5;          // JSON格式的主机IP列表
  string ResourceType = 6;
  int32 TargetPercent = 7;
  int32 Duration = 8;
  string ScriptParams = 9;
  bool ForceExecution = 10;
  bool IsEnabled = 11;
  string CreatedBy = 12;
  string CreatedAt = 13;
  string UpdatedAt = 14;
  string LastExecutionTime = 15;
  string NextExecutionTime = 16;
}

message GetScheduledTasksResp {
  bool Success = 1;
  string Message = 2;
  repeated ScheduledTask Tasks = 3;
}

message GetScheduledTaskDetailReq {
  int64 Id = 1;                   // 任务ID
}

message GetScheduledTaskDetailResp {
  bool Success = 1;
  string Message = 2;
  ScheduledTask Task = 3;
}

message EnableScheduledTaskReq {
  int64 Id = 1;                   // 任务ID
  bool IsEnabled = 2;             // 是否启用
}

message EnableScheduledTaskResp {
  bool Success = 1;
  string Message = 2;
}

message GetScheduledTaskExecutionHistoryReq {
  int64 ScheduledTaskId = 1;      // 定时任务ID
  int32 Limit = 2;                // 限制返回记录数，默认50
}

message ScheduledTaskExecutionHistory {
  int64 Id = 1;
  int64 ScheduledTaskId = 2;
  string ExecutionTaskId = 3;
  string ExecutionTime = 4;
  string ExecutionStatus = 5;     // success, failed, partial
  int32 TotalHosts = 6;
  int32 SuccessHosts = 7;
  int32 FailedHosts = 8;
  string ErrorMessage = 9;
  repeated HostExecutionDetail HostDetails = 10;  // 主机执行详情列表
}

// 主机执行详情
message HostExecutionDetail {
  string HostIp = 1;               // 主机IP
  string ResourceType = 2;         // 资源类型: cpu, memory, disk
  int32 TargetPercent = 3;         // 目标百分比
  int32 Duration = 4;              // 执行持续时间（秒）
  string ExecutionStatus = 5;      // 执行状态：pending, running, completed, failed
  string StartTime = 6;            // 开始时间
  string EndTime = 7;              // 结束时间
  int32 ExitCode = 8;              // 退出代码
  string StdoutLog = 9;            // 标准输出日志
  string StderrLog = 10;           // 错误输出日志
  string ResultSummary = 11;       // 结果摘要（JSON格式）
  string SSHError = 12;            // SSH错误信息
  string CreateTime = 13;          // 创建时间
}

message GetScheduledTaskExecutionHistoryResp {
  bool Success = 1;
  string Message = 2;
  repeated ScheduledTaskExecutionHistory HistoryRecords = 3;
}

// 获取定时任务执行详情相关消息类型
message GetScheduledTaskExecutionDetailsReq {
  string ExecutionTaskId = 1;  // 执行任务ID (对应scheduled_task_execution_history.execution_task_id)
}

message ScheduledTaskExecutionDetail {
  string HostIp = 1;               // 主机IP
  string ResourceType = 2;         // 资源类型: cpu, memory, disk
  int32 TargetPercent = 3;         // 目标百分比
  int32 Duration = 4;              // 执行持续时间（秒）
  string ExecutionStatus = 5;      // 执行状态: pending, running, completed, failed
  string StartTime = 6;            // 开始时间
  string EndTime = 7;              // 结束时间
  int32 ExitCode = 8;              // 退出代码
  string StdoutLog = 9;            // 标准输出日志
  string StderrLog = 10;           // 错误输出日志
  string ResultSummary = 11;       // 结果摘要（JSON格式）
  string SSHError = 12;            // SSH错误信息
  string CreateTime = 13;          // 创建时间
}

message ScheduledTaskExecutionInfo {
  int64 ScheduledTaskId = 1;        // 定时任务ID
  string TaskName = 2;              // 任务名称
  string ExecutionTaskId = 3;       // 执行任务ID
  string ExecutionTime = 4;         // 执行时间
  string ExecutionStatus = 5;       // 执行状态: success, failed, partial
  int32 TotalHosts = 6;             // 总主机数
  int32 SuccessHosts = 7;           // 成功主机数
  int32 FailedHosts = 8;            // 失败主机数
  string ResourceType = 9;          // 资源类型
  int32 TargetPercent = 10;         // 目标百分比
  int32 Duration = 11;              // 执行持续时间（秒）
  repeated ScheduledTaskExecutionDetail HostDetails = 12;  // 主机执行详情列表
}

message GetScheduledTaskExecutionDetailsResp {
  bool Success = 1;
  string Message = 2;
  ScheduledTaskExecutionInfo Data = 3;  // 执行详情数据
}

// 从外部CMDB获取硬件信息相关消息类型
message FetchHostsHardwareInfoReq {
  repeated string HostIpList = 1;  // 要获取硬件信息的主机IP列表，为空则获取hosts_pool表中所有主机
}

message HostHardwareInfo {
  string HostIp = 1;
  string HostName = 2;
  int64 Disk = 3;     // 磁盘大小(GB)
  int64 Ram = 4;      // 内存大小(GB)
  int64 Vcpus = 5;    // CPU核数
  string Message = 6; // 获取结果或错误信息
  bool Success = 7;   // 是否成功获取
}

message FetchHostsHardwareInfoResp {
  bool Success = 1;
  string Message = 2;
  int32 TotalHosts = 3;       // 总主机数
  int32 UpdatedHosts = 4;     // 成功更新的主机数
  int32 FailedHosts = 5;      // 失败的主机数
  repeated HostHardwareInfo HardwareInfoList = 6;  // 详细硬件信息列表
}

// 从外部CMDB同步主机信息相关消息类型
message SyncExternalCmdbReq {
  int32 PageSize = 1;         // 每页数据量，默认100
  int32 HostOwner = 2;        // 主机所有者ID，为空则同步所有
  bool ForceUpdate = 3;       // 是否强制更新已存在的主机信息
}

message ExternalCmdbHost {
  string CmdbId = 1;
  string DomainNum = 2;
  string HostName = 3;
  string HostIp = 4;
  string HostType = 5;
  string HostOwner = 6;
  string OpsIamCode = 7;
  string OwnerGroup = 8;
  string OwnerIamCode = 9;
  string H3cId = 10;
  string H3cStatus = 11;
  int64 Disk = 12;            // 磁盘大小(GB)
  int64 Ram = 13;             // 内存大小(MB)
  int64 Vcpus = 14;           // CPU核数
  string CreatedAt = 15;
  string UpdatedAt = 16;
  string IfH3cSync = 17;
  string H3cImageId = 18;
  string H3cHmName = 19;
  string IsDelete = 20;
  string AppName = 21;        // 部署的应用名称
  string DataSource = 22;     // 数据源
  string BizGroup = 23;       // 业务组
  string OpsBizGroup = 24;    // 运维业务组
  string Message = 25;        // 同步结果消息
  bool Success = 26;          // 同步是否成功
}

message SyncExternalCmdbResp {
  bool Success = 1;
  string Message = 2;
  int32 TotalPages = 3;       // 总页数
  int32 ProcessedPages = 4;   // 已处理页数
  int32 TotalHosts = 5;       // 总主机数
  int32 SyncedHosts = 6;      // 成功同步的主机数
  int32 UpdatedHosts = 7;     // 更新的主机数
  int32 FailedHosts = 8;      // 失败的主机数
  repeated ExternalCmdbHost SyncResults = 9;  // 同步结果详情
}

// 手动添加主机相关消息类型
message ManualHostHardwareInfo {
  int32 DiskSize = 1;      // 磁盘大小(GB)
  int32 Ram = 2;           // 内存大小(GB) 
  int32 Vcpus = 3;         // CPU核数
  string HostType = 4;     // 主机类型
  string H3cId = 5;        // H3C ID
  string H3cStatus = 6;    // H3C状态
  string IfH3cSync = 7;    // 是否H3C同步
  string H3cImgId = 8;     // H3C镜像ID
  string H3cHmName = 9;    // H3C主机名
  string LeafNumber = 10;  // 叶子编号
  string RackNumber = 11;  // 机柜编号
  int32 RackHeight = 12;   // 机柜高度
  int32 RackStartNumber = 13; // 机柜起始编号
  int32 FromFactor = 14;   // From因子
  string SerialNumber = 15; // 序列号
}

message HostApplicationInfo {
  string ServerType = 1;      // 服务类型
  string ServerVersion = 2;   // 服务版本
  string ServerSubtitle = 3;  // 服务子标题
  string ClusterName = 4;     // 集群名称
  string ServerProtocol = 5;  // 服务协议
  string ServerAddr = 6;      // 服务地址
  int32 ServerPort = 7;       // 服务端口
  string ServerRole = 8;      // 服务角色
  string ServerStatus = 9;    // 服务状态
  string DepartmentName = 10; // 部门名称
}

message ManualAddHostReq {
  string HostIp = 1;                        // 主机IP（必填）
  string HostName = 2;                      // 主机名
  ManualHostHardwareInfo HardwareInfo = 3;  // 硬件信息
  repeated HostApplicationInfo Applications = 4; // 应用信息列表
  bool AutoFetchFromCmdb = 5;               // 是否从CMDB自动获取信息
  bool AutoFetchFromClusters = 6;           // 是否从集群实例表自动获取应用信息
  int64 IdcId = 7;                          // IDC机房ID
}

message AutoFetchResult {
  bool Success = 1;
  string Message = 2;
  ManualHostHardwareInfo HardwareInfo = 3;  // 获取到的硬件信息
  repeated HostApplicationInfo Applications = 4; // 获取到的应用信息列表
}

message ManualAddHostResp {
  bool Success = 1;
  string Message = 2;
  AutoFetchResult AutoFetchResult = 3;      // 自动获取的结果（用于填充表单）
}

// 自动获取主机信息的请求（用于填充表单）
message AutoFetchHostInfoReq {
  string HostIp = 1;                        // 主机IP
  bool FetchFromCmdb = 2;                   // 是否从CMDB获取
  bool FetchFromClusters = 3;               // 是否从集群实例表获取
}

message AutoFetchHostInfoResp {
  bool Success = 1;
  string Message = 2;
  ManualHostHardwareInfo HardwareInfo = 3;
  repeated HostApplicationInfo Applications = 4;
  IdcConf IdcInfo = 5;  // IDC信息，独立于硬件信息
}

// IDC机房配置相关消息类型
message IdcConf {
  int64 Id = 1;
  string IdcName = 2;
  string IdcCode = 3;
  string IdcIpRegexp = 4;
  string IdcLocation = 5;
  string IdcDescription = 6;
  bool IsActive = 7;
  int32 Priority = 8;
  string CreatedAt = 9;
  string UpdatedAt = 10;
}

message GetIdcConfListReq {
  bool ActiveOnly = 1;  // 是否只返回激活的IDC配置
}

message GetIdcConfListResp {
  bool Success = 1;
  string Message = 2;
  repeated IdcConf IdcConfList = 3;
}

message CreateIdcConfReq {
  string IdcName = 1;
  string IdcCode = 2;
  string IdcIpRegexp = 3;
  string IdcLocation = 4;
  string IdcDescription = 5;
  int32 Priority = 6;
}

message CreateIdcConfResp {
  bool Success = 1;
  string Message = 2;
  int64 IdcId = 3;
}

message UpdateIdcConfReq {
  int64 Id = 1;
  string IdcName = 2;
  string IdcCode = 3;
  string IdcIpRegexp = 4;
  string IdcLocation = 5;
  string IdcDescription = 6;
  bool IsActive = 7;
  int32 Priority = 8;
}

message UpdateIdcConfResp {
  bool Success = 1;
  string Message = 2;
}

message DeleteIdcConfReq {
  int64 Id = 1;
}

message DeleteIdcConfResp {
  bool Success = 1;
  string Message = 2;
}

message MatchIdcByIpReq {
  string HostIp = 1;
}

message MatchIdcByIpResp {
  bool Success = 1;
  string Message = 2;
  IdcConf IdcConf = 3;  // 匹配到的IDC配置，如果没有匹配到则为空
}

// 批量更新主机IDC信息
message UpdateHostsIdcReq {
  repeated string HostIpList = 1;  // 空则更新所有主机
}

message UpdateHostsIdcResp {
  bool Success = 1;
  string Message = 2;
  int32 TotalHosts = 3;      // 总处理主机数
  int32 UpdatedHosts = 4;    // 成功更新的主机数
  int32 UnmatchedHosts = 5;  // 未匹配到IDC的主机数
}

// ES数据同步任务配置相关消息类型
message CreateESSyncTaskReq {
  string TaskName = 1;              // 任务名称
  string Description = 2;           // 任务描述
  string EsEndpoint = 3;            // ES接口地址
  string EsIndexPattern = 4;        // ES索引模式
  string CronExpression = 5;        // Cron表达式
  string QueryTimeRange = 6;        // 查询时间范围(如7d,30d)
  string CreatedBy = 7;             // 创建者
}

message CreateESSyncTaskResp {
  bool Success = 1;
  string Message = 2;
  int64 TaskId = 3;
}

message UpdateESSyncTaskReq {
  int64 Id = 1;                    // 任务ID
  string TaskName = 2;             // 任务名称
  string Description = 3;          // 任务描述
  string EsEndpoint = 4;           // ES接口地址
  string EsIndexPattern = 5;       // ES索引模式
  string CronExpression = 6;       // Cron表达式
  string QueryTimeRange = 7;       // 查询时间范围
}

message UpdateESSyncTaskResp {
  bool Success = 1;
  string Message = 2;
}

message DeleteESSyncTaskReq {
  int64 Id = 1;                   // 任务ID
}

message DeleteESSyncTaskResp {
  bool Success = 1;
  string Message = 2;
}

message GetESSyncTasksReq {
  bool EnabledOnly = 1;           // 是否只返回启用的任务
}

message ESSyncTask {
  int64 Id = 1;
  string TaskName = 2;
  string Description = 3;
  string EsEndpoint = 4;
  string EsIndexPattern = 5;
  string CronExpression = 6;
  string QueryTimeRange = 7;
  bool IsEnabled = 8;
  string CreatedBy = 9;
  string CreatedAt = 10;
  string UpdatedAt = 11;
  string LastExecutionTime = 12;
  string NextExecutionTime = 13;
}

message GetESSyncTasksResp {
  bool Success = 1;
  string Message = 2;
  repeated ESSyncTask Tasks = 3;
}

message GetESSyncTaskDetailReq {
  int64 Id = 1;                   // 任务ID
}

message GetESSyncTaskDetailResp {
  bool Success = 1;
  string Message = 2;
  ESSyncTask Task = 3;
}

message EnableESSyncTaskReq {
  int64 Id = 1;                   // 任务ID
  bool IsEnabled = 2;             // 是否启用
}

message EnableESSyncTaskResp {
  bool Success = 1;
  string Message = 2;
}

// ES数据同步执行相关消息类型
message ExecuteESSyncByHostListReq {
  repeated string HostIpList = 1;  // 主机IP列表
  string QueryTimeRange = 2;       // 查询时间范围
  string EsEndpoint = 3;           // ES接口地址(可选,为空则使用默认配置)
  string TaskName = 4;             // 任务名称(用于记录)
}

message ExecuteESSyncByFileReq {
  bytes FileContent = 1;           // 文件内容
  string Filename = 2;             // 文件名
  string QueryTimeRange = 3;       // 查询时间范围
  string EsEndpoint = 4;           // ES接口地址(可选)
  string TaskName = 5;             // 任务名称
}

// ES全量同步请求(从ES查询group="DB组"的所有主机并同步到数据库)
message ExecuteESSyncFullSyncReq {
  string GroupName = 1;            // 组名,默认"DB组"
  string QueryTimeRange = 2;       // 查询时间范围,默认"30d"
  string EsEndpoint = 3;           // ES接口地址(可选,为空则使用默认配置)
  string TaskName = 4;             // 任务名称(用于记录)
}

// ES全量同步响应
message ExecuteESSyncFullSyncResp {
  bool Success = 1;
  string Message = 2;
  int64 ExecutionId = 3;           // 执行记录ID
  int32 TotalHosts = 4;            // ES中查询到的总主机数
  int32 NewHostsCount = 5;         // 新增到hosts_pool的主机数
  int32 UpdatedHostsCount = 6;     // 更新到server_resources的主机数
  int32 FailedCount = 7;           // 失败数量
  repeated string NewHostIpList = 8;      // 新增的主机IP列表
  repeated string UpdatedHostIpList = 9;  // 更新的主机IP列表
  repeated string FailedIpList = 10;      // 失败的主机IP列表
}

// 统一响应结构（包含ES和CMSys的所有字段）
message ExecuteESSyncResp {
  bool Success = 1;
  string Message = 2;
  int64 ExecutionId = 3;           // 执行记录ID
  int32 TotalHosts = 4;            // 总主机数
  int32 SuccessCount = 5;          // 成功数量
  int32 FailedCount = 6;           // 失败数量

  // 原ES特有字段
  int32 NotInPoolCount = 7;        // 不在池中数量
  repeated string NotInPoolIpList = 8;   // 不在池中的IP列表

  // 新增：为统一而添加的CMSys字段（ES时这些字段值为0/空）
  int32 NotInDatasourceCount = 9;       // 数据源中不存在数量（CMSys专用，ES固定为0）
  repeated string NotInDatasourceIpList = 10;  // 数据源中不存在的IP列表（CMSys专用，ES固定为空）
  int32 NewHostsCount = 11;             // 新增主机数（全量同步时有值）
  repeated string NewHostIpList = 12;   // 新增主机IP列表（全量同步时有值）
  int32 UpdatedHostsCount = 13;         // 更新主机数（全量同步时有值）
  repeated string UpdatedHostIpList = 14; // 更新主机IP列表（全量同步时有值）

  // 通用字段
  repeated string SuccessIpList = 15;      // 成功的IP列表
  repeated string FailedIpList = 16;       // 失败的IP列表
}

message GetExternalSyncExecutionLogsReq {
  int64 TaskId = 1;                // 任务ID(可选,为0则返回所有)
  int32 Limit = 2;                 // 限制返回记录数，默认50
  string DataSource = 3;           // 数据源过滤(可选,为空则返回所有): elasticsearch, cmsys
}

message ExternalSyncExecutionLog {
  int64 Id = 1;
  int64 TaskId = 2;
  string TaskName = 3;
  string ExecutionTime = 4;
  string ExecutionStatus = 5;      // success, failed, partial
  int32 TotalHosts = 6;
  int32 SuccessCount = 7;
  int32 FailedCount = 8;
  int32 NotInPoolCount = 9;
  string ErrorMessage = 10;
  int32 DurationMs = 11;
  string QueryTimeRange = 12;
  string CreatedAt = 13;
}

message GetExternalSyncExecutionLogsResp {
  bool Success = 1;
  string Message = 2;
  repeated ExternalSyncExecutionLog ExecutionLogs = 3;
}

message GetExternalSyncExecutionDetailReq {
  int64 ExecutionId = 1;           // 执行记录ID
}

message ExternalSyncExecutionDetail {
  string HostIp = 1;
  string HostName = 2;
  string SyncStatus = 3;           // success, failed, not_in_pool
  string ErrorMessage = 4;
  double MaxCpu = 5;
  double AvgCpu = 6;
  double MaxMemory = 7;
  double AvgMemory = 8;
  double MaxDisk = 9;
  double AvgDisk = 10;
  int32 DataPointCount = 11;
  string CreatedAt = 12;
}

message ExternalSyncExecutionInfo {
  ExternalSyncExecutionLog ExecutionLog = 1;
  repeated ExternalSyncExecutionDetail Details = 2;
}

message GetExternalSyncExecutionDetailResp {
  bool Success = 1;
  string Message = 2;
  ExternalSyncExecutionInfo Data = 3;
}

// CMSys数据同步执行相关消息类型
message ExecuteCMSysSyncReq {
  string Query = 1;            // 查询参数
  string TaskName = 2;         // 任务名称(用于记录)
}

// CMSys按文件执行同步请求
message ExecuteCMSysSyncByFileReq {
  string TaskName = 1;
  bytes FileContent = 2;       // 文件内容（IP列表，每行一个IP）
  string Query = 3;            // CMSys查询参数
}

// CMSys全量同步请求
message ExecuteCMSysSyncFullSyncReq {
  string TaskName = 1;
  string Query = 2;            // CMSys查询参数（如 "department=DB"）
}

// 统一响应结构（包含ES和CMSys的所有字段）
message ExecuteCMSysSyncResp {
  bool Success = 1;
  string Message = 2;
  int64 ExecutionId = 3;                // 执行记录ID
  int32 TotalHosts = 4;                 // 总主机数
  int32 SuccessCount = 5;               // 成功数量
  int32 FailedCount = 6;                // 失败数量

  // 原CMSys特有字段
  int32 NotInDatasourceCount = 7;       // 数据源中不存在数量
  repeated string NotInDatasourceIpList = 8;  // 数据源中不存在的IP列表

  // 新增：为统一而添加的ES字段（CMSys时这些字段值为0/空）
  int32 NotInPoolCount = 9;             // 不在池中数量（ES专用，CMSys固定为0）
  repeated string NotInPoolIpList = 10; // 不在池中IP列表（ES专用，CMSys固定为空）
  int32 NewHostsCount = 11;             // 新增主机数（全量同步时有值）
  repeated string NewHostIpList = 12;   // 新增主机IP列表（全量同步时有值）
  int32 UpdatedHostsCount = 13;         // 更新主机数（全量同步时有值）
  repeated string UpdatedHostIpList = 14; // 更新主机IP列表（全量同步时有值）

  // 通用字段
  repeated string SuccessIpList = 15;   // 成功的IP列表
  repeated string FailedIpList = 16;    // 失败的IP列表
}

// ========== 统一的外部资源同步接口定义 ==========
// 这些接口统一了 ES 和 CMSys 两种数据源，通过 DataSource 字段区分

// 1. 任务配置管理相关消息定义

// 创建外部同步任务请求
message CreateExternalSyncTaskReq {
  string DataSource = 1;              // 数据源类型: elasticsearch, cmsys
  string TaskName = 2;                // 任务名称
  string Description = 3;             // 任务描述
  string CronExpression = 4;          // Cron表达式
  string QueryTimeRange = 5;          // 查询时间范围(如7d,30d) - ES专用
  string CreatedBy = 6;               // 创建者

  // ES专用字段
  string EsEndpoint = 7;              // ES接口地址
  string EsIndexPattern = 8;          // ES索引模式

  // CMSys专用字段（未来扩展）
  string CmsysEndpoint = 9;           // CMSys接口地址
  string CmsysQuery = 10;             // CMSys查询参数
}

message CreateExternalSyncTaskResp {
  bool Success = 1;
  string Message = 2;
  int64 TaskId = 3;
}

// 更新外部同步任务请求
message UpdateExternalSyncTaskReq {
  int64 Id = 1;                       // 任务ID
  string DataSource = 2;              // 数据源类型: elasticsearch, cmsys
  string TaskName = 3;                // 任务名称
  string Description = 4;             // 任务描述
  string CronExpression = 5;          // Cron表达式
  string QueryTimeRange = 6;          // 查询时间范围 - ES专用

  // ES专用字段
  string EsEndpoint = 7;              // ES接口地址
  string EsIndexPattern = 8;          // ES索引模式

  // CMSys专用字段（未来扩展）
  string CmsysEndpoint = 9;           // CMSys接口地址
  string CmsysQuery = 10;             // CMSys查询参数
}

message UpdateExternalSyncTaskResp {
  bool Success = 1;
  string Message = 2;
}

// 删除外部同步任务请求
message DeleteExternalSyncTaskReq {
  int64 Id = 1;                       // 任务ID
  string DataSource = 2;              // 数据源类型: elasticsearch, cmsys
}

message DeleteExternalSyncTaskResp {
  bool Success = 1;
  string Message = 2;
}

// 获取外部同步任务列表请求
message GetExternalSyncTasksReq {
  string DataSource = 1;              // 数据源类型: elasticsearch, cmsys
  bool EnabledOnly = 2;               // 是否只返回启用的任务
}

// 统一的外部同步任务信息（包含ES和CMSys的所有字段）
message ExternalSyncTask {
  int64 Id = 1;
  string DataSource = 2;              // 数据源类型
  string TaskName = 3;
  string Description = 4;
  string CronExpression = 5;
  string QueryTimeRange = 6;
  bool IsEnabled = 7;
  string CreatedBy = 8;
  string CreatedAt = 9;
  string UpdatedAt = 10;
  string LastExecutionTime = 11;
  string NextExecutionTime = 12;

  // ES专用字段
  string EsEndpoint = 13;
  string EsIndexPattern = 14;

  // CMSys专用字段（未来扩展）
  string CmsysEndpoint = 15;
  string CmsysQuery = 16;
}

message GetExternalSyncTasksResp {
  bool Success = 1;
  string Message = 2;
  repeated ExternalSyncTask Tasks = 3;
}

// 获取外部同步任务详情请求
message GetExternalSyncTaskDetailReq {
  int64 Id = 1;                       // 任务ID
  string DataSource = 2;              // 数据源类型: elasticsearch, cmsys
}

message GetExternalSyncTaskDetailResp {
  bool Success = 1;
  string Message = 2;
  ExternalSyncTask Task = 3;
}

// 启用/禁用外部同步任务请求
message EnableExternalSyncTaskReq {
  int64 Id = 1;                       // 任务ID
  string DataSource = 2;              // 数据源类型: elasticsearch, cmsys
  bool IsEnabled = 3;                 // 是否启用
}

message EnableExternalSyncTaskResp {
  bool Success = 1;
  string Message = 2;
}

// 2. 同步执行相关消息定义

// 按主机列表执行外部同步请求
message ExecuteExternalSyncByHostListReq {
  string DataSource = 1;              // 数据源类型: elasticsearch, cmsys
  repeated string HostIpList = 2;     // 主机IP列表
  string TaskName = 3;                // 任务名称(用于记录)

  // ES专用字段
  string QueryTimeRange = 4;          // 查询时间范围
  string EsEndpoint = 5;              // ES接口地址(可选)

  // CMSys专用字段
  string CmsysQuery = 6;              // CMSys查询参数(可选)
}

// 按文件执行外部同步请求
message ExecuteExternalSyncByFileReq {
  string DataSource = 1;              // 数据源类型: elasticsearch, cmsys
  bytes FileContent = 2;              // 文件内容（IP列表，每行一个IP）
  string Filename = 3;                // 文件名
  string TaskName = 4;                // 任务名称(用于记录)

  // ES专用字段
  string QueryTimeRange = 5;          // 查询时间范围
  string EsEndpoint = 6;              // ES接口地址(可选)

  // CMSys专用字段
  string CmsysQuery = 7;              // CMSys查询参数(可选)
}

// 全量同步请求
message ExecuteExternalSyncFullSyncReq {
  string DataSource = 1;              // 数据源类型: elasticsearch, cmsys
  string TaskName = 2;                // 任务名称(用于记录)

  // ES专用字段
  string GroupName = 3;               // 组名,默认"DB组"
  string QueryTimeRange = 4;          // 查询时间范围,默认"30d"
  string EsEndpoint = 5;              // ES接口地址(可选)

  // CMSys专用字段
  string CmsysQuery = 6;              // CMSys查询参数(如 "department=DB")
}

// 统一的执行响应（复用 ExecuteESSyncResp，它已包含所有字段）
message ExecuteExternalSyncResp {
  bool Success = 1;
  string Message = 2;
  int64 ExecutionId = 3;              // 执行记录ID
  int32 TotalHosts = 4;               // 总主机数
  int32 SuccessCount = 5;             // 成功数量
  int32 FailedCount = 6;              // 失败数量

  // ES特有字段
  int32 NotInPoolCount = 7;           // 不在池中数量
  repeated string NotInPoolIpList = 8;   // 不在池中的IP列表

  // CMSys特有字段
  int32 NotInDatasourceCount = 9;        // 数据源中不存在数量
  repeated string NotInDatasourceIpList = 10;  // 数据源中不存在的IP列表

  // 全量同步字段
  int32 NewHostsCount = 11;              // 新增主机数
  repeated string NewHostIpList = 12;    // 新增主机IP列表
  int32 UpdatedHostsCount = 13;          // 更新主机数
  repeated string UpdatedHostIpList = 14; // 更新主机IP列表

  // 通用字段
  repeated string SuccessIpList = 15;    // 成功的IP列表
  repeated string FailedIpList = 16;     // 失败的IP列表
}

service cmpool {
  // 从CMDB抽取主机数据
  // 根据传递的ip列表，从 cmdb 中抽取数据库资源池中数据库服务器的数据并持久化
  rpc cmdb_extract_by_hosts(ExtractByHostsReq) returns (ExtractByHostsResp);
  // <必要数据搜集>，全量抽取CMDB中数据库服务器的数据并刷新到数据库资源池
  rpc cmdb_extract_all(ExtractAllReq) returns (ExtractAllResp);
  // 数据搜集，按照cmdb中的ownerGroup抽取所有属于具体组的服务器并写入hosts_pool
  rpc cmdb_extract_hosts_by_owner(ExtractByOwnerReq) returns (ExtractByOwnerResp);
  // 向CMDB回写数据
  // 向 cmdb 中注入维护后的数据库资源池中对象的数据
  rpc cmdb_inject_all(InjectAllReq) returns (InjectAllResp);
  // 向 cmdb 中注入维护后的数据库资源池中对象的数据
  rpc cmdb_inject_by_hosts(InjectHostsReq) returns (InjectHostsResp);
  // 数据库主机池数据维护
  // <必要数据搜集>，同步(MySQL、TiDB、GoldenDB)数据库主机到主机资源池表
  rpc cmdb_sync_hosts(SyncHostsReq) returns (SyncHostsResp);
  // 手动修改资源池主机信息，如果主机信息最终 isStatic 不为 True，那么这里的修改会被后续的任务以真实数据刷掉
  rpc cmdb_modify_hosts(ModifyHostsReq) returns (ModifyHostsResp);
  // 软删除资源池主机
  rpc cmdb_soft_del_hosts(SoftDelHostsReq) returns (SoftDelHostsResp);
  // 硬删除资源池主机
  rpc cmdb_hard_del_hosts(HardDelHostsReq) returns (HardDelHostsResp);
  // 获取资源池主机信息，包括cmdb信息，应用部署信息等所有相关数据（这里是根据hosts_pool实时检索，数据并不来自于hosts_application表）
  rpc cmdb_get_hosts_detail(GetHostsDetailReq) returns (GetHostsDetailResp);
  // 内部数据加工和检索
  // <必要数据搜集>，搜集主机的应用信息并记录，所有应用服务部署时，都应当将应用信息写入到该表，目前为手动/自动触发接口搜集
  rpc collect_applications(CollAppsReq) returns (CollAppsResp);
  // 查询主机信息，主页面数据展示，返回的数据实际上和detail接口一致，这里没有做区别实现，如果有需要可以添加
  rpc get_hosts_pool(GetHostsPoolReq) returns (GetHostsDetailResp);
  // 查询主机硬件信息详情，主机子页面显示
  //rpc get_hosts_hardware(GetHostHardwareReq) returns (GetHostHardwareResp);
  // 查询主机应用信息详情，主机子页面显示
  //rpc get_hosts_applications(GetHostsAppReq) returns (GetHostsAppResp);
  // 查询主机资源池详情，包括主机的硬件信息、软件信息，接口涉及数据量较大，一般不用于页面显示，用于向外部提供全量数据或数据导出需求
  rpc get_hosts_pool_detail(GetHostsPoolDetailReq) returns (GetHostsPoolDetailResp);
  // 手动添加资源池主机应用信息
  rpc add_hosts_application(AddHostsAppReq) returns (AddHostsAppResp);
  // 手动修改资源池主机应用信息
  rpc modify_hosts_application(MdfHostsAppReq) returns (MdfHostsAppResp);
  // 删除资源池主机应用信息
  rpc delete_hosts_application(DelHostsAppReq) returns (DelHostsAppResp);
  // 查询所有集群组及对应业务线
  rpc get_cluster_groups(ClusterGroupsReq) returns (ClusterGroupsResp);
  // 查询主机资源使用率数据
  rpc get_server_resource(ServerResourceReq) returns (ServerResourceResp);
  // 查询主机资源最大利用率数据
  rpc get_server_resource_max(ServerResourceMaxReq) returns (ServerResourceMaxResp);
  // 查询主机资源最大利用率数据（支持集群数组）
  // 获取集群资源详细信息
  rpc get_cluster_resources(ClusterResourceReq) returns (ClusterResourceResp);
  // 获取集群资源最大利用率信息  
  rpc get_cluster_resources_max(ClusterResourceReq) returns (ClusterResourceMaxResp);
  // 获取磁盘预测数据
  rpc get_disk_prediction(DiskPredictionReq) returns (DiskPredictionResp);
  // 获取备份恢复检查信息
  rpc get_backup_restore_check_info(BackupRestoreCheckInfoReq) returns (BackupRestoreCheckInfoResp);
  // 获取集群确认摘要
  rpc get_cluster_confirm_summary(ClusterConfirmSummaryReq) returns (ClusterConfirmSummaryResp);
  // 同步集群组数据
  rpc sync_cluster_groups(SyncClusterGroupsReq) returns (SyncClusterGroupsResp);
  // 从集群实例表同步主机到hosts_pool和hosts_applications表
  rpc sync_hosts_from_clusters(SyncClusterGroupsReq) returns (SyncClusterGroupsResp);
  rpc load_server_metrics_from_csv(LoadServerMetricsCSVReq) returns (stream LoadServerMetricsCSVProgressResp);
  // 监控数据核对
  rpc verify_monitoring_data(VerifyMonitoringDataReq) returns (VerifyMonitoringDataResp);
  // 硬件资源验证
  rpc hardware_resource_verification(HardwareResourceVerificationReq) returns (HardwareResourceVerificationResp);
  // 获取硬件资源验证状态
  rpc get_hardware_resource_verification_status(GetHardwareResourceVerificationStatusReq) returns (GetHardwareResourceVerificationStatusResp);
  // 获取硬件资源验证历史记录
  rpc get_hardware_resource_verification_history(GetHardwareResourceVerificationHistoryReq) returns (GetHardwareResourceVerificationHistoryResp);

  // 定时任务相关方法
  // 创建定时任务
  rpc create_scheduled_task(CreateScheduledTaskReq) returns (CreateScheduledTaskResp);
  // 更新定时任务
  rpc update_scheduled_task(UpdateScheduledTaskReq) returns (UpdateScheduledTaskResp);
  // 删除定时任务
  rpc delete_scheduled_task(DeleteScheduledTaskReq) returns (DeleteScheduledTaskResp);
  // 获取定时任务列表
  rpc get_scheduled_tasks(GetScheduledTasksReq) returns (GetScheduledTasksResp);
  // 获取定时任务详情
  rpc get_scheduled_task_detail(GetScheduledTaskDetailReq) returns (GetScheduledTaskDetailResp);
  // 启用/禁用定时任务
  rpc enable_scheduled_task(EnableScheduledTaskReq) returns (EnableScheduledTaskResp);
  // 获取定时任务执行历史
  rpc get_scheduled_task_execution_history(GetScheduledTaskExecutionHistoryReq) returns (GetScheduledTaskExecutionHistoryResp);
  // 获取定时任务执行详情
  rpc get_scheduled_task_execution_details(GetScheduledTaskExecutionDetailsReq) returns (GetScheduledTaskExecutionDetailsResp);

  // 用户认证相关方法
  // 用户登录
  rpc user_login(LoginReq) returns (LoginResp);
  // 验证Token
  rpc validate_token(ValidateTokenReq) returns (ValidateTokenResp);
  // 用户登出
  rpc user_logout(LogoutReq) returns (LogoutResp);
  // 创建用户（CAS用户自动创建）
  rpc create_user(CreateUserReq) returns (CreateUserResp);
  
  // 从外部CMDB获取主机硬件信息并更新hosts_pool表
  rpc fetch_hosts_hardware_info(FetchHostsHardwareInfoReq) returns (FetchHostsHardwareInfoResp);
  // 从外部CMDB同步完整主机信息到hosts_pool表
  rpc sync_external_cmdb(SyncExternalCmdbReq) returns (SyncExternalCmdbResp);
  // 手动添加主机到hosts_pool表并同步相关信息
  rpc manual_add_host(ManualAddHostReq) returns (ManualAddHostResp);
  // 自动获取主机信息用于填充表单
  rpc auto_fetch_host_info(AutoFetchHostInfoReq) returns (AutoFetchHostInfoResp);
  
  // IDC机房配置管理相关方法
  // 获取IDC机房配置列表
  rpc get_idc_conf_list(GetIdcConfListReq) returns (GetIdcConfListResp);
  // 创建IDC机房配置
  rpc create_idc_conf(CreateIdcConfReq) returns (CreateIdcConfResp);
  // 更新IDC机房配置
  rpc update_idc_conf(UpdateIdcConfReq) returns (UpdateIdcConfResp);
  // 删除IDC机房配置
  rpc delete_idc_conf(DeleteIdcConfReq) returns (DeleteIdcConfResp);
  // 根据IP匹配IDC机房
  rpc match_idc_by_ip(MatchIdcByIpReq) returns (MatchIdcByIpResp);
  // 批量更新主机IDC信息
  rpc update_hosts_idc(UpdateHostsIdcReq) returns (UpdateHostsIdcResp);

  // ========== 统一的外部资源同步接口（推荐使用） ==========
  // 1. 任务配置管理接口
  // 创建外部同步任务配置（支持ES和CMSys）
  rpc create_external_sync_task(CreateExternalSyncTaskReq) returns (CreateExternalSyncTaskResp);
  // 更新外部同步任务配置
  rpc update_external_sync_task(UpdateExternalSyncTaskReq) returns (UpdateExternalSyncTaskResp);
  // 删除外部同步任务配置
  rpc delete_external_sync_task(DeleteExternalSyncTaskReq) returns (DeleteExternalSyncTaskResp);
  // 获取外部同步任务配置列表
  rpc get_external_sync_tasks(GetExternalSyncTasksReq) returns (GetExternalSyncTasksResp);
  // 获取外部同步任务配置详情
  rpc get_external_sync_task_detail(GetExternalSyncTaskDetailReq) returns (GetExternalSyncTaskDetailResp);
  // 启用/禁用外部同步任务
  rpc enable_external_sync_task(EnableExternalSyncTaskReq) returns (EnableExternalSyncTaskResp);

  // 2. 同步执行接口
  // 根据主机列表立即执行外部同步（支持ES和CMSys）
  rpc execute_external_sync_by_host_list(ExecuteExternalSyncByHostListReq) returns (ExecuteExternalSyncResp);
  // 根据文件立即执行外部同步
  rpc execute_external_sync_by_file(ExecuteExternalSyncByFileReq) returns (ExecuteExternalSyncResp);
  // 外部同步全量同步
  rpc execute_external_sync_full_sync(ExecuteExternalSyncFullSyncReq) returns (ExecuteExternalSyncResp);

  // 3. 执行记录查询接口（已统一，无需修改）
  // 获取外部数据同步执行记录列表
  rpc get_external_sync_execution_logs(GetExternalSyncExecutionLogsReq) returns (GetExternalSyncExecutionLogsResp);
  // 获取外部数据同步执行详情
  rpc get_external_sync_execution_detail(GetExternalSyncExecutionDetailReq) returns (GetExternalSyncExecutionDetailResp);

  // ========== 已废弃的ES专用接口（请使用统一接口 create_external_sync_task 等） ==========
  // ES数据同步任务配置管理相关方法
  // [DEPRECATED] 创建ES数据同步任务配置 - 请使用 create_external_sync_task
  rpc create_es_sync_task(CreateESSyncTaskReq) returns (CreateESSyncTaskResp);
  // [DEPRECATED] 更新ES数据同步任务配置 - 请使用 update_external_sync_task
  rpc update_es_sync_task(UpdateESSyncTaskReq) returns (UpdateESSyncTaskResp);
  // [DEPRECATED] 删除ES数据同步任务配置 - 请使用 delete_external_sync_task
  rpc delete_es_sync_task(DeleteESSyncTaskReq) returns (DeleteESSyncTaskResp);
  // [DEPRECATED] 获取ES数据同步任务配置列表 - 请使用 get_external_sync_tasks
  rpc get_es_sync_tasks(GetESSyncTasksReq) returns (GetESSyncTasksResp);
  // [DEPRECATED] 获取ES数据同步任务配置详情 - 请使用 get_external_sync_task_detail
  rpc get_es_sync_task_detail(GetESSyncTaskDetailReq) returns (GetESSyncTaskDetailResp);
  // [DEPRECATED] 启用/禁用ES数据同步任务 - 请使用 enable_external_sync_task
  rpc enable_es_sync_task(EnableESSyncTaskReq) returns (EnableESSyncTaskResp);

  // ES数据同步执行相关方法
  // [DEPRECATED] 根据主机列表立即执行ES数据同步 - 请使用 execute_external_sync_by_host_list
  rpc execute_es_sync_by_host_list(ExecuteESSyncByHostListReq) returns (ExecuteESSyncResp);
  // [DEPRECATED] 根据文件立即执行ES数据同步 - 请使用 execute_external_sync_by_file
  rpc execute_es_sync_by_file(ExecuteESSyncByFileReq) returns (ExecuteESSyncResp);
  // [DEPRECATED] ES全量同步 - 请使用 execute_external_sync_full_sync
  rpc execute_es_sync_full_sync(ExecuteESSyncFullSyncReq) returns (ExecuteESSyncFullSyncResp);

  // ========== 已废弃的CMSys专用接口（请使用统一接口） ==========
  // CMSys数据同步执行相关方法
  // [DEPRECATED] 从CMSys HTTP接口同步主机数据 - 请使用 execute_external_sync_by_host_list
  rpc execute_cmsys_sync(ExecuteCMSysSyncReq) returns (ExecuteCMSysSyncResp);
  // [DEPRECATED] CMSys按文件执行同步 - 请使用 execute_external_sync_by_file
  rpc execute_cmsys_sync_by_file(ExecuteCMSysSyncByFileReq) returns (ExecuteCMSysSyncResp);
  // [DEPRECATED] CMSys全量同步 - 请使用 execute_external_sync_full_sync
  rpc execute_cmsys_sync_full_sync(ExecuteCMSysSyncFullSyncReq) returns (ExecuteCMSysSyncResp);
}