// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: cmpool.proto

package cmpoolclient

import (
	"context"

	"cmdb-rpc/cmpool"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddHostsAppReq                             = cmpool.AddHostsAppReq
	AddHostsAppResp                            = cmpool.AddHostsAppResp
	AddHostsResp                               = cmpool.AddHostsResp
	App                                        = cmpool.App
	AppInfo                                    = cmpool.AppInfo
	AutoFetchHostInfoReq                       = cmpool.AutoFetchHostInfoReq
	AutoFetchHostInfoResp                      = cmpool.AutoFetchHostInfoResp
	AutoFetchResult                            = cmpool.AutoFetchResult
	BackupRestoreCheckInfo                     = cmpool.BackupRestoreCheckInfo
	BackupRestoreCheckInfoReq                  = cmpool.BackupRestoreCheckInfoReq
	BackupRestoreCheckInfoResp                 = cmpool.BackupRestoreCheckInfoResp
	ClusterConfirmSummary                      = cmpool.ClusterConfirmSummary
	ClusterConfirmSummaryReq                   = cmpool.ClusterConfirmSummaryReq
	ClusterConfirmSummaryResp                  = cmpool.ClusterConfirmSummaryResp
	ClusterGroup                               = cmpool.ClusterGroup
	ClusterGroupsReq                           = cmpool.ClusterGroupsReq
	ClusterGroupsResp                          = cmpool.ClusterGroupsResp
	ClusterMemberResource                      = cmpool.ClusterMemberResource
	ClusterResourceMax                         = cmpool.ClusterResourceMax
	ClusterResourceMaxResp                     = cmpool.ClusterResourceMaxResp
	ClusterResourceReq                         = cmpool.ClusterResourceReq
	ClusterResourceResp                        = cmpool.ClusterResourceResp
	CmdbOpTask                                 = cmpool.CmdbOpTask
	CmdbOpTasksReq                             = cmpool.CmdbOpTasksReq
	CmdbOpTasksResp                            = cmpool.CmdbOpTasksResp
	CollAppsReq                                = cmpool.CollAppsReq
	CollAppsResp                               = cmpool.CollAppsResp
	CreateESSyncTaskReq                        = cmpool.CreateESSyncTaskReq
	CreateESSyncTaskResp                       = cmpool.CreateESSyncTaskResp
	CreateExternalSyncTaskReq                  = cmpool.CreateExternalSyncTaskReq
	CreateExternalSyncTaskResp                 = cmpool.CreateExternalSyncTaskResp
	CreateIdcConfReq                           = cmpool.CreateIdcConfReq
	CreateIdcConfResp                          = cmpool.CreateIdcConfResp
	CreateScheduledTaskReq                     = cmpool.CreateScheduledTaskReq
	CreateScheduledTaskResp                    = cmpool.CreateScheduledTaskResp
	CreateUserReq                              = cmpool.CreateUserReq
	CreateUserResp                             = cmpool.CreateUserResp
	DatabaseSyncDetail                         = cmpool.DatabaseSyncDetail
	DelHostsAppReq                             = cmpool.DelHostsAppReq
	DelHostsAppResp                            = cmpool.DelHostsAppResp
	DeleteESSyncTaskReq                        = cmpool.DeleteESSyncTaskReq
	DeleteESSyncTaskResp                       = cmpool.DeleteESSyncTaskResp
	DeleteExternalSyncTaskReq                  = cmpool.DeleteExternalSyncTaskReq
	DeleteExternalSyncTaskResp                 = cmpool.DeleteExternalSyncTaskResp
	DeleteIdcConfReq                           = cmpool.DeleteIdcConfReq
	DeleteIdcConfResp                          = cmpool.DeleteIdcConfResp
	DeleteScheduledTaskReq                     = cmpool.DeleteScheduledTaskReq
	DeleteScheduledTaskResp                    = cmpool.DeleteScheduledTaskResp
	DiskPrediction                             = cmpool.DiskPrediction
	DiskPredictionReq                          = cmpool.DiskPredictionReq
	DiskPredictionResp                         = cmpool.DiskPredictionResp
	ESSyncTask                                 = cmpool.ESSyncTask
	EnableESSyncTaskReq                        = cmpool.EnableESSyncTaskReq
	EnableESSyncTaskResp                       = cmpool.EnableESSyncTaskResp
	EnableExternalSyncTaskReq                  = cmpool.EnableExternalSyncTaskReq
	EnableExternalSyncTaskResp                 = cmpool.EnableExternalSyncTaskResp
	EnableScheduledTaskReq                     = cmpool.EnableScheduledTaskReq
	EnableScheduledTaskResp                    = cmpool.EnableScheduledTaskResp
	ExecuteCMSysSyncByFileReq                  = cmpool.ExecuteCMSysSyncByFileReq
	ExecuteCMSysSyncFullSyncReq                = cmpool.ExecuteCMSysSyncFullSyncReq
	ExecuteCMSysSyncReq                        = cmpool.ExecuteCMSysSyncReq
	ExecuteCMSysSyncResp                       = cmpool.ExecuteCMSysSyncResp
	ExecuteESSyncByFileReq                     = cmpool.ExecuteESSyncByFileReq
	ExecuteESSyncByHostListReq                 = cmpool.ExecuteESSyncByHostListReq
	ExecuteESSyncFullSyncReq                   = cmpool.ExecuteESSyncFullSyncReq
	ExecuteESSyncFullSyncResp                  = cmpool.ExecuteESSyncFullSyncResp
	ExecuteESSyncResp                          = cmpool.ExecuteESSyncResp
	ExecuteExternalSyncByFileReq               = cmpool.ExecuteExternalSyncByFileReq
	ExecuteExternalSyncByHostListReq           = cmpool.ExecuteExternalSyncByHostListReq
	ExecuteExternalSyncFullSyncReq             = cmpool.ExecuteExternalSyncFullSyncReq
	ExecuteExternalSyncResp                    = cmpool.ExecuteExternalSyncResp
	ExternalCmdbHost                           = cmpool.ExternalCmdbHost
	ExternalSyncExecutionDetail                = cmpool.ExternalSyncExecutionDetail
	ExternalSyncExecutionInfo                  = cmpool.ExternalSyncExecutionInfo
	ExternalSyncExecutionLog                   = cmpool.ExternalSyncExecutionLog
	ExternalSyncTask                           = cmpool.ExternalSyncTask
	ExtractAllReq                              = cmpool.ExtractAllReq
	ExtractAllResp                             = cmpool.ExtractAllResp
	ExtractByHostsReq                          = cmpool.ExtractByHostsReq
	ExtractByHostsResp                         = cmpool.ExtractByHostsResp
	ExtractByHostsSteamResp                    = cmpool.ExtractByHostsSteamResp
	ExtractByOwnerReq                          = cmpool.ExtractByOwnerReq
	ExtractByOwnerResp                         = cmpool.ExtractByOwnerResp
	FetchHostsHardwareInfoReq                  = cmpool.FetchHostsHardwareInfoReq
	FetchHostsHardwareInfoResp                 = cmpool.FetchHostsHardwareInfoResp
	GetESSyncTaskDetailReq                     = cmpool.GetESSyncTaskDetailReq
	GetESSyncTaskDetailResp                    = cmpool.GetESSyncTaskDetailResp
	GetESSyncTasksReq                          = cmpool.GetESSyncTasksReq
	GetESSyncTasksResp                         = cmpool.GetESSyncTasksResp
	GetExternalSyncExecutionDetailReq          = cmpool.GetExternalSyncExecutionDetailReq
	GetExternalSyncExecutionDetailResp         = cmpool.GetExternalSyncExecutionDetailResp
	GetExternalSyncExecutionLogsReq            = cmpool.GetExternalSyncExecutionLogsReq
	GetExternalSyncExecutionLogsResp           = cmpool.GetExternalSyncExecutionLogsResp
	GetExternalSyncTaskDetailReq               = cmpool.GetExternalSyncTaskDetailReq
	GetExternalSyncTaskDetailResp              = cmpool.GetExternalSyncTaskDetailResp
	GetExternalSyncTasksReq                    = cmpool.GetExternalSyncTasksReq
	GetExternalSyncTasksResp                   = cmpool.GetExternalSyncTasksResp
	GetHardwareResourceVerificationHistoryReq  = cmpool.GetHardwareResourceVerificationHistoryReq
	GetHardwareResourceVerificationHistoryResp = cmpool.GetHardwareResourceVerificationHistoryResp
	GetHardwareResourceVerificationStatusReq   = cmpool.GetHardwareResourceVerificationStatusReq
	GetHardwareResourceVerificationStatusResp  = cmpool.GetHardwareResourceVerificationStatusResp
	GetHostsDetailReq                          = cmpool.GetHostsDetailReq
	GetHostsDetailResp                         = cmpool.GetHostsDetailResp
	GetHostsPoolDetailReq                      = cmpool.GetHostsPoolDetailReq
	GetHostsPoolDetailResp                     = cmpool.GetHostsPoolDetailResp
	GetHostsPoolReq                            = cmpool.GetHostsPoolReq
	GetIdcConfListReq                          = cmpool.GetIdcConfListReq
	GetIdcConfListResp                         = cmpool.GetIdcConfListResp
	GetScheduledTaskDetailReq                  = cmpool.GetScheduledTaskDetailReq
	GetScheduledTaskDetailResp                 = cmpool.GetScheduledTaskDetailResp
	GetScheduledTaskExecutionDetailsReq        = cmpool.GetScheduledTaskExecutionDetailsReq
	GetScheduledTaskExecutionDetailsResp       = cmpool.GetScheduledTaskExecutionDetailsResp
	GetScheduledTaskExecutionHistoryReq        = cmpool.GetScheduledTaskExecutionHistoryReq
	GetScheduledTaskExecutionHistoryResp       = cmpool.GetScheduledTaskExecutionHistoryResp
	GetScheduledTasksReq                       = cmpool.GetScheduledTasksReq
	GetScheduledTasksResp                      = cmpool.GetScheduledTasksResp
	HardDelHostsReq                            = cmpool.HardDelHostsReq
	HardDelHostsResp                           = cmpool.HardDelHostsResp
	HardwareResourceVerificationHistory        = cmpool.HardwareResourceVerificationHistory
	HardwareResourceVerificationReq            = cmpool.HardwareResourceVerificationReq
	HardwareResourceVerificationResp           = cmpool.HardwareResourceVerificationResp
	HardwareResourceVerificationStatus         = cmpool.HardwareResourceVerificationStatus
	Host                                       = cmpool.Host
	HostApplicationInfo                        = cmpool.HostApplicationInfo
	HostClusterInfo                            = cmpool.HostClusterInfo
	HostDetail                                 = cmpool.HostDetail
	HostExecutionDetail                        = cmpool.HostExecutionDetail
	HostExtInfo                                = cmpool.HostExtInfo
	HostHardwareInfo                           = cmpool.HostHardwareInfo
	HostLoc                                    = cmpool.HostLoc
	HostPoolDetail                             = cmpool.HostPoolDetail
	HostResult                                 = cmpool.HostResult
	HostWithoutMonitoring                      = cmpool.HostWithoutMonitoring
	HostsApp                                   = cmpool.HostsApp
	IdcConf                                    = cmpool.IdcConf
	InjectAllReq                               = cmpool.InjectAllReq
	InjectAllResp                              = cmpool.InjectAllResp
	InjectHostsReq                             = cmpool.InjectHostsReq
	InjectHostsResp                            = cmpool.InjectHostsResp
	LoadServerMetricsCSVProgressResp           = cmpool.LoadServerMetricsCSVProgressResp
	LoadServerMetricsCSVReq                    = cmpool.LoadServerMetricsCSVReq
	LoginReq                                   = cmpool.LoginReq
	LoginResp                                  = cmpool.LoginResp
	LogoutReq                                  = cmpool.LogoutReq
	LogoutResp                                 = cmpool.LogoutResp
	ManualAddHostReq                           = cmpool.ManualAddHostReq
	ManualAddHostResp                          = cmpool.ManualAddHostResp
	ManualHostHardwareInfo                     = cmpool.ManualHostHardwareInfo
	MatchIdcByIpReq                            = cmpool.MatchIdcByIpReq
	MatchIdcByIpResp                           = cmpool.MatchIdcByIpResp
	MdfHostsAppReq                             = cmpool.MdfHostsAppReq
	MdfHostsAppResp                            = cmpool.MdfHostsAppResp
	ModifyHostsReq                             = cmpool.ModifyHostsReq
	ModifyHostsResp                            = cmpool.ModifyHostsResp
	ScheduledTask                              = cmpool.ScheduledTask
	ScheduledTaskExecutionDetail               = cmpool.ScheduledTaskExecutionDetail
	ScheduledTaskExecutionHistory              = cmpool.ScheduledTaskExecutionHistory
	ScheduledTaskExecutionInfo                 = cmpool.ScheduledTaskExecutionInfo
	ServerResource                             = cmpool.ServerResource
	ServerResourceMax                          = cmpool.ServerResourceMax
	ServerResourceMaxReq                       = cmpool.ServerResourceMaxReq
	ServerResourceMaxResp                      = cmpool.ServerResourceMaxResp
	ServerResourceReq                          = cmpool.ServerResourceReq
	ServerResourceResp                         = cmpool.ServerResourceResp
	SoftDelHostsReq                            = cmpool.SoftDelHostsReq
	SoftDelHostsResp                           = cmpool.SoftDelHostsResp
	SyncClusterGroupsReq                       = cmpool.SyncClusterGroupsReq
	SyncClusterGroupsResp                      = cmpool.SyncClusterGroupsResp
	SyncExternalCmdbReq                        = cmpool.SyncExternalCmdbReq
	SyncExternalCmdbResp                       = cmpool.SyncExternalCmdbResp
	SyncHostsReq                               = cmpool.SyncHostsReq
	SyncHostsResp                              = cmpool.SyncHostsResp
	UpdateESSyncTaskReq                        = cmpool.UpdateESSyncTaskReq
	UpdateESSyncTaskResp                       = cmpool.UpdateESSyncTaskResp
	UpdateExternalSyncTaskReq                  = cmpool.UpdateExternalSyncTaskReq
	UpdateExternalSyncTaskResp                 = cmpool.UpdateExternalSyncTaskResp
	UpdateHostsIdcReq                          = cmpool.UpdateHostsIdcReq
	UpdateHostsIdcResp                         = cmpool.UpdateHostsIdcResp
	UpdateIdcConfReq                           = cmpool.UpdateIdcConfReq
	UpdateIdcConfResp                          = cmpool.UpdateIdcConfResp
	UpdateScheduledTaskReq                     = cmpool.UpdateScheduledTaskReq
	UpdateScheduledTaskResp                    = cmpool.UpdateScheduledTaskResp
	UserInfo                                   = cmpool.UserInfo
	ValidateTokenReq                           = cmpool.ValidateTokenReq
	ValidateTokenResp                          = cmpool.ValidateTokenResp
	VerifyMonitoringDataReq                    = cmpool.VerifyMonitoringDataReq
	VerifyMonitoringDataResp                   = cmpool.VerifyMonitoringDataResp

	Cmpool interface {
		// 从CMDB抽取主机数据
		CmdbExtractByHosts(ctx context.Context, in *ExtractByHostsReq, opts ...grpc.CallOption) (*ExtractByHostsResp, error)
		// <必要数据搜集>，全量抽取CMDB中数据库服务器的数据并刷新到数据库资源池
		CmdbExtractAll(ctx context.Context, in *ExtractAllReq, opts ...grpc.CallOption) (*ExtractAllResp, error)
		// 数据搜集，按照cmdb中的ownerGroup抽取所有属于具体组的服务器并写入hosts_pool
		CmdbExtractHostsByOwner(ctx context.Context, in *ExtractByOwnerReq, opts ...grpc.CallOption) (*ExtractByOwnerResp, error)
		// 向CMDB回写数据
		CmdbInjectAll(ctx context.Context, in *InjectAllReq, opts ...grpc.CallOption) (*InjectAllResp, error)
		// 向 cmdb 中注入维护后的数据库资源池中对象的数据
		CmdbInjectByHosts(ctx context.Context, in *InjectHostsReq, opts ...grpc.CallOption) (*InjectHostsResp, error)
		// 数据库主机池数据维护
		CmdbSyncHosts(ctx context.Context, in *SyncHostsReq, opts ...grpc.CallOption) (*SyncHostsResp, error)
		// 手动修改资源池主机信息，如果主机信息最终 isStatic 不为 True，那么这里的修改会被后续的任务以真实数据刷掉
		CmdbModifyHosts(ctx context.Context, in *ModifyHostsReq, opts ...grpc.CallOption) (*ModifyHostsResp, error)
		// 软删除资源池主机
		CmdbSoftDelHosts(ctx context.Context, in *SoftDelHostsReq, opts ...grpc.CallOption) (*SoftDelHostsResp, error)
		// 硬删除资源池主机
		CmdbHardDelHosts(ctx context.Context, in *HardDelHostsReq, opts ...grpc.CallOption) (*HardDelHostsResp, error)
		// 获取资源池主机信息，包括cmdb信息，应用部署信息等所有相关数据（这里是根据hosts_pool实时检索，数据并不来自于hosts_application表）
		CmdbGetHostsDetail(ctx context.Context, in *GetHostsDetailReq, opts ...grpc.CallOption) (*GetHostsDetailResp, error)
		// 内部数据加工和检索
		CollectApplications(ctx context.Context, in *CollAppsReq, opts ...grpc.CallOption) (*CollAppsResp, error)
		// 查询主机信息，主页面数据展示，返回的数据实际上和detail接口一致，这里没有做区别实现，如果有需要可以添加
		GetHostsPool(ctx context.Context, in *GetHostsPoolReq, opts ...grpc.CallOption) (*GetHostsDetailResp, error)
		// 查询主机硬件信息详情，主机子页面显示
		GetHostsPoolDetail(ctx context.Context, in *GetHostsPoolDetailReq, opts ...grpc.CallOption) (*GetHostsPoolDetailResp, error)
		// 手动添加资源池主机应用信息
		AddHostsApplication(ctx context.Context, in *AddHostsAppReq, opts ...grpc.CallOption) (*AddHostsAppResp, error)
		// 手动修改资源池主机应用信息
		ModifyHostsApplication(ctx context.Context, in *MdfHostsAppReq, opts ...grpc.CallOption) (*MdfHostsAppResp, error)
		// 删除资源池主机应用信息
		DeleteHostsApplication(ctx context.Context, in *DelHostsAppReq, opts ...grpc.CallOption) (*DelHostsAppResp, error)
		// 查询所有集群组及对应业务线
		GetClusterGroups(ctx context.Context, in *ClusterGroupsReq, opts ...grpc.CallOption) (*ClusterGroupsResp, error)
		// 查询主机资源使用率数据
		GetServerResource(ctx context.Context, in *ServerResourceReq, opts ...grpc.CallOption) (*ServerResourceResp, error)
		// 查询主机资源最大利用率数据
		GetServerResourceMax(ctx context.Context, in *ServerResourceMaxReq, opts ...grpc.CallOption) (*ServerResourceMaxResp, error)
		// 查询主机资源最大利用率数据（支持集群数组）
		GetClusterResources(ctx context.Context, in *ClusterResourceReq, opts ...grpc.CallOption) (*ClusterResourceResp, error)
		// 获取集群资源最大利用率信息
		GetClusterResourcesMax(ctx context.Context, in *ClusterResourceReq, opts ...grpc.CallOption) (*ClusterResourceMaxResp, error)
		// 获取磁盘预测数据
		GetDiskPrediction(ctx context.Context, in *DiskPredictionReq, opts ...grpc.CallOption) (*DiskPredictionResp, error)
		// 获取备份恢复检查信息
		GetBackupRestoreCheckInfo(ctx context.Context, in *BackupRestoreCheckInfoReq, opts ...grpc.CallOption) (*BackupRestoreCheckInfoResp, error)
		// 获取集群确认摘要
		GetClusterConfirmSummary(ctx context.Context, in *ClusterConfirmSummaryReq, opts ...grpc.CallOption) (*ClusterConfirmSummaryResp, error)
		// 同步集群组数据
		SyncClusterGroups(ctx context.Context, in *SyncClusterGroupsReq, opts ...grpc.CallOption) (*SyncClusterGroupsResp, error)
		// 从集群实例表同步主机到hosts_pool和hosts_applications表
		SyncHostsFromClusters(ctx context.Context, in *SyncClusterGroupsReq, opts ...grpc.CallOption) (*SyncClusterGroupsResp, error)
		LoadServerMetricsFromCsv(ctx context.Context, in *LoadServerMetricsCSVReq, opts ...grpc.CallOption) (cmpool.Cmpool_LoadServerMetricsFromCsvClient, error)
		// 监控数据核对
		VerifyMonitoringData(ctx context.Context, in *VerifyMonitoringDataReq, opts ...grpc.CallOption) (*VerifyMonitoringDataResp, error)
		// 硬件资源验证
		HardwareResourceVerification(ctx context.Context, in *HardwareResourceVerificationReq, opts ...grpc.CallOption) (*HardwareResourceVerificationResp, error)
		// 获取硬件资源验证状态
		GetHardwareResourceVerificationStatus(ctx context.Context, in *GetHardwareResourceVerificationStatusReq, opts ...grpc.CallOption) (*GetHardwareResourceVerificationStatusResp, error)
		// 获取硬件资源验证历史记录
		GetHardwareResourceVerificationHistory(ctx context.Context, in *GetHardwareResourceVerificationHistoryReq, opts ...grpc.CallOption) (*GetHardwareResourceVerificationHistoryResp, error)
		// 定时任务相关方法
		CreateScheduledTask(ctx context.Context, in *CreateScheduledTaskReq, opts ...grpc.CallOption) (*CreateScheduledTaskResp, error)
		// 更新定时任务
		UpdateScheduledTask(ctx context.Context, in *UpdateScheduledTaskReq, opts ...grpc.CallOption) (*UpdateScheduledTaskResp, error)
		// 删除定时任务
		DeleteScheduledTask(ctx context.Context, in *DeleteScheduledTaskReq, opts ...grpc.CallOption) (*DeleteScheduledTaskResp, error)
		// 获取定时任务列表
		GetScheduledTasks(ctx context.Context, in *GetScheduledTasksReq, opts ...grpc.CallOption) (*GetScheduledTasksResp, error)
		// 获取定时任务详情
		GetScheduledTaskDetail(ctx context.Context, in *GetScheduledTaskDetailReq, opts ...grpc.CallOption) (*GetScheduledTaskDetailResp, error)
		// 启用/禁用定时任务
		EnableScheduledTask(ctx context.Context, in *EnableScheduledTaskReq, opts ...grpc.CallOption) (*EnableScheduledTaskResp, error)
		// 获取定时任务执行历史
		GetScheduledTaskExecutionHistory(ctx context.Context, in *GetScheduledTaskExecutionHistoryReq, opts ...grpc.CallOption) (*GetScheduledTaskExecutionHistoryResp, error)
		// 获取定时任务执行详情
		GetScheduledTaskExecutionDetails(ctx context.Context, in *GetScheduledTaskExecutionDetailsReq, opts ...grpc.CallOption) (*GetScheduledTaskExecutionDetailsResp, error)
		// 用户认证相关方法
		UserLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 验证Token
		ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error)
		// 用户登出
		UserLogout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
		// 创建用户（CAS用户自动创建）
		CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
		// 从外部CMDB获取主机硬件信息并更新hosts_pool表
		FetchHostsHardwareInfo(ctx context.Context, in *FetchHostsHardwareInfoReq, opts ...grpc.CallOption) (*FetchHostsHardwareInfoResp, error)
		// 从外部CMDB同步完整主机信息到hosts_pool表
		SyncExternalCmdb(ctx context.Context, in *SyncExternalCmdbReq, opts ...grpc.CallOption) (*SyncExternalCmdbResp, error)
		// 手动添加主机到hosts_pool表并同步相关信息
		ManualAddHost(ctx context.Context, in *ManualAddHostReq, opts ...grpc.CallOption) (*ManualAddHostResp, error)
		// 自动获取主机信息用于填充表单
		AutoFetchHostInfo(ctx context.Context, in *AutoFetchHostInfoReq, opts ...grpc.CallOption) (*AutoFetchHostInfoResp, error)
		// IDC机房配置管理相关方法
		GetIdcConfList(ctx context.Context, in *GetIdcConfListReq, opts ...grpc.CallOption) (*GetIdcConfListResp, error)
		// 创建IDC机房配置
		CreateIdcConf(ctx context.Context, in *CreateIdcConfReq, opts ...grpc.CallOption) (*CreateIdcConfResp, error)
		// 更新IDC机房配置
		UpdateIdcConf(ctx context.Context, in *UpdateIdcConfReq, opts ...grpc.CallOption) (*UpdateIdcConfResp, error)
		// 删除IDC机房配置
		DeleteIdcConf(ctx context.Context, in *DeleteIdcConfReq, opts ...grpc.CallOption) (*DeleteIdcConfResp, error)
		// 根据IP匹配IDC机房
		MatchIdcByIp(ctx context.Context, in *MatchIdcByIpReq, opts ...grpc.CallOption) (*MatchIdcByIpResp, error)
		// 批量更新主机IDC信息
		UpdateHostsIdc(ctx context.Context, in *UpdateHostsIdcReq, opts ...grpc.CallOption) (*UpdateHostsIdcResp, error)
		// ========== 统一的外部资源同步接口（推荐使用） ==========
		CreateExternalSyncTask(ctx context.Context, in *CreateExternalSyncTaskReq, opts ...grpc.CallOption) (*CreateExternalSyncTaskResp, error)
		// 更新外部同步任务配置
		UpdateExternalSyncTask(ctx context.Context, in *UpdateExternalSyncTaskReq, opts ...grpc.CallOption) (*UpdateExternalSyncTaskResp, error)
		// 删除外部同步任务配置
		DeleteExternalSyncTask(ctx context.Context, in *DeleteExternalSyncTaskReq, opts ...grpc.CallOption) (*DeleteExternalSyncTaskResp, error)
		// 获取外部同步任务配置列表
		GetExternalSyncTasks(ctx context.Context, in *GetExternalSyncTasksReq, opts ...grpc.CallOption) (*GetExternalSyncTasksResp, error)
		// 获取外部同步任务配置详情
		GetExternalSyncTaskDetail(ctx context.Context, in *GetExternalSyncTaskDetailReq, opts ...grpc.CallOption) (*GetExternalSyncTaskDetailResp, error)
		// 启用/禁用外部同步任务
		EnableExternalSyncTask(ctx context.Context, in *EnableExternalSyncTaskReq, opts ...grpc.CallOption) (*EnableExternalSyncTaskResp, error)
		// 2. 同步执行接口
		ExecuteExternalSyncByHostList(ctx context.Context, in *ExecuteExternalSyncByHostListReq, opts ...grpc.CallOption) (*ExecuteExternalSyncResp, error)
		// 根据文件立即执行外部同步
		ExecuteExternalSyncByFile(ctx context.Context, in *ExecuteExternalSyncByFileReq, opts ...grpc.CallOption) (*ExecuteExternalSyncResp, error)
		// 外部同步全量同步
		ExecuteExternalSyncFullSync(ctx context.Context, in *ExecuteExternalSyncFullSyncReq, opts ...grpc.CallOption) (*ExecuteExternalSyncResp, error)
		// 3. 执行记录查询接口（已统一，无需修改）
		GetExternalSyncExecutionLogs(ctx context.Context, in *GetExternalSyncExecutionLogsReq, opts ...grpc.CallOption) (*GetExternalSyncExecutionLogsResp, error)
		// 获取外部数据同步执行详情
		GetExternalSyncExecutionDetail(ctx context.Context, in *GetExternalSyncExecutionDetailReq, opts ...grpc.CallOption) (*GetExternalSyncExecutionDetailResp, error)
		// ========== 已废弃的ES专用接口（请使用统一接口 create_external_sync_task 等） ==========
		CreateEsSyncTask(ctx context.Context, in *CreateESSyncTaskReq, opts ...grpc.CallOption) (*CreateESSyncTaskResp, error)
		// [DEPRECATED] 更新ES数据同步任务配置 - 请使用 update_external_sync_task
		UpdateEsSyncTask(ctx context.Context, in *UpdateESSyncTaskReq, opts ...grpc.CallOption) (*UpdateESSyncTaskResp, error)
		// [DEPRECATED] 删除ES数据同步任务配置 - 请使用 delete_external_sync_task
		DeleteEsSyncTask(ctx context.Context, in *DeleteESSyncTaskReq, opts ...grpc.CallOption) (*DeleteESSyncTaskResp, error)
		// [DEPRECATED] 获取ES数据同步任务配置列表 - 请使用 get_external_sync_tasks
		GetEsSyncTasks(ctx context.Context, in *GetESSyncTasksReq, opts ...grpc.CallOption) (*GetESSyncTasksResp, error)
		// [DEPRECATED] 获取ES数据同步任务配置详情 - 请使用 get_external_sync_task_detail
		GetEsSyncTaskDetail(ctx context.Context, in *GetESSyncTaskDetailReq, opts ...grpc.CallOption) (*GetESSyncTaskDetailResp, error)
		// [DEPRECATED] 启用/禁用ES数据同步任务 - 请使用 enable_external_sync_task
		EnableEsSyncTask(ctx context.Context, in *EnableESSyncTaskReq, opts ...grpc.CallOption) (*EnableESSyncTaskResp, error)
		// ES数据同步执行相关方法
		ExecuteEsSyncByHostList(ctx context.Context, in *ExecuteESSyncByHostListReq, opts ...grpc.CallOption) (*ExecuteESSyncResp, error)
		// [DEPRECATED] 根据文件立即执行ES数据同步 - 请使用 execute_external_sync_by_file
		ExecuteEsSyncByFile(ctx context.Context, in *ExecuteESSyncByFileReq, opts ...grpc.CallOption) (*ExecuteESSyncResp, error)
		// [DEPRECATED] ES全量同步 - 请使用 execute_external_sync_full_sync
		ExecuteEsSyncFullSync(ctx context.Context, in *ExecuteESSyncFullSyncReq, opts ...grpc.CallOption) (*ExecuteESSyncFullSyncResp, error)
		// ========== 已废弃的CMSys专用接口（请使用统一接口） ==========
		ExecuteCmsysSync(ctx context.Context, in *ExecuteCMSysSyncReq, opts ...grpc.CallOption) (*ExecuteCMSysSyncResp, error)
		// [DEPRECATED] CMSys按文件执行同步 - 请使用 execute_external_sync_by_file
		ExecuteCmsysSyncByFile(ctx context.Context, in *ExecuteCMSysSyncByFileReq, opts ...grpc.CallOption) (*ExecuteCMSysSyncResp, error)
		// [DEPRECATED] CMSys全量同步 - 请使用 execute_external_sync_full_sync
		ExecuteCmsysSyncFullSync(ctx context.Context, in *ExecuteCMSysSyncFullSyncReq, opts ...grpc.CallOption) (*ExecuteCMSysSyncResp, error)
	}

	defaultCmpool struct {
		cli zrpc.Client
	}
)

func NewCmpool(cli zrpc.Client) Cmpool {
	return &defaultCmpool{
		cli: cli,
	}
}

// 从CMDB抽取主机数据
func (m *defaultCmpool) CmdbExtractByHosts(ctx context.Context, in *ExtractByHostsReq, opts ...grpc.CallOption) (*ExtractByHostsResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CmdbExtractByHosts(ctx, in, opts...)
}

// <必要数据搜集>，全量抽取CMDB中数据库服务器的数据并刷新到数据库资源池
func (m *defaultCmpool) CmdbExtractAll(ctx context.Context, in *ExtractAllReq, opts ...grpc.CallOption) (*ExtractAllResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CmdbExtractAll(ctx, in, opts...)
}

// 数据搜集，按照cmdb中的ownerGroup抽取所有属于具体组的服务器并写入hosts_pool
func (m *defaultCmpool) CmdbExtractHostsByOwner(ctx context.Context, in *ExtractByOwnerReq, opts ...grpc.CallOption) (*ExtractByOwnerResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CmdbExtractHostsByOwner(ctx, in, opts...)
}

// 向CMDB回写数据
func (m *defaultCmpool) CmdbInjectAll(ctx context.Context, in *InjectAllReq, opts ...grpc.CallOption) (*InjectAllResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CmdbInjectAll(ctx, in, opts...)
}

// 向 cmdb 中注入维护后的数据库资源池中对象的数据
func (m *defaultCmpool) CmdbInjectByHosts(ctx context.Context, in *InjectHostsReq, opts ...grpc.CallOption) (*InjectHostsResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CmdbInjectByHosts(ctx, in, opts...)
}

// 数据库主机池数据维护
func (m *defaultCmpool) CmdbSyncHosts(ctx context.Context, in *SyncHostsReq, opts ...grpc.CallOption) (*SyncHostsResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CmdbSyncHosts(ctx, in, opts...)
}

// 手动修改资源池主机信息，如果主机信息最终 isStatic 不为 True，那么这里的修改会被后续的任务以真实数据刷掉
func (m *defaultCmpool) CmdbModifyHosts(ctx context.Context, in *ModifyHostsReq, opts ...grpc.CallOption) (*ModifyHostsResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CmdbModifyHosts(ctx, in, opts...)
}

// 软删除资源池主机
func (m *defaultCmpool) CmdbSoftDelHosts(ctx context.Context, in *SoftDelHostsReq, opts ...grpc.CallOption) (*SoftDelHostsResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CmdbSoftDelHosts(ctx, in, opts...)
}

// 硬删除资源池主机
func (m *defaultCmpool) CmdbHardDelHosts(ctx context.Context, in *HardDelHostsReq, opts ...grpc.CallOption) (*HardDelHostsResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CmdbHardDelHosts(ctx, in, opts...)
}

// 获取资源池主机信息，包括cmdb信息，应用部署信息等所有相关数据（这里是根据hosts_pool实时检索，数据并不来自于hosts_application表）
func (m *defaultCmpool) CmdbGetHostsDetail(ctx context.Context, in *GetHostsDetailReq, opts ...grpc.CallOption) (*GetHostsDetailResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CmdbGetHostsDetail(ctx, in, opts...)
}

// 内部数据加工和检索
func (m *defaultCmpool) CollectApplications(ctx context.Context, in *CollAppsReq, opts ...grpc.CallOption) (*CollAppsResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CollectApplications(ctx, in, opts...)
}

// 查询主机信息，主页面数据展示，返回的数据实际上和detail接口一致，这里没有做区别实现，如果有需要可以添加
func (m *defaultCmpool) GetHostsPool(ctx context.Context, in *GetHostsPoolReq, opts ...grpc.CallOption) (*GetHostsDetailResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetHostsPool(ctx, in, opts...)
}

// 查询主机硬件信息详情，主机子页面显示
func (m *defaultCmpool) GetHostsPoolDetail(ctx context.Context, in *GetHostsPoolDetailReq, opts ...grpc.CallOption) (*GetHostsPoolDetailResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetHostsPoolDetail(ctx, in, opts...)
}

// 手动添加资源池主机应用信息
func (m *defaultCmpool) AddHostsApplication(ctx context.Context, in *AddHostsAppReq, opts ...grpc.CallOption) (*AddHostsAppResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.AddHostsApplication(ctx, in, opts...)
}

// 手动修改资源池主机应用信息
func (m *defaultCmpool) ModifyHostsApplication(ctx context.Context, in *MdfHostsAppReq, opts ...grpc.CallOption) (*MdfHostsAppResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.ModifyHostsApplication(ctx, in, opts...)
}

// 删除资源池主机应用信息
func (m *defaultCmpool) DeleteHostsApplication(ctx context.Context, in *DelHostsAppReq, opts ...grpc.CallOption) (*DelHostsAppResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.DeleteHostsApplication(ctx, in, opts...)
}

// 查询所有集群组及对应业务线
func (m *defaultCmpool) GetClusterGroups(ctx context.Context, in *ClusterGroupsReq, opts ...grpc.CallOption) (*ClusterGroupsResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetClusterGroups(ctx, in, opts...)
}

// 查询主机资源使用率数据
func (m *defaultCmpool) GetServerResource(ctx context.Context, in *ServerResourceReq, opts ...grpc.CallOption) (*ServerResourceResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetServerResource(ctx, in, opts...)
}

// 查询主机资源最大利用率数据
func (m *defaultCmpool) GetServerResourceMax(ctx context.Context, in *ServerResourceMaxReq, opts ...grpc.CallOption) (*ServerResourceMaxResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetServerResourceMax(ctx, in, opts...)
}

// 查询主机资源最大利用率数据（支持集群数组）
func (m *defaultCmpool) GetClusterResources(ctx context.Context, in *ClusterResourceReq, opts ...grpc.CallOption) (*ClusterResourceResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetClusterResources(ctx, in, opts...)
}

// 获取集群资源最大利用率信息
func (m *defaultCmpool) GetClusterResourcesMax(ctx context.Context, in *ClusterResourceReq, opts ...grpc.CallOption) (*ClusterResourceMaxResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetClusterResourcesMax(ctx, in, opts...)
}

// 获取磁盘预测数据
func (m *defaultCmpool) GetDiskPrediction(ctx context.Context, in *DiskPredictionReq, opts ...grpc.CallOption) (*DiskPredictionResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetDiskPrediction(ctx, in, opts...)
}

// 获取备份恢复检查信息
func (m *defaultCmpool) GetBackupRestoreCheckInfo(ctx context.Context, in *BackupRestoreCheckInfoReq, opts ...grpc.CallOption) (*BackupRestoreCheckInfoResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetBackupRestoreCheckInfo(ctx, in, opts...)
}

// 获取集群确认摘要
func (m *defaultCmpool) GetClusterConfirmSummary(ctx context.Context, in *ClusterConfirmSummaryReq, opts ...grpc.CallOption) (*ClusterConfirmSummaryResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetClusterConfirmSummary(ctx, in, opts...)
}

// 同步集群组数据
func (m *defaultCmpool) SyncClusterGroups(ctx context.Context, in *SyncClusterGroupsReq, opts ...grpc.CallOption) (*SyncClusterGroupsResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.SyncClusterGroups(ctx, in, opts...)
}

// 从集群实例表同步主机到hosts_pool和hosts_applications表
func (m *defaultCmpool) SyncHostsFromClusters(ctx context.Context, in *SyncClusterGroupsReq, opts ...grpc.CallOption) (*SyncClusterGroupsResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.SyncHostsFromClusters(ctx, in, opts...)
}

func (m *defaultCmpool) LoadServerMetricsFromCsv(ctx context.Context, in *LoadServerMetricsCSVReq, opts ...grpc.CallOption) (cmpool.Cmpool_LoadServerMetricsFromCsvClient, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.LoadServerMetricsFromCsv(ctx, in, opts...)
}

// 监控数据核对
func (m *defaultCmpool) VerifyMonitoringData(ctx context.Context, in *VerifyMonitoringDataReq, opts ...grpc.CallOption) (*VerifyMonitoringDataResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.VerifyMonitoringData(ctx, in, opts...)
}

// 硬件资源验证
func (m *defaultCmpool) HardwareResourceVerification(ctx context.Context, in *HardwareResourceVerificationReq, opts ...grpc.CallOption) (*HardwareResourceVerificationResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.HardwareResourceVerification(ctx, in, opts...)
}

// 获取硬件资源验证状态
func (m *defaultCmpool) GetHardwareResourceVerificationStatus(ctx context.Context, in *GetHardwareResourceVerificationStatusReq, opts ...grpc.CallOption) (*GetHardwareResourceVerificationStatusResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetHardwareResourceVerificationStatus(ctx, in, opts...)
}

// 获取硬件资源验证历史记录
func (m *defaultCmpool) GetHardwareResourceVerificationHistory(ctx context.Context, in *GetHardwareResourceVerificationHistoryReq, opts ...grpc.CallOption) (*GetHardwareResourceVerificationHistoryResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetHardwareResourceVerificationHistory(ctx, in, opts...)
}

// 定时任务相关方法
func (m *defaultCmpool) CreateScheduledTask(ctx context.Context, in *CreateScheduledTaskReq, opts ...grpc.CallOption) (*CreateScheduledTaskResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CreateScheduledTask(ctx, in, opts...)
}

// 更新定时任务
func (m *defaultCmpool) UpdateScheduledTask(ctx context.Context, in *UpdateScheduledTaskReq, opts ...grpc.CallOption) (*UpdateScheduledTaskResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.UpdateScheduledTask(ctx, in, opts...)
}

// 删除定时任务
func (m *defaultCmpool) DeleteScheduledTask(ctx context.Context, in *DeleteScheduledTaskReq, opts ...grpc.CallOption) (*DeleteScheduledTaskResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.DeleteScheduledTask(ctx, in, opts...)
}

// 获取定时任务列表
func (m *defaultCmpool) GetScheduledTasks(ctx context.Context, in *GetScheduledTasksReq, opts ...grpc.CallOption) (*GetScheduledTasksResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetScheduledTasks(ctx, in, opts...)
}

// 获取定时任务详情
func (m *defaultCmpool) GetScheduledTaskDetail(ctx context.Context, in *GetScheduledTaskDetailReq, opts ...grpc.CallOption) (*GetScheduledTaskDetailResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetScheduledTaskDetail(ctx, in, opts...)
}

// 启用/禁用定时任务
func (m *defaultCmpool) EnableScheduledTask(ctx context.Context, in *EnableScheduledTaskReq, opts ...grpc.CallOption) (*EnableScheduledTaskResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.EnableScheduledTask(ctx, in, opts...)
}

// 获取定时任务执行历史
func (m *defaultCmpool) GetScheduledTaskExecutionHistory(ctx context.Context, in *GetScheduledTaskExecutionHistoryReq, opts ...grpc.CallOption) (*GetScheduledTaskExecutionHistoryResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetScheduledTaskExecutionHistory(ctx, in, opts...)
}

// 获取定时任务执行详情
func (m *defaultCmpool) GetScheduledTaskExecutionDetails(ctx context.Context, in *GetScheduledTaskExecutionDetailsReq, opts ...grpc.CallOption) (*GetScheduledTaskExecutionDetailsResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetScheduledTaskExecutionDetails(ctx, in, opts...)
}

// 用户认证相关方法
func (m *defaultCmpool) UserLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.UserLogin(ctx, in, opts...)
}

// 验证Token
func (m *defaultCmpool) ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.ValidateToken(ctx, in, opts...)
}

// 用户登出
func (m *defaultCmpool) UserLogout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.UserLogout(ctx, in, opts...)
}

// 创建用户（CAS用户自动创建）
func (m *defaultCmpool) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

// 从外部CMDB获取主机硬件信息并更新hosts_pool表
func (m *defaultCmpool) FetchHostsHardwareInfo(ctx context.Context, in *FetchHostsHardwareInfoReq, opts ...grpc.CallOption) (*FetchHostsHardwareInfoResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.FetchHostsHardwareInfo(ctx, in, opts...)
}

// 从外部CMDB同步完整主机信息到hosts_pool表
func (m *defaultCmpool) SyncExternalCmdb(ctx context.Context, in *SyncExternalCmdbReq, opts ...grpc.CallOption) (*SyncExternalCmdbResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.SyncExternalCmdb(ctx, in, opts...)
}

// 手动添加主机到hosts_pool表并同步相关信息
func (m *defaultCmpool) ManualAddHost(ctx context.Context, in *ManualAddHostReq, opts ...grpc.CallOption) (*ManualAddHostResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.ManualAddHost(ctx, in, opts...)
}

// 自动获取主机信息用于填充表单
func (m *defaultCmpool) AutoFetchHostInfo(ctx context.Context, in *AutoFetchHostInfoReq, opts ...grpc.CallOption) (*AutoFetchHostInfoResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.AutoFetchHostInfo(ctx, in, opts...)
}

// IDC机房配置管理相关方法
func (m *defaultCmpool) GetIdcConfList(ctx context.Context, in *GetIdcConfListReq, opts ...grpc.CallOption) (*GetIdcConfListResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetIdcConfList(ctx, in, opts...)
}

// 创建IDC机房配置
func (m *defaultCmpool) CreateIdcConf(ctx context.Context, in *CreateIdcConfReq, opts ...grpc.CallOption) (*CreateIdcConfResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CreateIdcConf(ctx, in, opts...)
}

// 更新IDC机房配置
func (m *defaultCmpool) UpdateIdcConf(ctx context.Context, in *UpdateIdcConfReq, opts ...grpc.CallOption) (*UpdateIdcConfResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.UpdateIdcConf(ctx, in, opts...)
}

// 删除IDC机房配置
func (m *defaultCmpool) DeleteIdcConf(ctx context.Context, in *DeleteIdcConfReq, opts ...grpc.CallOption) (*DeleteIdcConfResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.DeleteIdcConf(ctx, in, opts...)
}

// 根据IP匹配IDC机房
func (m *defaultCmpool) MatchIdcByIp(ctx context.Context, in *MatchIdcByIpReq, opts ...grpc.CallOption) (*MatchIdcByIpResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.MatchIdcByIp(ctx, in, opts...)
}

// 批量更新主机IDC信息
func (m *defaultCmpool) UpdateHostsIdc(ctx context.Context, in *UpdateHostsIdcReq, opts ...grpc.CallOption) (*UpdateHostsIdcResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.UpdateHostsIdc(ctx, in, opts...)
}

// ========== 统一的外部资源同步接口（推荐使用） ==========
func (m *defaultCmpool) CreateExternalSyncTask(ctx context.Context, in *CreateExternalSyncTaskReq, opts ...grpc.CallOption) (*CreateExternalSyncTaskResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CreateExternalSyncTask(ctx, in, opts...)
}

// 更新外部同步任务配置
func (m *defaultCmpool) UpdateExternalSyncTask(ctx context.Context, in *UpdateExternalSyncTaskReq, opts ...grpc.CallOption) (*UpdateExternalSyncTaskResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.UpdateExternalSyncTask(ctx, in, opts...)
}

// 删除外部同步任务配置
func (m *defaultCmpool) DeleteExternalSyncTask(ctx context.Context, in *DeleteExternalSyncTaskReq, opts ...grpc.CallOption) (*DeleteExternalSyncTaskResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.DeleteExternalSyncTask(ctx, in, opts...)
}

// 获取外部同步任务配置列表
func (m *defaultCmpool) GetExternalSyncTasks(ctx context.Context, in *GetExternalSyncTasksReq, opts ...grpc.CallOption) (*GetExternalSyncTasksResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetExternalSyncTasks(ctx, in, opts...)
}

// 获取外部同步任务配置详情
func (m *defaultCmpool) GetExternalSyncTaskDetail(ctx context.Context, in *GetExternalSyncTaskDetailReq, opts ...grpc.CallOption) (*GetExternalSyncTaskDetailResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetExternalSyncTaskDetail(ctx, in, opts...)
}

// 启用/禁用外部同步任务
func (m *defaultCmpool) EnableExternalSyncTask(ctx context.Context, in *EnableExternalSyncTaskReq, opts ...grpc.CallOption) (*EnableExternalSyncTaskResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.EnableExternalSyncTask(ctx, in, opts...)
}

// 2. 同步执行接口
func (m *defaultCmpool) ExecuteExternalSyncByHostList(ctx context.Context, in *ExecuteExternalSyncByHostListReq, opts ...grpc.CallOption) (*ExecuteExternalSyncResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.ExecuteExternalSyncByHostList(ctx, in, opts...)
}

// 根据文件立即执行外部同步
func (m *defaultCmpool) ExecuteExternalSyncByFile(ctx context.Context, in *ExecuteExternalSyncByFileReq, opts ...grpc.CallOption) (*ExecuteExternalSyncResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.ExecuteExternalSyncByFile(ctx, in, opts...)
}

// 外部同步全量同步
func (m *defaultCmpool) ExecuteExternalSyncFullSync(ctx context.Context, in *ExecuteExternalSyncFullSyncReq, opts ...grpc.CallOption) (*ExecuteExternalSyncResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.ExecuteExternalSyncFullSync(ctx, in, opts...)
}

// 3. 执行记录查询接口（已统一，无需修改）
func (m *defaultCmpool) GetExternalSyncExecutionLogs(ctx context.Context, in *GetExternalSyncExecutionLogsReq, opts ...grpc.CallOption) (*GetExternalSyncExecutionLogsResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetExternalSyncExecutionLogs(ctx, in, opts...)
}

// 获取外部数据同步执行详情
func (m *defaultCmpool) GetExternalSyncExecutionDetail(ctx context.Context, in *GetExternalSyncExecutionDetailReq, opts ...grpc.CallOption) (*GetExternalSyncExecutionDetailResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetExternalSyncExecutionDetail(ctx, in, opts...)
}

// ========== 已废弃的ES专用接口（请使用统一接口 create_external_sync_task 等） ==========
func (m *defaultCmpool) CreateEsSyncTask(ctx context.Context, in *CreateESSyncTaskReq, opts ...grpc.CallOption) (*CreateESSyncTaskResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.CreateEsSyncTask(ctx, in, opts...)
}

// [DEPRECATED] 更新ES数据同步任务配置 - 请使用 update_external_sync_task
func (m *defaultCmpool) UpdateEsSyncTask(ctx context.Context, in *UpdateESSyncTaskReq, opts ...grpc.CallOption) (*UpdateESSyncTaskResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.UpdateEsSyncTask(ctx, in, opts...)
}

// [DEPRECATED] 删除ES数据同步任务配置 - 请使用 delete_external_sync_task
func (m *defaultCmpool) DeleteEsSyncTask(ctx context.Context, in *DeleteESSyncTaskReq, opts ...grpc.CallOption) (*DeleteESSyncTaskResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.DeleteEsSyncTask(ctx, in, opts...)
}

// [DEPRECATED] 获取ES数据同步任务配置列表 - 请使用 get_external_sync_tasks
func (m *defaultCmpool) GetEsSyncTasks(ctx context.Context, in *GetESSyncTasksReq, opts ...grpc.CallOption) (*GetESSyncTasksResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetEsSyncTasks(ctx, in, opts...)
}

// [DEPRECATED] 获取ES数据同步任务配置详情 - 请使用 get_external_sync_task_detail
func (m *defaultCmpool) GetEsSyncTaskDetail(ctx context.Context, in *GetESSyncTaskDetailReq, opts ...grpc.CallOption) (*GetESSyncTaskDetailResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.GetEsSyncTaskDetail(ctx, in, opts...)
}

// [DEPRECATED] 启用/禁用ES数据同步任务 - 请使用 enable_external_sync_task
func (m *defaultCmpool) EnableEsSyncTask(ctx context.Context, in *EnableESSyncTaskReq, opts ...grpc.CallOption) (*EnableESSyncTaskResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.EnableEsSyncTask(ctx, in, opts...)
}

// ES数据同步执行相关方法
func (m *defaultCmpool) ExecuteEsSyncByHostList(ctx context.Context, in *ExecuteESSyncByHostListReq, opts ...grpc.CallOption) (*ExecuteESSyncResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.ExecuteEsSyncByHostList(ctx, in, opts...)
}

// [DEPRECATED] 根据文件立即执行ES数据同步 - 请使用 execute_external_sync_by_file
func (m *defaultCmpool) ExecuteEsSyncByFile(ctx context.Context, in *ExecuteESSyncByFileReq, opts ...grpc.CallOption) (*ExecuteESSyncResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.ExecuteEsSyncByFile(ctx, in, opts...)
}

// [DEPRECATED] ES全量同步 - 请使用 execute_external_sync_full_sync
func (m *defaultCmpool) ExecuteEsSyncFullSync(ctx context.Context, in *ExecuteESSyncFullSyncReq, opts ...grpc.CallOption) (*ExecuteESSyncFullSyncResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.ExecuteEsSyncFullSync(ctx, in, opts...)
}

// ========== 已废弃的CMSys专用接口（请使用统一接口） ==========
func (m *defaultCmpool) ExecuteCmsysSync(ctx context.Context, in *ExecuteCMSysSyncReq, opts ...grpc.CallOption) (*ExecuteCMSysSyncResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.ExecuteCmsysSync(ctx, in, opts...)
}

// [DEPRECATED] CMSys按文件执行同步 - 请使用 execute_external_sync_by_file
func (m *defaultCmpool) ExecuteCmsysSyncByFile(ctx context.Context, in *ExecuteCMSysSyncByFileReq, opts ...grpc.CallOption) (*ExecuteCMSysSyncResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.ExecuteCmsysSyncByFile(ctx, in, opts...)
}

// [DEPRECATED] CMSys全量同步 - 请使用 execute_external_sync_full_sync
func (m *defaultCmpool) ExecuteCmsysSyncFullSync(ctx context.Context, in *ExecuteCMSysSyncFullSyncReq, opts ...grpc.CallOption) (*ExecuteCMSysSyncResp, error) {
	client := cmpool.NewCmpoolClient(m.cli.Conn())
	return client.ExecuteCmsysSyncFullSync(ctx, in, opts...)
}
